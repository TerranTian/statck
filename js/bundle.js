var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
/*!
 *  howler.js v2.1.2
 *  howlerjs.com
 *
 *  (c) 2013-2019, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
  var HowlerGlobal = function() {
    this.init();
  };
  HowlerGlobal.prototype = {
    /**
     * Initialize the global Howler object.
     * @return {Howler}
     */
    init: function() {
      var self = this || Howler;

      // Create a global ID counter.
      self._counter = 1000;

      // Pool of unlocked HTML5 Audio objects.
      self._html5AudioPool = [];
      self.html5PoolSize = 10;

      // Internal properties.
      self._codecs = {};
      self._howls = [];
      self._muted = false;
      self._volume = 1;
      self._canPlayEvent = 'canplaythrough';
      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;

      // Public properties.
      self.masterGain = null;
      self.noAudio = false;
      self.usingWebAudio = true;
      self.autoSuspend = true;
      self.ctx = null;

      // Set to false to disable the auto audio unlocker.
      self.autoUnlock = true;

      // Setup the various state values for global tracking.
      self._setup();

      return self;
    },

    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this || Howler;
      vol = parseFloat(vol);

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        self._volume = vol;

        // Don't update any of the nodes if we are muted.
        if (self._muted) {
          return self;
        }

        // When using Web Audio, we just need to adjust the master gain.
        if (self.usingWebAudio) {
          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
        }

        // Loop through and change volume for all HTML5 audio nodes.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and change the volumes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node) {
                sound._node.volume = sound._volume * vol;
              }
            }
          }
        }

        return self;
      }

      return self._volume;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    mute: function(muted) {
      var self = this || Howler;

      // If we don't have an AudioContext created yet, run the setup.
      if (!self.ctx) {
        setupAudioContext();
      }

      self._muted = muted;

      // With Web Audio, we just need to mute the master gain.
      if (self.usingWebAudio) {
        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
      }

      // Loop through and mute all HTML5 Audio nodes.
      for (var i=0; i<self._howls.length; i++) {
        if (!self._howls[i]._webAudio) {
          // Get all of the sounds in this Howl group.
          var ids = self._howls[i]._getSoundIds();

          // Loop through all sounds and mark the audio node as muted.
          for (var j=0; j<ids.length; j++) {
            var sound = self._howls[i]._soundById(ids[j]);

            if (sound && sound._node) {
              sound._node.muted = (muted) ? true : sound._muted;
            }
          }
        }
      }

      return self;
    },

    /**
     * Unload and destroy all currently loaded Howl objects.
     * @return {Howler}
     */
    unload: function() {
      var self = this || Howler;

      for (var i=self._howls.length-1; i>=0; i--) {
        self._howls[i].unload();
      }

      // Create a new AudioContext to make sure it is fully reset.
      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {
        self.ctx.close();
        self.ctx = null;
        setupAudioContext();
      }

      return self;
    },

    /**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return (this || Howler)._codecs[ext.replace(/^x-/, '')];
    },

    /**
     * Setup various state values for global tracking.
     * @return {Howler}
     */
    _setup: function() {
      var self = this || Howler;

      // Keeps track of the suspend/resume state of the AudioContext.
      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';

      // Automatically begin the 30-second suspend process
      self._autoSuspend();

      // Check if audio is available.
      if (!self.usingWebAudio) {
        // No audio is available on this system if noAudio is set to true.
        if (typeof Audio !== 'undefined') {
          try {
            var test = new Audio();

            // Check if the canplaythrough event is available.
            if (typeof test.oncanplaythrough === 'undefined') {
              self._canPlayEvent = 'canplay';
            }
          } catch(e) {
            self.noAudio = true;
          }
        } else {
          self.noAudio = true;
        }
      }

      // Test to make sure audio isn't disabled in Internet Explorer.
      try {
        var test = new Audio();
        if (test.muted) {
          self.noAudio = true;
        }
      } catch (e) {}

      // Check for supported codecs.
      if (!self.noAudio) {
        self._setupCodecs();
      }

      return self;
    },

    /**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
    _setupCodecs: function() {
      var self = this || Howler;
      var audioTest = null;

      // Must wrap in a try/catch because IE11 in server mode throws an error.
      try {
        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;
      } catch (err) {
        return self;
      }

      if (!audioTest || typeof audioTest.canPlayType !== 'function') {
        return self;
      }

      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');

      // Opera version <33 has mixed MP3 support, so we need to check for and block it.
      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);

      self._codecs = {
        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),
        mpeg: !!mpegTest,
        opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
        ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
        wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),
        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
        weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ''),
        dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ''),
        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')
      };

      return self;
    },

    /**
     * Some browsers/devices will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _unlockAudio: function() {
      var self = this || Howler;

      // Only run this if Web Audio is supported and it hasn't already been unlocked.
      if (self._audioUnlocked || !self.ctx) {
        return;
      }

      self._audioUnlocked = false;
      self.autoUnlock = false;

      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.
      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.
      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.
      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
        self._mobileUnloaded = true;
        self.unload();
      }

      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:
      // http://stackoverflow.com/questions/24119684
      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);

      // Call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS, Android, etc.
      var unlock = function(e) {
        // Create a pool of unlocked HTML5 Audio objects that can
        // be used for playing sounds without user interaction. HTML5
        // Audio objects must be individually unlocked, as opposed
        // to the WebAudio API which only needs a single activation.
        // This must occur before WebAudio setup or the source.onended
        // event will not fire.
        for (var i=0; i<self.html5PoolSize; i++) {
          try {
            var audioNode = new Audio();

            // Mark this Audio object as unlocked to ensure it can get returned
            // to the unlocked pool when released.
            audioNode._unlocked = true;

            // Add the audio node to the pool.
            self._releaseHtml5Audio(audioNode);
          } catch (e) {
            self.noAudio = true;
          }
        }

        // Loop through any assigned audio nodes and unlock them.
        for (var i=0; i<self._howls.length; i++) {
          if (!self._howls[i]._webAudio) {
            // Get all of the sounds in this Howl group.
            var ids = self._howls[i]._getSoundIds();

            // Loop through all sounds and unlock the audio nodes.
            for (var j=0; j<ids.length; j++) {
              var sound = self._howls[i]._soundById(ids[j]);

              if (sound && sound._node && !sound._node._unlocked) {
                sound._node._unlocked = true;
                sound._node.load();
              }
            }
          }
        }

        // Fix Android can not play in suspend state.
        self._autoResume();

        // Create an empty buffer.
        var source = self.ctx.createBufferSource();
        source.buffer = self._scratchBuffer;
        source.connect(self.ctx.destination);

        // Play the empty buffer.
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.
        if (typeof self.ctx.resume === 'function') {
          self.ctx.resume();
        }

        // Setup a timeout to check that we are unlocked on the next event loop.
        source.onended = function() {
          source.disconnect(0);

          // Update the unlocked state and prevent this check from happening again.
          self._audioUnlocked = true;

          // Remove the touch start listener.
          document.removeEventListener('touchstart', unlock, true);
          document.removeEventListener('touchend', unlock, true);
          document.removeEventListener('click', unlock, true);

          // Let all sounds know that audio has been unlocked.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('unlock');
          }
        };
      };

      // Setup a touch start listener to attempt an unlock in.
      document.addEventListener('touchstart', unlock, true);
      document.addEventListener('touchend', unlock, true);
      document.addEventListener('click', unlock, true);

      return self;
    },

    /**
     * Get an unlocked HTML5 Audio object from the pool. If none are left,
     * return a new Audio object and throw a warning.
     * @return {Audio} HTML5 Audio object.
     */
    _obtainHtml5Audio: function() {
      var self = this || Howler;

      // Return the next object from the pool if one exists.
      if (self._html5AudioPool.length) {
        return self._html5AudioPool.pop();
      }

      //.Check if the audio is locked and throw a warning.
      var testPlay = new Audio().play();
      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {
        testPlay.catch(function() {
          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');
        });
      }

      return new Audio();
    },

    /**
     * Return an activated HTML5 Audio object to the pool.
     * @return {Howler}
     */
    _releaseHtml5Audio: function(audio) {
      var self = this || Howler;

      // Don't add audio to the pool if we don't know if it has been unlocked.
      if (audio._unlocked) {
        self._html5AudioPool.push(audio);
      }

      return self;
    },

    /**
     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
     * @return {Howler}
     */
    _autoSuspend: function() {
      var self = this;

      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      // Check if any sounds are playing.
      for (var i=0; i<self._howls.length; i++) {
        if (self._howls[i]._webAudio) {
          for (var j=0; j<self._howls[i]._sounds.length; j++) {
            if (!self._howls[i]._sounds[j]._paused) {
              return self;
            }
          }
        }
      }

      if (self._suspendTimer) {
        clearTimeout(self._suspendTimer);
      }

      // If no sound has played after 30 seconds, suspend the context.
      self._suspendTimer = setTimeout(function() {
        if (!self.autoSuspend) {
          return;
        }

        self._suspendTimer = null;
        self.state = 'suspending';
        self.ctx.suspend().then(function() {
          self.state = 'suspended';

          if (self._resumeAfterSuspend) {
            delete self._resumeAfterSuspend;
            self._autoResume();
          }
        });
      }, 30000);

      return self;
    },

    /**
     * Automatically resume the Web Audio AudioContext when a new sound is played.
     * @return {Howler}
     */
    _autoResume: function() {
      var self = this;

      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {
        return;
      }

      if (self.state === 'running' && self._suspendTimer) {
        clearTimeout(self._suspendTimer);
        self._suspendTimer = null;
      } else if (self.state === 'suspended') {
        self.ctx.resume().then(function() {
          self.state = 'running';

          // Emit to all Howls that the audio has resumed.
          for (var i=0; i<self._howls.length; i++) {
            self._howls[i]._emit('resume');
          }
        });

        if (self._suspendTimer) {
          clearTimeout(self._suspendTimer);
          self._suspendTimer = null;
        }
      } else if (self.state === 'suspending') {
        self._resumeAfterSuspend = true;
      }

      return self;
    }
  };

  // Setup the global audio controller.
  var Howler = new HowlerGlobal();

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Create an audio group controller.
   * @param {Object} o Passed in properties for this group.
   */
  var Howl = function(o) {
    var self = this;

    // Throw an error if no source is provided.
    if (!o.src || o.src.length === 0) {
      console.error('An array of source files must be passed with any new Howl.');
      return;
    }

    self.init(o);
  };
  Howl.prototype = {
    /**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
    init: function(o) {
      var self = this;

      // If we don't have an AudioContext created yet, run the setup.
      if (!Howler.ctx) {
        setupAudioContext();
      }

      // Setup user-defined default properties.
      self._autoplay = o.autoplay || false;
      self._format = (typeof o.format !== 'string') ? o.format : [o.format];
      self._html5 = o.html5 || false;
      self._muted = o.mute || false;
      self._loop = o.loop || false;
      self._pool = o.pool || 5;
      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;
      self._rate = o.rate || 1;
      self._sprite = o.sprite || {};
      self._src = (typeof o.src !== 'string') ? o.src : [o.src];
      self._volume = o.volume !== undefined ? o.volume : 1;
      self._xhrWithCredentials = o.xhrWithCredentials || false;

      // Setup all other default properties.
      self._duration = 0;
      self._state = 'unloaded';
      self._sounds = [];
      self._endTimers = {};
      self._queue = [];
      self._playLock = false;

      // Setup event listeners.
      self._onend = o.onend ? [{fn: o.onend}] : [];
      self._onfade = o.onfade ? [{fn: o.onfade}] : [];
      self._onload = o.onload ? [{fn: o.onload}] : [];
      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];
      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];
      self._onpause = o.onpause ? [{fn: o.onpause}] : [];
      self._onplay = o.onplay ? [{fn: o.onplay}] : [];
      self._onstop = o.onstop ? [{fn: o.onstop}] : [];
      self._onmute = o.onmute ? [{fn: o.onmute}] : [];
      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];
      self._onrate = o.onrate ? [{fn: o.onrate}] : [];
      self._onseek = o.onseek ? [{fn: o.onseek}] : [];
      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];
      self._onresume = [];

      // Web Audio or HTML5 Audio?
      self._webAudio = Howler.usingWebAudio && !self._html5;

      // Automatically try to enable audio.
      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {
        Howler._unlockAudio();
      }

      // Keep track of this Howl group in the global controller.
      Howler._howls.push(self);

      // If they selected autoplay, add a play event to the load queue.
      if (self._autoplay) {
        self._queue.push({
          event: 'play',
          action: function() {
            self.play();
          }
        });
      }

      // Load the source file unless otherwise specified.
      if (self._preload) {
        self.load();
      }

      return self;
    },

    /**
     * Load the audio file.
     * @return {Howler}
     */
    load: function() {
      var self = this;
      var url = null;

      // If no audio is available, quit immediately.
      if (Howler.noAudio) {
        self._emit('loaderror', null, 'No audio support.');
        return;
      }

      // Make sure our source is in an array.
      if (typeof self._src === 'string') {
        self._src = [self._src];
      }

      // Loop through the sources and pick the first one that is compatible.
      for (var i=0; i<self._src.length; i++) {
        var ext, str;

        if (self._format && self._format[i]) {
          // If an extension was specified, use that instead.
          ext = self._format[i];
        } else {
          // Make sure the source is a string.
          str = self._src[i];
          if (typeof str !== 'string') {
            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');
            continue;
          }

          // Extract the file extension from the URL or base64 data URI.
          ext = /^data:audio\/([^;,]+);/i.exec(str);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(str.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          }
        }

        // Log a warning if no extension was found.
        if (!ext) {
          console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
        }

        // Check if this extension is available.
        if (ext && Howler.codecs(ext)) {
          url = self._src[i];
          break;
        }
      }

      if (!url) {
        self._emit('loaderror', null, 'No codec support for selected audio sources.');
        return;
      }

      self._src = url;
      self._state = 'loading';

      // If the hosting page is HTTPS and the source isn't,
      // drop down to HTML5 Audio to avoid Mixed Content errors.
      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {
        self._html5 = true;
        self._webAudio = false;
      }

      // Create a new sound object and add it to the pool.
      new Sound(self);

      // Load and decode the audio data for playback.
      if (self._webAudio) {
        loadBuffer(self);
      }

      return self;
    },

    /**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Number}          Sound ID.
     */
    play: function(sprite, internal) {
      var self = this;
      var id = null;

      // Determine if a sprite, sound id or nothing was passed
      if (typeof sprite === 'number') {
        id = sprite;
        sprite = null;
      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {
        // If the passed sprite doesn't exist, do nothing.
        return null;
      } else if (typeof sprite === 'undefined') {
        // Use the default sound sprite (plays the full audio length).
        sprite = '__default';

        // Check if there is a single paused sound that isn't ended. 
        // If there is, play that sound. If not, continue as usual.  
        if (!self._playLock) {
          var num = 0;
          for (var i=0; i<self._sounds.length; i++) {
            if (self._sounds[i]._paused && !self._sounds[i]._ended) {
              num++;
              id = self._sounds[i]._id;
            }
          }

          if (num === 1) {
            sprite = null;
          } else {
            id = null;
          }
        }
      }

      // Get the selected node, or get one from the pool.
      var sound = id ? self._soundById(id) : self._inactiveSound();

      // If the sound doesn't exist, do nothing.
      if (!sound) {
        return null;
      }

      // Select the sprite definition.
      if (id && !sprite) {
        sprite = sound._sprite || '__default';
      }

      // If the sound hasn't loaded, we must wait to get the audio's duration.
      // We also need to wait to make sure we don't run into race conditions with
      // the order of function calls.
      if (self._state !== 'loaded') {
        // Set the sprite value on this sound.
        sound._sprite = sprite;

        // Mark this sound as not ended in case another sound is played before this one loads.
        sound._ended = false;

        // Add the sound to the queue to be played on load.
        var soundId = sound._id;
        self._queue.push({
          event: 'play',
          action: function() {
            self.play(soundId);
          }
        });

        return soundId;
      }

      // Don't play the sound if an id was passed and it is already playing.
      if (id && !sound._paused) {
        // Trigger the play event, in order to keep iterating through queue.
        if (!internal) {
          self._loadQueue('play');
        }

        return sound._id;
      }

      // Make sure the AudioContext isn't suspended, and resume it if it is.
      if (self._webAudio) {
        Howler._autoResume();
      }

      // Determine how long to play for and where to start playing.
      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);
      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);
      var timeout = (duration * 1000) / Math.abs(sound._rate);
      var start = self._sprite[sprite][0] / 1000;
      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;
      var loop = !!(sound._loop || self._sprite[sprite][2]);
      sound._sprite = sprite;

      // Mark the sound as ended instantly so that this async playback
      // doesn't get grabbed by another call to play while this one waits to start.
      sound._ended = false;

      // Update the parameters of the sound.
      var setParams = function() {
        sound._paused = false;
        sound._seek = seek;
        sound._start = start;
        sound._stop = stop;
        sound._loop = loop;
      };

      // End the sound instantly if seek is at the end.
      if (seek >= stop) {
        self._ended(sound);
        return;
      }

      // Begin the actual playback.
      var node = sound._node;
      if (self._webAudio) {
        // Fire this when the sound is ready to play to begin Web Audio playback.
        var playWebAudio = function() {
          self._playLock = false;
          setParams();
          self._refreshBuffer(sound);

          // Setup the playback params.
          var vol = (sound._muted || self._muted) ? 0 : sound._volume;
          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
          sound._playStart = Howler.ctx.currentTime;

          // Play the sound using the supported method.
          if (typeof node.bufferSource.start === 'undefined') {
            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
          } else {
            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
          }

          // Start a new timer if none is present.
          if (timeout !== Infinity) {
            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
          }

          if (!internal) {
            setTimeout(function() {
              self._emit('play', sound._id);
              self._loadQueue();
            }, 0);
          }
        };

        if (Howler.state === 'running') {
          playWebAudio();
        } else {
          self._playLock = true;

          // Wait for the audio context to resume before playing.
          self.once('resume', playWebAudio);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      } else {
        // Fire this when the sound is ready to play to begin HTML5 Audio playback.
        var playHtml5 = function() {
          node.currentTime = seek;
          node.muted = sound._muted || self._muted || Howler._muted || node.muted;
          node.volume = sound._volume * Howler.volume();
          node.playbackRate = sound._rate;

          // Some browsers will throw an error if this is called without user interaction.
          try {
            var play = node.play();

            // Support older browsers that don't support promises, and thus don't have this issue.
            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {
              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().
              self._playLock = true;

              // Set param values immediately.
              setParams();

              // Releases the lock and executes queued actions.
              play
                .then(function() {
                  self._playLock = false;
                  node._unlocked = true;
                  if (!internal) {
                    self._emit('play', sound._id);
                    self._loadQueue();
                  }
                })
                .catch(function() {
                  self._playLock = false;
                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                    'on mobile devices and Chrome where playback was not within a user interaction.');

                  // Reset the ended and paused values.
                  sound._ended = true;
                  sound._paused = true;
                });
            } else if (!internal) {
              self._playLock = false;
              setParams();
              self._emit('play', sound._id);
              self._loadQueue();
            }

            // Setting rate before playing won't work in IE, so we set it again here.
            node.playbackRate = sound._rate;

            // If the node is still paused, then we can assume there was a playback issue.
            if (node.paused) {
              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +
                'on mobile devices and Chrome where playback was not within a user interaction.');
              return;
            }

            // Setup the end timer on sprites or listen for the ended event.
            if (sprite !== '__default' || sound._loop) {
              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            } else {
              self._endTimers[sound._id] = function() {
                // Fire ended on this audio node.
                self._ended(sound);

                // Clear this listener.
                node.removeEventListener('ended', self._endTimers[sound._id], false);
              };
              node.addEventListener('ended', self._endTimers[sound._id], false);
            }
          } catch (err) {
            self._emit('playerror', sound._id, err);
          }
        };

        // If this is streaming audio, make sure the src is set and load again.
        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {
          node.src = self._src;
          node.load();
        }

        // Play immediately if ready, or wait for the 'canplaythrough'e vent.
        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
        if (node.readyState >= 3 || loadedNoReadyState) {
          playHtml5();
        } else {
          self._playLock = true;

          var listener = function() {
            // Begin playback.
            playHtml5();

            // Clear this listener.
            node.removeEventListener(Howler._canPlayEvent, listener, false);
          };
          node.addEventListener(Howler._canPlayEvent, listener, false);

          // Cancel the end timer.
          self._clearTimer(sound._id);
        }
      }

      return sound._id;
    },

    /**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'pause',
          action: function() {
            self.pause(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be paused.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound && !sound._paused) {
          // Reset the seek position.
          sound._seek = self.seek(ids[i]);
          sound._rateSeek = 0;
          sound._paused = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound has been created.
              if (!sound._node.bufferSource) {
                continue;
              }

              if (typeof sound._node.bufferSource.stop === 'undefined') {
                sound._node.bufferSource.noteOff(0);
              } else {
                sound._node.bufferSource.stop(0);
              }

              // Clean up the buffer source.
              self._cleanBuffer(sound._node);
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.pause();
            }
          }
        }

        // Fire the pause event, unless `true` is passed as the 2nd argument.
        if (!arguments[1]) {
          self._emit('pause', sound ? sound._id : null);
        }
      }

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @param  {Boolean} internal Internal Use: true prevents event firing.
     * @return {Howl}
     */
    stop: function(id, internal) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to stop when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'stop',
          action: function() {
            self.stop(id);
          }
        });

        return self;
      }

      // If no id is passed, get all ID's to be stopped.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Clear the end timer.
        self._clearTimer(ids[i]);

        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          // Reset the seek position.
          sound._seek = sound._start || 0;
          sound._rateSeek = 0;
          sound._paused = true;
          sound._ended = true;

          // Stop currently running fades.
          self._stopFade(ids[i]);

          if (sound._node) {
            if (self._webAudio) {
              // Make sure the sound's AudioBufferSourceNode has been created.
              if (sound._node.bufferSource) {
                if (typeof sound._node.bufferSource.stop === 'undefined') {
                  sound._node.bufferSource.noteOff(0);
                } else {
                  sound._node.bufferSource.stop(0);
                }

                // Clean up the buffer source.
                self._cleanBuffer(sound._node);
              }
            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
              sound._node.currentTime = sound._start || 0;
              sound._node.pause();

              // If this is a live stream, stop download once the audio is stopped.
              if (sound._node.duration === Infinity) {
                self._clearSound(sound._node);
              }
            }
          }

          if (!internal) {
            self._emit('stop', sound._id);
          }
        }
      }

      return self;
    },

    /**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
    mute: function(muted, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to mute when capable.
      if (self._state !== 'loaded'|| self._playLock) {
        self._queue.push({
          event: 'mute',
          action: function() {
            self.mute(muted, id);
          }
        });

        return self;
      }

      // If applying mute/unmute to all sounds, update the group's value.
      if (typeof id === 'undefined') {
        if (typeof muted === 'boolean') {
          self._muted = muted;
        } else {
          return self._muted;
        }
      }

      // If no id is passed, get all ID's to be muted.
      var ids = self._getSoundIds(id);

      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        if (sound) {
          sound._muted = muted;

          // Cancel active fade and set the volume to the end value.
          if (sound._interval) {
            self._stopFade(sound._id);
          }

          if (self._webAudio && sound._node) {
            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
          } else if (sound._node) {
            sound._node.muted = Howler._muted ? true : muted;
          }

          self._emit('mute', sound._id);
        }
      }

      return self;
    },

    /**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
    volume: function() {
      var self = this;
      var args = arguments;
      var vol, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // Return the value of the groups' volume.
        return self._volume;
      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {
        // First check if this is an ID, and if not, assume it is a new volume.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          vol = parseFloat(args[0]);
        }
      } else if (args.length >= 2) {
        vol = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the volume or return the current volume.
      var sound;
      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {
        // If the sound hasn't loaded, add it to the load queue to change volume when capable.
        if (self._state !== 'loaded'|| self._playLock) {
          self._queue.push({
            event: 'volume',
            action: function() {
              self.volume.apply(self, args);
            }
          });

          return self;
        }

        // Set the group volume.
        if (typeof id === 'undefined') {
          self._volume = vol;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            sound._volume = vol;

            // Stop currently running fades.
            if (!args[2]) {
              self._stopFade(id[i]);
            }

            if (self._webAudio && sound._node && !sound._muted) {
              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
            } else if (sound._node && !sound._muted) {
              sound._node.volume = vol * Howler.volume();
            }

            self._emit('volume', sound._id);
          }
        }
      } else {
        sound = id ? self._soundById(id) : self._sounds[0];
        return sound ? sound._volume : 0;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
    fade: function(from, to, len, id) {
      var self = this;

      // If the sound hasn't loaded, add it to the load queue to fade when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'fade',
          action: function() {
            self.fade(from, to, len, id);
          }
        });

        return self;
      }

      // Make sure the to/from/len values are numbers.
      from = parseFloat(from);
      to = parseFloat(to);
      len = parseFloat(len);

      // Set the volume to the start position.
      self.volume(from, id);

      // Fade the volume of one or all sounds.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        // Get the sound.
        var sound = self._soundById(ids[i]);

        // Create a linear fade or fall back to timeouts with HTML5 Audio.
        if (sound) {
          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).
          if (!id) {
            self._stopFade(ids[i]);
          }

          // If we are using Web Audio, let the native methods do the actual fade.
          if (self._webAudio && !sound._muted) {
            var currentTime = Howler.ctx.currentTime;
            var end = currentTime + (len / 1000);
            sound._volume = from;
            sound._node.gain.setValueAtTime(from, currentTime);
            sound._node.gain.linearRampToValueAtTime(to, end);
          }

          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');
        }
      }

      return self;
    },

    /**
     * Starts the internal interval to fade a sound.
     * @param  {Object} sound Reference to sound to fade.
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id to fade.
     * @param  {Boolean} isGroup   If true, set the volume on the group.
     */
    _startFadeInterval: function(sound, from, to, len, id, isGroup) {
      var self = this;
      var vol = from;
      var diff = to - from;
      var steps = Math.abs(diff / 0.01);
      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);
      var lastTick = Date.now();

      // Store the value being faded to.
      sound._fadeTo = to;

      // Update the volume value on each interval tick.
      sound._interval = setInterval(function() {
        // Update the volume based on the time since the last tick.
        var tick = (Date.now() - lastTick) / len;
        lastTick = Date.now();
        vol += diff * tick;

        // Make sure the volume is in the right bounds.
        vol = Math.max(0, vol);
        vol = Math.min(1, vol);

        // Round to within 2 decimal points.
        vol = Math.round(vol * 100) / 100;

        // Change the volume.
        if (self._webAudio) {
          sound._volume = vol;
        } else {
          self.volume(vol, sound._id, true);
        }

        // Set the group's volume.
        if (isGroup) {
          self._volume = vol;
        }

        // When the fade is complete, stop it and fire event.
        if ((to < from && vol <= to) || (to > from && vol >= to)) {
          clearInterval(sound._interval);
          sound._interval = null;
          sound._fadeTo = null;
          self.volume(to, sound._id);
          self._emit('fade', sound._id);
        }
      }, stepLen);
    },

    /**
     * Internal method that stops the currently playing fade when
     * a new fade starts, volume is changed or the sound is stopped.
     * @param  {Number} id The sound id.
     * @return {Howl}
     */
    _stopFade: function(id) {
      var self = this;
      var sound = self._soundById(id);

      if (sound && sound._interval) {
        if (self._webAudio) {
          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
        }

        clearInterval(sound._interval);
        sound._interval = null;
        self.volume(sound._fadeTo, id);
        sound._fadeTo = null;
        self._emit('fade', id);
      }

      return self;
    },

    /**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
    loop: function() {
      var self = this;
      var args = arguments;
      var loop, id, sound;

      // Determine the values for loop and id.
      if (args.length === 0) {
        // Return the grou's loop value.
        return self._loop;
      } else if (args.length === 1) {
        if (typeof args[0] === 'boolean') {
          loop = args[0];
          self._loop = loop;
        } else {
          // Return this sound's loop value.
          sound = self._soundById(parseInt(args[0], 10));
          return sound ? sound._loop : false;
        }
      } else if (args.length === 2) {
        loop = args[0];
        id = parseInt(args[1], 10);
      }

      // If no id is passed, get all ID's to be looped.
      var ids = self._getSoundIds(id);
      for (var i=0; i<ids.length; i++) {
        sound = self._soundById(ids[i]);

        if (sound) {
          sound._loop = loop;
          if (self._webAudio && sound._node && sound._node.bufferSource) {
            sound._node.bufferSource.loop = loop;
            if (loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop;
            }
          }
        }
      }

      return self;
    },

    /**
     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   rate() -> Returns the first sound node's current playback rate.
     *   rate(id) -> Returns the sound id's current playback rate.
     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
     *   rate(rate, id) -> Sets the playback rate of passed sound id.
     * @return {Howl/Number} Returns self or the current playback rate.
     */
    rate: function() {
      var self = this;
      var args = arguments;
      var rate, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current rate of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new rate value.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else {
          rate = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        rate = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // Update the playback rate or return the current value.
      var sound;
      if (typeof rate === 'number') {
        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.
        if (self._state !== 'loaded' || self._playLock) {
          self._queue.push({
            event: 'rate',
            action: function() {
              self.rate.apply(self, args);
            }
          });

          return self;
        }

        // Set the group rate.
        if (typeof id === 'undefined') {
          self._rate = rate;
        }

        // Update one or all volumes.
        id = self._getSoundIds(id);
        for (var i=0; i<id.length; i++) {
          // Get the sound.
          sound = self._soundById(id[i]);

          if (sound) {
            // Keep track of our position when the rate changed and update the playback
            // start position so we can properly adjust the seek position for time elapsed.
            if (self.playing(id[i])) {
              sound._rateSeek = self.seek(id[i]);
              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
            }
            sound._rate = rate;

            // Change the playback rate.
            if (self._webAudio && sound._node && sound._node.bufferSource) {
              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
            } else if (sound._node) {
              sound._node.playbackRate = rate;
            }

            // Reset the timers.
            var seek = self.seek(id[i]);
            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;
            var timeout = (duration * 1000) / Math.abs(sound._rate);

            // Start a new end timer if sound is already playing.
            if (self._endTimers[id[i]] || !sound._paused) {
              self._clearTimer(id[i]);
              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
            }

            self._emit('rate', sound._id);
          }
        }
      } else {
        sound = self._soundById(id);
        return sound ? sound._rate : self._rate;
      }

      return self;
    },

    /**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
    seek: function() {
      var self = this;
      var args = arguments;
      var seek, id;

      // Determine the values based on arguments.
      if (args.length === 0) {
        // We will simply return the current position of the first node.
        id = self._sounds[0]._id;
      } else if (args.length === 1) {
        // First check if this is an ID, and if not, assume it is a new seek position.
        var ids = self._getSoundIds();
        var index = ids.indexOf(args[0]);
        if (index >= 0) {
          id = parseInt(args[0], 10);
        } else if (self._sounds.length) {
          id = self._sounds[0]._id;
          seek = parseFloat(args[0]);
        }
      } else if (args.length === 2) {
        seek = parseFloat(args[0]);
        id = parseInt(args[1], 10);
      }

      // If there is no ID, bail out.
      if (typeof id === 'undefined') {
        return self;
      }

      // If the sound hasn't loaded, add it to the load queue to seek when capable.
      if (self._state !== 'loaded' || self._playLock) {
        self._queue.push({
          event: 'seek',
          action: function() {
            self.seek.apply(self, args);
          }
        });

        return self;
      }

      // Get the sound.
      var sound = self._soundById(id);

      if (sound) {
        if (typeof seek === 'number' && seek >= 0) {
          // Pause the sound and update position for restarting playback.
          var playing = self.playing(id);
          if (playing) {
            self.pause(id, true);
          }

          // Move the position of the track and cancel timer.
          sound._seek = seek;
          sound._ended = false;
          self._clearTimer(id);

          // Update the seek position for HTML5 Audio.
          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {
            sound._node.currentTime = seek;
          }

          // Seek and emit when ready.
          var seekAndEmit = function() {
            self._emit('seek', id);

            // Restart the playback if the sound was playing.
            if (playing) {
              self.play(id, true);
            }
          };

          // Wait for the play lock to be unset before emitting (HTML5 Audio).
          if (playing && !self._webAudio) {
            var emitSeek = function() {
              if (!self._playLock) {
                seekAndEmit();
              } else {
                setTimeout(emitSeek, 0);
              }
            };
            setTimeout(emitSeek, 0);
          } else {
            seekAndEmit();
          }
        } else {
          if (self._webAudio) {
            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
          } else {
            return sound._node.currentTime;
          }
        }
      }

      return self;
    },

    /**
     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
     * @return {Boolean} True if playing and false if not.
     */
    playing: function(id) {
      var self = this;

      // Check the passed sound ID (if any).
      if (typeof id === 'number') {
        var sound = self._soundById(id);
        return sound ? !sound._paused : false;
      }

      // Otherwise, loop through all sounds and check if any are playing.
      for (var i=0; i<self._sounds.length; i++) {
        if (!self._sounds[i]._paused) {
          return true;
        }
      }

      return false;
    },

    /**
     * Get the duration of this sound. Passing a sound id will return the sprite duration.
     * @param  {Number} id The sound id to check. If none is passed, return full source duration.
     * @return {Number} Audio duration in seconds.
     */
    duration: function(id) {
      var self = this;
      var duration = self._duration;

      // If we pass an ID, get the sound and return the sprite length.
      var sound = self._soundById(id);
      if (sound) {
        duration = self._sprite[sound._sprite][1] / 1000;
      }

      return duration;
    },

    /**
     * Returns the current loaded state of this Howl.
     * @return {String} 'unloaded', 'loading', 'loaded'
     */
    state: function() {
      return this._state;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
    unload: function() {
      var self = this;

      // Stop playing any active sounds.
      var sounds = self._sounds;
      for (var i=0; i<sounds.length; i++) {
        // Stop the sound if it is currently playing.
        if (!sounds[i]._paused) {
          self.stop(sounds[i]._id);
        }

        // Remove the source or disconnect.
        if (!self._webAudio) {
          // Set the source to 0-second silence to stop any downloading (except in IE).
          self._clearSound(sounds[i]._node);

          // Remove any event listeners.
          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);
          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);

          // Release the Audio object back to the pool.
          Howler._releaseHtml5Audio(sounds[i]._node);
        }

        // Empty out all of the nodes.
        delete sounds[i]._node;

        // Make sure all timers are cleared out.
        self._clearTimer(sounds[i]._id);
      }

      // Remove the references in the global Howler object.
      var index = Howler._howls.indexOf(self);
      if (index >= 0) {
        Howler._howls.splice(index, 1);
      }

      // Delete this sound from the cache (if no other Howl is using it).
      var remCache = true;
      for (i=0; i<Howler._howls.length; i++) {
        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {
          remCache = false;
          break;
        }
      }

      if (cache && remCache) {
        delete cache[self._src];
      }

      // Clear global errors.
      Howler.noAudio = false;

      // Clear out `self`.
      self._state = 'unloaded';
      self._sounds = [];
      self = null;

      return null;
    },

    /**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
     * @return {Howl}
     */
    on: function(event, fn, id, once) {
      var self = this;
      var events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});
      }

      return self;
    },

    /**
     * Remove a custom event. Call without parameters to remove all events.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
    off: function(event, fn, id) {
      var self = this;
      var events = self['_on' + event];
      var i = 0;

      // Allow passing just an event and ID.
      if (typeof fn === 'number') {
        id = fn;
        fn = null;
      }

      if (fn || id) {
        // Loop through event store and remove the passed function.
        for (i=0; i<events.length; i++) {
          var isId = (id === events[i].id);
          if (fn === events[i].fn && isId || !fn && isId) {
            events.splice(i, 1);
            break;
          }
        }
      } else if (event) {
        // Clear out all events of this type.
        self['_on' + event] = [];
      } else {
        // Clear out all events of every type.
        var keys = Object.keys(self);
        for (i=0; i<keys.length; i++) {
          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {
            self[keys[i]] = [];
          }
        }
      }

      return self;
    },

    /**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
    once: function(event, fn, id) {
      var self = this;

      // Setup the event listener.
      self.on(event, fn, id, 1);

      return self;
    },

    /**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
    _emit: function(event, id, msg) {
      var self = this;
      var events = self['_on' + event];

      // Loop through event store and fire all functions.
      for (var i=events.length-1; i>=0; i--) {
        // Only fire the listener if the correct ID is used.
        if (!events[i].id || events[i].id === id || event === 'load') {
          setTimeout(function(fn) {
            fn.call(this, id, msg);
          }.bind(self, events[i].fn), 0);

          // If this event was setup with `once`, remove it.
          if (events[i].once) {
            self.off(event, events[i].fn, events[i].id);
          }
        }
      }

      // Pass the event type into load queue so that it can continue stepping.
      self._loadQueue(event);

      return self;
    },

    /**
     * Queue of actions initiated before the sound has loaded.
     * These will be called in sequence, with the next only firing
     * after the previous has finished executing (even if async like play).
     * @return {Howl}
     */
    _loadQueue: function(event) {
      var self = this;

      if (self._queue.length > 0) {
        var task = self._queue[0];

        // Remove this task if a matching event was passed.
        if (task.event === event) {
          self._queue.shift();
          self._loadQueue();
        }

        // Run the task if no event type is passed.
        if (!event) {
          task.action();
        }
      }

      return self;
    },

    /**
     * Fired when playback ends at the end of the duration.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _ended: function(sound) {
      var self = this;
      var sprite = sound._sprite;

      // If we are using IE and there was network latency we may be clipping
      // audio before it completes playing. Lets check the node to make sure it
      // believes it has completed, before ending the playback.
      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
        setTimeout(self._ended.bind(self, sound), 100);
        return self;
      }

      // Should this sound loop?
      var loop = !!(sound._loop || self._sprite[sprite][2]);

      // Fire the ended event.
      self._emit('end', sound._id);

      // Restart the playback for HTML5 Audio loop.
      if (!self._webAudio && loop) {
        self.stop(sound._id, true).play(sound._id);
      }

      // Restart this timer if on a Web Audio loop.
      if (self._webAudio && loop) {
        self._emit('play', sound._id);
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        sound._playStart = Howler.ctx.currentTime;

        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);
        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
      }

      // Mark the node as paused.
      if (self._webAudio && !loop) {
        sound._paused = true;
        sound._ended = true;
        sound._seek = sound._start || 0;
        sound._rateSeek = 0;
        self._clearTimer(sound._id);

        // Clean up the buffer source.
        self._cleanBuffer(sound._node);

        // Attempt to auto-suspend AudioContext if no sounds are still playing.
        Howler._autoSuspend();
      }

      // When using a sprite, end the track.
      if (!self._webAudio && !loop) {
        self.stop(sound._id, true);
      }

      return self;
    },

    /**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
    _clearTimer: function(id) {
      var self = this;

      if (self._endTimers[id]) {
        // Clear the timeout or remove the ended listener.
        if (typeof self._endTimers[id] !== 'function') {
          clearTimeout(self._endTimers[id]);
        } else {
          var sound = self._soundById(id);
          if (sound && sound._node) {
            sound._node.removeEventListener('ended', self._endTimers[id], false);
          }
        }

        delete self._endTimers[id];
      }

      return self;
    },

    /**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
    _soundById: function(id) {
      var self = this;

      // Loop through all sounds and find the one with this ID.
      for (var i=0; i<self._sounds.length; i++) {
        if (id === self._sounds[i]._id) {
          return self._sounds[i];
        }
      }

      return null;
    },

    /**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
    _inactiveSound: function() {
      var self = this;

      self._drain();

      // Find the first inactive node to recycle.
      for (var i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          return self._sounds[i].reset();
        }
      }

      // If no inactive node was found, create a new one.
      return new Sound(self);
    },

    /**
     * Drain excess inactive sounds from the pool.
     */
    _drain: function() {
      var self = this;
      var limit = self._pool;
      var cnt = 0;
      var i = 0;

      // If there are less sounds than the max pool size, we are done.
      if (self._sounds.length < limit) {
        return;
      }

      // Count the number of inactive sounds.
      for (i=0; i<self._sounds.length; i++) {
        if (self._sounds[i]._ended) {
          cnt++;
        }
      }

      // Remove excess inactive sounds, going in reverse order.
      for (i=self._sounds.length - 1; i>=0; i--) {
        if (cnt <= limit) {
          return;
        }

        if (self._sounds[i]._ended) {
          // Disconnect the audio source when using Web Audio.
          if (self._webAudio && self._sounds[i]._node) {
            self._sounds[i]._node.disconnect(0);
          }

          // Remove sounds until we have the pool size.
          self._sounds.splice(i, 1);
          cnt--;
        }
      }
    },

    /**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
    _getSoundIds: function(id) {
      var self = this;

      if (typeof id === 'undefined') {
        var ids = [];
        for (var i=0; i<self._sounds.length; i++) {
          ids.push(self._sounds[i]._id);
        }

        return ids;
      } else {
        return [id];
      }
    },

    /**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
    _refreshBuffer: function(sound) {
      var self = this;

      // Setup the buffer source for playback.
      sound._node.bufferSource = Howler.ctx.createBufferSource();
      sound._node.bufferSource.buffer = cache[self._src];

      // Connect to the correct node.
      if (sound._panner) {
        sound._node.bufferSource.connect(sound._panner);
      } else {
        sound._node.bufferSource.connect(sound._node);
      }

      // Setup looping and playback rate.
      sound._node.bufferSource.loop = sound._loop;
      if (sound._loop) {
        sound._node.bufferSource.loopStart = sound._start || 0;
        sound._node.bufferSource.loopEnd = sound._stop || 0;
      }
      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);

      return self;
    },

    /**
     * Prevent memory leaks by cleaning up the buffer source after playback.
     * @param  {Object} node Sound's audio node containing the buffer source.
     * @return {Howl}
     */
    _cleanBuffer: function(node) {
      var self = this;
      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;

      if (Howler._scratchBuffer && node.bufferSource) {
        node.bufferSource.onended = null;
        node.bufferSource.disconnect(0);
        if (isIOS) {
          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}
        }
      }
      node.bufferSource = null;

      return self;
    },

    /**
     * Set the source to a 0-second silence to stop any downloading (except in IE).
     * @param  {Object} node Audio node to clear.
     */
    _clearSound: function(node) {
      var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
      if (!checkIE) {
        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';
      }
    }
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
  var Sound = function(howl) {
    this._parent = howl;
    this.init();
  };
  Sound.prototype = {
    /**
     * Initialize a new Sound object.
     * @return {Sound}
     */
    init: function() {
      var self = this;
      var parent = self._parent;

      // Setup the default parameters.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a unique ID for this sound.
      self._id = ++Howler._counter;

      // Add itself to the parent's pool.
      parent._sounds.push(self);

      // Create the new node.
      self.create();

      return self;
    },

    /**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
    create: function() {
      var self = this;
      var parent = self._parent;
      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;

      if (parent._webAudio) {
        // Create the gain node for controlling volume (the source will connect to this).
        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
        self._node.paused = true;
        self._node.connect(Howler.masterGain);
      } else {
        // Get an unlocked Audio object from the pool.
        self._node = Howler._obtainHtml5Audio();

        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
        self._errorFn = self._errorListener.bind(self);
        self._node.addEventListener('error', self._errorFn, false);

        // Listen for 'canplaythrough' event to let us know the sound is ready.
        self._loadFn = self._loadListener.bind(self);
        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);

        // Setup the new audio node.
        self._node.src = parent._src;
        self._node.preload = 'auto';
        self._node.volume = volume * Howler.volume();

        // Begin loading the source.
        self._node.load();
      }

      return self;
    },

    /**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
    reset: function() {
      var self = this;
      var parent = self._parent;

      // Reset all of the parameters of this sound.
      self._muted = parent._muted;
      self._loop = parent._loop;
      self._volume = parent._volume;
      self._rate = parent._rate;
      self._seek = 0;
      self._rateSeek = 0;
      self._paused = true;
      self._ended = true;
      self._sprite = '__default';

      // Generate a new ID so that it isn't confused with the previous sound.
      self._id = ++Howler._counter;

      return self;
    },

    /**
     * HTML5 Audio error listener callback.
     */
    _errorListener: function() {
      var self = this;

      // Fire an error event and pass back the code.
      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);

      // Clear the event listener.
      self._node.removeEventListener('error', self._errorFn, false);
    },

    /**
     * HTML5 Audio canplaythrough listener callback.
     */
    _loadListener: function() {
      var self = this;
      var parent = self._parent;

      // Round up the duration to account for the lower precision in HTML5 Audio.
      parent._duration = Math.ceil(self._node.duration * 10) / 10;

      // Setup a sprite if none is defined.
      if (Object.keys(parent._sprite).length === 0) {
        parent._sprite = {__default: [0, parent._duration * 1000]};
      }

      if (parent._state !== 'loaded') {
        parent._state = 'loaded';
        parent._emit('load');
        parent._loadQueue();
      }

      // Clear the event listener.
      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
    }
  };

  /** Helper Methods **/
  /***************************************************************************/

  var cache = {};

  /**
   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).
   * @param  {Howl} self
   */
  var loadBuffer = function(self) {
    var url = self._src;

    // Check if the buffer has already been cached and use it instead.
    if (cache[url]) {
      // Set the duration from the cache.
      self._duration = cache[url].duration;

      // Load the sound into this Howl.
      loadSound(self);

      return;
    }

    if (/^data:[^;]+;base64,/.test(url)) {
      // Decode the base64 data URI without XHR, since some browsers don't support it.
      var data = atob(url.split(',')[1]);
      var dataView = new Uint8Array(data.length);
      for (var i=0; i<data.length; ++i) {
        dataView[i] = data.charCodeAt(i);
      }

      decodeAudioData(dataView.buffer, self);
    } else {
      // Load the buffer from the URL.
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.withCredentials = self._xhrWithCredentials;
      xhr.responseType = 'arraybuffer';
      xhr.onload = function() {
        // Make sure we get a successful response back.
        var code = (xhr.status + '')[0];
        if (code !== '0' && code !== '2' && code !== '3') {
          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');
          return;
        }

        decodeAudioData(xhr.response, self);
      };
      xhr.onerror = function() {
        // If there is an error, switch to HTML5 Audio.
        if (self._webAudio) {
          self._html5 = true;
          self._webAudio = false;
          self._sounds = [];
          delete cache[url];
          self.load();
        }
      };
      safeXhrSend(xhr);
    }
  };

  /**
   * Send the XHR request wrapped in a try/catch.
   * @param  {Object} xhr XHR to send.
   */
  var safeXhrSend = function(xhr) {
    try {
      xhr.send();
    } catch (e) {
      xhr.onerror();
    }
  };

  /**
   * Decode audio data from an array buffer.
   * @param  {ArrayBuffer} arraybuffer The audio data.
   * @param  {Howl}        self
   */
  var decodeAudioData = function(arraybuffer, self) {
    // Fire a load error if something broke.
    var error = function() {
      self._emit('loaderror', null, 'Decoding audio data failed.');
    };

    // Load the sound on success.
    var success = function(buffer) {
      if (buffer && self._sounds.length > 0) {
        cache[self._src] = buffer;
        loadSound(self, buffer);
      } else {
        error();
      }
    };

    // Decode the buffer into an audio source.
    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {
      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
    } else {
      Howler.ctx.decodeAudioData(arraybuffer, success, error);
    }
  }

  /**
   * Sound is now loaded, so finish setting everything up and fire the loaded event.
   * @param  {Howl} self
   * @param  {Object} buffer The decoded buffer sound source.
   */
  var loadSound = function(self, buffer) {
    // Set the duration.
    if (buffer && !self._duration) {
      self._duration = buffer.duration;
    }

    // Setup a sprite if none is defined.
    if (Object.keys(self._sprite).length === 0) {
      self._sprite = {__default: [0, self._duration * 1000]};
    }

    // Fire the loaded event.
    if (self._state !== 'loaded') {
      self._state = 'loaded';
      self._emit('load');
      self._loadQueue();
    }
  };

  /**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
  var setupAudioContext = function() {
    // If we have already detected that Web Audio isn't supported, don't run this step again.
    if (!Howler.usingWebAudio) {
      return;
    }

    // Check if we are using Web Audio and setup the AudioContext if we are.
    try {
      if (typeof AudioContext !== 'undefined') {
        Howler.ctx = new AudioContext();
      } else if (typeof webkitAudioContext !== 'undefined') {
        Howler.ctx = new webkitAudioContext();
      } else {
        Howler.usingWebAudio = false;
      }
    } catch(e) {
      Howler.usingWebAudio = false;
    }

    // If the audio context creation still failed, set using web audio to false.
    if (!Howler.ctx) {
      Howler.usingWebAudio = false;
    }

    // Check if a webview is being used on iOS8 or earlier (rather than the browser).
    // If it is, disable Web Audio as it causes crashing.
    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));
    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = appVersion ? parseInt(appVersion[1], 10) : null;
    if (iOS && version && version < 9) {
      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {
        Howler.usingWebAudio = false;
      }
    }

    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).
    if (Howler.usingWebAudio) {
      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
      Howler.masterGain.connect(Howler.ctx.destination);
    }

    // Re-run the setup on Howler.
    Howler._setup();
  };

  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
  if (typeof define === 'function' && define.amd) {
    define([], function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  // Add support for CommonJS libraries such as browserify.
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // Define globally in case AMD is not available or unused.
  if (typeof window !== 'undefined') {
    window.HowlerGlobal = HowlerGlobal;
    window.Howler = Howler;
    window.Howl = Howl;
    window.Sound = Sound;
  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).
    global.HowlerGlobal = HowlerGlobal;
    global.Howler = Howler;
    global.Howl = Howl;
    global.Sound = Sound;
  }
})();


/*!
 *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
 *  
 *  howler.js v2.1.2
 *  howlerjs.com
 *
 *  (c) 2013-2019, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {

  'use strict';

  // Setup default properties.
  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];

  /** Global Methods **/
  /***************************************************************************/

  /**
   * Helper method to update the stereo panning position of all current Howls.
   * Future Howls will not use this value unless explicitly set.
   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.
   * @return {Howler/Number}     Self or current stereo panning value.
   */
  HowlerGlobal.prototype.stereo = function(pan) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Loop through all Howls and update their stereo panning.
    for (var i=self._howls.length-1; i>=0; i--) {
      self._howls[i].stereo(pan);
    }

    return self;
  };

  /**
   * Get/set the position of the listener in 3D cartesian space. Sounds using
   * 3D position will be relative to the listener's position.
   * @param  {Number} x The x-position of the listener.
   * @param  {Number} y The y-position of the listener.
   * @param  {Number} z The z-position of the listener.
   * @return {Howler/Array}   Self or current listener position.
   */
  HowlerGlobal.prototype.pos = function(x, y, z) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._pos[1] : y;
    z = (typeof z !== 'number') ? self._pos[2] : z;

    if (typeof x === 'number') {
      self._pos = [x, y, z];

      if (typeof self.ctx.listener.positionX !== 'undefined') {
        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);
        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
      }
    } else {
      return self._pos;
    }

    return self;
  };

  /**
   * Get/set the direction the listener is pointing in the 3D cartesian space.
   * A front and up vector must be provided. The front is the direction the
   * face of the listener is pointing, and up is the direction the top of the
   * listener is pointing. Thus, these values are expected to be at right angles
   * from each other.
   * @param  {Number} x   The x-orientation of the listener.
   * @param  {Number} y   The y-orientation of the listener.
   * @param  {Number} z   The z-orientation of the listener.
   * @param  {Number} xUp The x-orientation of the top of the listener.
   * @param  {Number} yUp The y-orientation of the top of the listener.
   * @param  {Number} zUp The z-orientation of the top of the listener.
   * @return {Howler/Array}     Returns self or the current orientation vectors.
   */
  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self.ctx || !self.ctx.listener) {
      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    var or = self._orientation;
    y = (typeof y !== 'number') ? or[1] : y;
    z = (typeof z !== 'number') ? or[2] : z;
    xUp = (typeof xUp !== 'number') ? or[3] : xUp;
    yUp = (typeof yUp !== 'number') ? or[4] : yUp;
    zUp = (typeof zUp !== 'number') ? or[5] : zUp;

    if (typeof x === 'number') {
      self._orientation = [x, y, z, xUp, yUp, zUp];

      if (typeof self.ctx.listener.forwardX !== 'undefined') {
        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
        self.ctx.listener.upZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
      } else {
        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
      }
    } else {
      return or;
    }

    return self;
  };

  /** Group Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core init.
   * @param  {Function} _super Core init method.
   * @return {Howl}
   */
  Howl.prototype.init = (function(_super) {
    return function(o) {
      var self = this;

      // Setup user-defined default properties.
      self._orientation = o.orientation || [1, 0, 0];
      self._stereo = o.stereo || null;
      self._pos = o.pos || null;
      self._pannerAttr = {
        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,
        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,
        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,
        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',
        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,
        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',
        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,
        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1
      };

      // Setup event listeners.
      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];
      self._onpos = o.onpos ? [{fn: o.onpos}] : [];
      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];

      // Complete initilization with howler.js core's init function.
      return _super.call(this, o);
    };
  })(Howl.prototype.init);

  /**
   * Get/set the stereo panning of the audio source for this sound or all in the group.
   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Number}    Returns self or the current stereo panning value.
   */
  Howl.prototype.stereo = function(pan, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'stereo',
        action: function() {
          self.stereo(pan, id);
        }
      });

      return self;
    }

    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.
    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';

    // Setup the group's stereo panning if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's stereo panning if no parameters are passed.
      if (typeof pan === 'number') {
        self._stereo = pan;
        self._pos = [pan, 0, 0];
      } else {
        return self._stereo;
      }
    }

    // Change the streo panning of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof pan === 'number') {
          sound._stereo = pan;
          sound._pos = [pan, 0, 0];

          if (sound._node) {
            // If we are falling back, make sure the panningModel is equalpower.
            sound._pannerAttr.panningModel = 'equalpower';

            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || !sound._panner.pan) {
              setupPanner(sound, pannerType);
            }

            if (pannerType === 'spatial') {
              if (typeof sound._panner.positionX !== 'undefined') {
                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
              } else {
                sound._panner.setPosition(pan, 0, 0);
              }
            } else {
              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
            }
          }

          self._emit('stereo', sound._id);
        } else {
          return sound._stereo;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.
   * @param  {Number} x  The x-position of the audio source.
   * @param  {Number} y  The y-position of the audio source.
   * @param  {Number} z  The z-position of the audio source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].
   */
  Howl.prototype.pos = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change position when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'pos',
        action: function() {
          self.pos(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? 0 : y;
    z = (typeof z !== 'number') ? -0.5 : z;

    // Setup the group's spatial position if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial position if no parameters are passed.
      if (typeof x === 'number') {
        self._pos = [x, y, z];
      } else {
        return self._pos;
      }
    }

    // Change the spatial position of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._pos = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner || sound._panner.pan) {
              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.positionX !== 'undefined') {
              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setPosition(x, y, z);
            }
          }

          self._emit('pos', sound._id);
        } else {
          return sound._pos;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate
   * space. Depending on how direction the sound is, based on the `cone` attributes,
   * a sound pointing away from the listener can be quiet or silent.
   * @param  {Number} x  The x-orientation of the source.
   * @param  {Number} y  The y-orientation of the source.
   * @param  {Number} z  The z-orientation of the source.
   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.
   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].
   */
  Howl.prototype.orientation = function(x, y, z, id) {
    var self = this;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.
    if (self._state !== 'loaded') {
      self._queue.push({
        event: 'orientation',
        action: function() {
          self.orientation(x, y, z, id);
        }
      });

      return self;
    }

    // Set the defaults for optional 'y' & 'z'.
    y = (typeof y !== 'number') ? self._orientation[1] : y;
    z = (typeof z !== 'number') ? self._orientation[2] : z;

    // Setup the group's spatial orientation if no ID is passed.
    if (typeof id === 'undefined') {
      // Return the group's spatial orientation if no parameters are passed.
      if (typeof x === 'number') {
        self._orientation = [x, y, z];
      } else {
        return self._orientation;
      }
    }

    // Change the spatial orientation of one or all sounds in group.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      // Get the sound.
      var sound = self._soundById(ids[i]);

      if (sound) {
        if (typeof x === 'number') {
          sound._orientation = [x, y, z];

          if (sound._node) {
            // Check if there is a panner setup and create a new one if not.
            if (!sound._panner) {
              // Make sure we have a position to setup the node with.
              if (!sound._pos) {
                sound._pos = self._pos || [0, 0, -0.5];
              }

              setupPanner(sound, 'spatial');
            }

            if (typeof sound._panner.orientationX !== 'undefined') {
              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(x, y, z);
            }
          }

          self._emit('orientation', sound._id);
        } else {
          return sound._orientation;
        }
      }
    }

    return self;
  };

  /**
   * Get/set the panner node's attributes for a sound or group of sounds.
   * This method can optionall take 0, 1 or 2 arguments.
   *   pannerAttr() -> Returns the group's values.
   *   pannerAttr(id) -> Returns the sound id's values.
   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.
   *   pannerAttr(o, id) -> Set's the values of passed sound id.
   *
   *   Attributes:
   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      inside of which there will be no volume reduction.
   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,
   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.
   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the
   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.
   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from
   *                     listener. Can be `linear`, `inverse` or `exponential.
   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume
   *                   will not be reduced any further.
   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.
   *                   This is simply a variable of the distance model and has a different effect depending on which model
   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.
   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a
   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`
   *                     with `inverse` and `exponential`.
   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.
   *                     Can be `HRTF` or `equalpower`.
   *
   * @return {Howl/Object} Returns self or current panner attributes.
   */
  Howl.prototype.pannerAttr = function() {
    var self = this;
    var args = arguments;
    var o, id, sound;

    // Stop right here if not using Web Audio.
    if (!self._webAudio) {
      return self;
    }

    // Determine the values based on arguments.
    if (args.length === 0) {
      // Return the group's panner attribute values.
      return self._pannerAttr;
    } else if (args.length === 1) {
      if (typeof args[0] === 'object') {
        o = args[0];

        // Set the grou's panner attribute values.
        if (typeof id === 'undefined') {
          if (!o.pannerAttr) {
            o.pannerAttr = {
              coneInnerAngle: o.coneInnerAngle,
              coneOuterAngle: o.coneOuterAngle,
              coneOuterGain: o.coneOuterGain,
              distanceModel: o.distanceModel,
              maxDistance: o.maxDistance,
              refDistance: o.refDistance,
              rolloffFactor: o.rolloffFactor,
              panningModel: o.panningModel
            };
          }

          self._pannerAttr = {
            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,
            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,
            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,
            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel
          };
        }
      } else {
        // Return this sound's panner attribute values.
        sound = self._soundById(parseInt(args[0], 10));
        return sound ? sound._pannerAttr : self._pannerAttr;
      }
    } else if (args.length === 2) {
      o = args[0];
      id = parseInt(args[1], 10);
    }

    // Update the values of the specified sounds.
    var ids = self._getSoundIds(id);
    for (var i=0; i<ids.length; i++) {
      sound = self._soundById(ids[i]);

      if (sound) {
        // Merge the new values into the sound.
        var pa = sound._pannerAttr;
        pa = {
          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,
          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,
          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,
          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,
          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,
          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,
          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,
          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel
        };

        // Update the panner values or create a new panner if none exists.
        var panner = sound._panner;
        if (panner) {
          panner.coneInnerAngle = pa.coneInnerAngle;
          panner.coneOuterAngle = pa.coneOuterAngle;
          panner.coneOuterGain = pa.coneOuterGain;
          panner.distanceModel = pa.distanceModel;
          panner.maxDistance = pa.maxDistance;
          panner.refDistance = pa.refDistance;
          panner.rolloffFactor = pa.rolloffFactor;
          panner.panningModel = pa.panningModel;
        } else {
          // Make sure we have a position to setup the node with.
          if (!sound._pos) {
            sound._pos = self._pos || [0, 0, -0.5];
          }

          // Create a new panner node.
          setupPanner(sound, 'spatial');
        }
      }
    }

    return self;
  };

  /** Single Sound Methods **/
  /***************************************************************************/

  /**
   * Add new properties to the core Sound init.
   * @param  {Function} _super Core Sound init method.
   * @return {Sound}
   */
  Sound.prototype.init = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Setup user-defined default properties.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // Complete initilization with howler.js core Sound's init function.
      _super.call(this);

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      }
    };
  })(Sound.prototype.init);

  /**
   * Override the Sound.reset method to clean up properties from the spatial plugin.
   * @param  {Function} _super Sound reset method.
   * @return {Sound}
   */
  Sound.prototype.reset = (function(_super) {
    return function() {
      var self = this;
      var parent = self._parent;

      // Reset all spatial plugin properties on this sound.
      self._orientation = parent._orientation;
      self._stereo = parent._stereo;
      self._pos = parent._pos;
      self._pannerAttr = parent._pannerAttr;

      // If a stereo or position was specified, set it up.
      if (self._stereo) {
        parent.stereo(self._stereo);
      } else if (self._pos) {
        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
      } else if (self._panner) {
        // Disconnect the panner.
        self._panner.disconnect(0);
        self._panner = undefined;
        parent._refreshBuffer(self);
      }

      // Complete resetting of the sound.
      return _super.call(this);
    };
  })(Sound.prototype.reset);

  /** Helper Methods **/
  /***************************************************************************/

  /**
   * Create a new panner node and save it on the sound.
   * @param  {Sound} sound Specific sound to setup panning on.
   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.
   */
  var setupPanner = function(sound, type) {
    type = type || 'spatial';

    // Create the new panner node.
    if (type === 'spatial') {
      sound._panner = Howler.ctx.createPanner();
      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
      sound._panner.distanceModel = sound._pannerAttr.distanceModel;
      sound._panner.maxDistance = sound._pannerAttr.maxDistance;
      sound._panner.refDistance = sound._pannerAttr.refDistance;
      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
      sound._panner.panningModel = sound._pannerAttr.panningModel;

      if (typeof sound._panner.positionX !== 'undefined') {
        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
      }

      if (typeof sound._panner.orientationX !== 'undefined') {
        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
      } else {
        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
      }
    } else {
      sound._panner = Howler.ctx.createStereoPanner();
      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
    }

    sound._panner.connect(sound._node);

    // Update the connections.
    if (!sound._paused) {
      sound._parent.pause(sound._id, true).play(sound._id, true);
    }
  };
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
var tsPolyfill = (function () {
	'use strict';

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _library = false;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode: 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');

	var TO_STRING = 'toString';
	var TPL = ('' + _functionToString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return _functionToString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) _redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) _hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var toString = {}.toString;

	var _cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var SPECIES = _wks('species');

	var _arraySpeciesConstructor = function (original) {
	  var C;
	  if (_isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
	    if (_isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


	var _arraySpeciesCreate = function (original, length) {
	  return new (_arraySpeciesConstructor(original))(length);
	};

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex





	var _arrayMethods = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || _arraySpeciesCreate;
	  return function ($this, callbackfn, that) {
	    var O = _toObject($this);
	    var self = _iobject(O);
	    var f = _ctx(callbackfn, that, 3);
	    var length = _toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = _wks('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});
	var _addToUnscopables = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};

	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

	var $find = _arrayMethods(5);
	var KEY = 'find';
	var forced = true;
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () { forced = false; });
	_export(_export.P + _export.F * forced, 'Array', {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY);

	var find = _core.Array.find;

	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

	var $find$1 = _arrayMethods(6);
	var KEY$1 = 'findIndex';
	var forced$1 = true;
	// Shouldn't skip holes
	if (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });
	_export(_export.P + _export.F * forced$1, 'Array', {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	_addToUnscopables(KEY$1);

	var findIndex = _core.Array.findIndex;

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	var _arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = _toObject(this);
	  var length = _toLength(O.length);
	  var aLen = arguments.length;
	  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


	_export(_export.P, 'Array', { fill: _arrayFill });

	_addToUnscopables('fill');

	var fill = _core.Array.fill;

	var _arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = _toObject(this);
	  var len = _toLength(O.length);
	  var to = _toAbsoluteIndex(target, len);
	  var from = _toAbsoluteIndex(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


	_export(_export.P, 'Array', { copyWithin: _arrayCopyWithin });

	_addToUnscopables('copyWithin');

	var copyWithin = _core.Array.copyWithin;

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _iterators = {};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var ObjectProto = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto$1 = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto$1[ITERATOR$1] === it);
	};

	var _createProperty = function (object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
	  else object[index] = value;
	};

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || _iterators[_classof(it)];
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) { }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	var from_1 = _core.Array.from;

	// WebKit Array.of isn't generic
	_export(_export.S + _export.F * _fails(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	}), 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */) {
	    var index = 0;
	    var aLen = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(aLen);
	    while (aLen > index) _createProperty(result, index, arguments[index++]);
	    result.length = aLen;
	    return result;
	  }
	});

	var of = _core.Array.of;

	var dP$1 = _objectDp.f;
	var FProto = Function.prototype;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// 19.2.4.2 name
	NAME in FProto || _descriptors && dP$1(FProto, NAME, {
	  configurable: true,
	  get: function () {
	    try {
	      return ('' + this).match(nameRE)[1];
	    } catch (e) {
	      return '';
	    }
	  }
	});

	// 20.2.2.11 Math.clz32(x)


	_export(_export.S, 'Math', {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
	  }
	});

	var clz32 = _core.Math.clz32;

	// 20.2.2.18 Math.imul(x, y)

	var $imul = Math.imul;

	// some WebKit versions fails with big numbers, some has wrong arity
	_export(_export.S + _export.F * _fails(function () {
	  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
	}), 'Math', {
	  imul: function imul(x, y) {
	    var UINT16 = 0xffff;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	var imul = _core.Math.imul;

	// 20.2.2.28 Math.sign(x)
	var _mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	// 20.2.2.28 Math.sign(x)


	_export(_export.S, 'Math', { sign: _mathSign });

	var sign = _core.Math.sign;

	// 20.2.2.21 Math.log10(x)


	_export(_export.S, 'Math', {
	  log10: function log10(x) {
	    return Math.log(x) * Math.LOG10E;
	  }
	});

	var log10 = _core.Math.log10;

	// 20.2.2.22 Math.log2(x)


	_export(_export.S, 'Math', {
	  log2: function log2(x) {
	    return Math.log(x) / Math.LN2;
	  }
	});

	var log2 = _core.Math.log2;

	// 20.2.2.20 Math.log1p(x)
	var _mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
	};

	// 20.2.2.20 Math.log1p(x)


	_export(_export.S, 'Math', { log1p: _mathLog1p });

	var log1p = _core.Math.log1p;

	// 20.2.2.14 Math.expm1(x)
	var $expm1 = Math.expm1;
	var _mathExpm1 = (!$expm1
	  // Old FF bug
	  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || $expm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
	} : $expm1;

	// 20.2.2.14 Math.expm1(x)



	_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

	var expm1 = _core.Math.expm1;

	// 20.2.2.12 Math.cosh(x)

	var exp = Math.exp;

	_export(_export.S, 'Math', {
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  }
	});

	var cosh = _core.Math.cosh;

	// 20.2.2.30 Math.sinh(x)


	var exp$1 = Math.exp;

	// V8 near Chromium 38 has a problem with very small numbers
	_export(_export.S + _export.F * _fails(function () {
	  return !Math.sinh(-2e-17) != -2e-17;
	}), 'Math', {
	  sinh: function sinh(x) {
	    return Math.abs(x = +x) < 1
	      ? (_mathExpm1(x) - _mathExpm1(-x)) / 2
	      : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
	  }
	});

	var sinh = _core.Math.sinh;

	// 20.2.2.33 Math.tanh(x)


	var exp$2 = Math.exp;

	_export(_export.S, 'Math', {
	  tanh: function tanh(x) {
	    var a = _mathExpm1(x = +x);
	    var b = _mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	var tanh = _core.Math.tanh;

	// 20.2.2.3 Math.acosh(x)


	var sqrt = Math.sqrt;
	var $acosh = Math.acosh;

	_export(_export.S + _export.F * !($acosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  && Math.floor($acosh(Number.MAX_VALUE)) == 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  && $acosh(Infinity) == Infinity
	), 'Math', {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? Math.log(x) + Math.LN2
	      : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	var acosh = _core.Math.acosh;

	// 20.2.2.5 Math.asinh(x)

	var $asinh = Math.asinh;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
	}

	// Tor Browser bug: Math.asinh(0) -> -0
	_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

	var asinh$1 = _core.Math.asinh;

	// 20.2.2.7 Math.atanh(x)

	var $atanh = Math.atanh;

	// Tor Browser bug: Math.atanh(-0) -> 0
	_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
	  }
	});

	var atanh = _core.Math.atanh;

	// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

	var abs = Math.abs;

	_export(_export.S, 'Math', {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
	  }
	});

	var hypot = _core.Math.hypot;

	// 20.2.2.34 Math.trunc(x)


	_export(_export.S, 'Math', {
	  trunc: function trunc(it) {
	    return (it > 0 ? Math.floor : Math.ceil)(it);
	  }
	});

	var trunc = _core.Math.trunc;

	// 20.2.2.16 Math.fround(x)

	var pow = Math.pow;
	var EPSILON = pow(2, -52);
	var EPSILON32 = pow(2, -23);
	var MAX32 = pow(2, 127) * (2 - EPSILON32);
	var MIN32 = pow(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	var _mathFround = Math.fround || function fround(x) {
	  var $abs = Math.abs(x);
	  var $sign = _mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// 20.2.2.16 Math.fround(x)


	_export(_export.S, 'Math', { fround: _mathFround });

	var fround = _core.Math.fround;

	// 20.2.2.9 Math.cbrt(x)



	_export(_export.S, 'Math', {
	  cbrt: function cbrt(x) {
	    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
	  }
	});

	var cbrt = _core.Math.cbrt;

	// 20.1.2.1 Number.EPSILON


	_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

	// 20.1.2.2 Number.isFinite(number)

	var _isFinite = _global.isFinite;

	_export(_export.S, 'Number', {
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

	var _isFinite$1 = _core.Number.isFinite;

	// 20.1.2.3 Number.isInteger(number)

	var floor$1 = Math.floor;
	var _isInteger = function isInteger(it) {
	  return !_isObject(it) && isFinite(it) && floor$1(it) === it;
	};

	// 20.1.2.3 Number.isInteger(number)


	_export(_export.S, 'Number', { isInteger: _isInteger });

	var isInteger = _core.Number.isInteger;

	// 20.1.2.4 Number.isNaN(number)


	_export(_export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	var isNan = _core.Number.isNaN;

	// 20.1.2.5 Number.isSafeInteger(number)


	var abs$1 = Math.abs;

	_export(_export.S, 'Number', {
	  isSafeInteger: function isSafeInteger(number) {
	    return _isInteger(number) && abs$1(number) <= 0x1fffffffffffff;
	  }
	});

	var isSafeInteger = _core.Number.isSafeInteger;

	// 20.1.2.6 Number.MAX_SAFE_INTEGER


	_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

	// 20.1.2.10 Number.MIN_SAFE_INTEGER


	_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

	var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var space = '[' + _stringWs + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');

	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = _fails(function () {
	    return !!_stringWs[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  _export(_export.P + _export.F * FORCE, 'String', exp);
	};

	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(_defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};

	var _stringTrim = exporter;

	var $parseFloat = _global.parseFloat;
	var $trim = _stringTrim.trim;

	var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// 18.2.4 parseFloat(string)
	_export(_export.G + _export.F * (parseFloat != _parseFloat), { parseFloat: _parseFloat });

	var _parseFloat$1 = _core.parseFloat;

	var $parseInt = _global.parseInt;
	var $trim$1 = _stringTrim.trim;

	var hex = /^[-+]?0[xX]/;

	var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim$1(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;

	// 18.2.5 parseInt(string, radix)
	_export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

	var _parseInt$1 = _core.parseInt;

	var f$1 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$1
	};

	var f$2 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$2
	};

	// 19.1.2.1 Object.assign(target, source, ...)





	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	var assign = _core.Object.assign;

	// 7.2.9 SameValue(x, y)
	var _sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// 19.1.3.10 Object.is(value1, value2)

	_export(_export.S, 'Object', { is: _sameValue });

	var is$1 = _core.Object.is;

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$3 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$3
	};

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	var setPrototypeOf = _core.Object.setPrototypeOf;

	// 21.2.5.3 get RegExp.prototype.flags

	var _flags = function () {
	  var that = _anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// 21.2.5.3 get RegExp.prototype.flags()
	if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: _flags
	});

	var setPrototypeOf$1 = _setProto.set;
	var _inheritIfRequired = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf$1) {
	    setPrototypeOf$1(that, P);
	  } return that;
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$4
	};

	// 7.2.8 IsRegExp(argument)


	var MATCH = _wks('match');
	var _isRegexp = function (it) {
	  var isRegExp;
	  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
	};

	var SPECIES$1 = _wks('species');

	var _setSpecies = function (KEY) {
	  var C = _global[KEY];
	  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	var dP$2 = _objectDp.f;
	var gOPN = _objectGopn.f;


	var $RegExp = _global.RegExp;
	var Base = $RegExp;
	var proto = $RegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;
	// "new" creates a new object, old webkit buggy here
	var CORRECT_NEW = new $RegExp(re1) !== re1;

	if (_descriptors && (!CORRECT_NEW || _fails(function () {
	  re2[_wks('match')] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
	}))) {
	  $RegExp = function RegExp(p, f) {
	    var tiRE = this instanceof $RegExp;
	    var piRE = _isRegexp(p);
	    var fiU = f === undefined;
	    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
	      : _inheritIfRequired(CORRECT_NEW
	        ? new Base(piRE && !fiU ? p.source : p, f)
	        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f)
	      , tiRE ? this : proto, $RegExp);
	  };
	  var proxy = function (key) {
	    key in $RegExp || dP$2($RegExp, key, {
	      configurable: true,
	      get: function () { return Base[key]; },
	      set: function (it) { Base[key] = it; }
	    });
	  };
	  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
	  proto.constructor = $RegExp;
	  $RegExp.prototype = proto;
	  _redefine(_global, 'RegExp', $RegExp);
	}

	_setSpecies('RegExp');

	var $at$1 = _stringAt(false);
	_export(_export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at$1(this, pos);
	  }
	});

	var codePointAt = _core.String.codePointAt;

	// helper for String#{startsWith, endsWith, includes}



	var _stringContext = function (that, searchString, NAME) {
	  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(_defined(that));
	};

	var MATCH$1 = _wks('match');
	var _failsIsRegexp = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH$1] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};

	var INCLUDES = 'includes';

	_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~_stringContext(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes = _core.String.includes;

	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = _stringContext(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = _toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

	var endsWith = _core.String.endsWith;

	var _stringRepeat = function repeat(count) {
	  var str = String(_defined(this));
	  var res = '';
	  var n = _toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};

	_export(_export.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: _stringRepeat
	});

	var repeat = _core.String.repeat;

	var STARTS_WITH = 'startsWith';
	var $startsWith = ''[STARTS_WITH];

	_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = _stringContext(this, searchString, STARTS_WITH);
	    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return $startsWith
	      ? $startsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	var startsWith = _core.String.startsWith;

	var quot = /"/g;
	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	var createHTML = function (string, tag, attribute, value) {
	  var S = String(_defined(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};
	var _stringHtml = function (NAME, exec) {
	  var O = {};
	  O[NAME] = exec(createHTML);
	  _export(_export.P + _export.F * _fails(function () {
	    var test = ''[NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  }), 'String', O);
	};

	// B.2.3.2 String.prototype.anchor(name)
	_stringHtml('anchor', function (createHTML) {
	  return function anchor(name) {
	    return createHTML(this, 'a', 'name', name);
	  };
	});

	var anchor = _core.String.anchor;

	// B.2.3.3 String.prototype.big()
	_stringHtml('big', function (createHTML) {
	  return function big() {
	    return createHTML(this, 'big', '', '');
	  };
	});

	var big = _core.String.big;

	// B.2.3.4 String.prototype.blink()
	_stringHtml('blink', function (createHTML) {
	  return function blink() {
	    return createHTML(this, 'blink', '', '');
	  };
	});

	var blink = _core.String.blink;

	// B.2.3.5 String.prototype.bold()
	_stringHtml('bold', function (createHTML) {
	  return function bold() {
	    return createHTML(this, 'b', '', '');
	  };
	});

	var bold = _core.String.bold;

	// B.2.3.6 String.prototype.fixed()
	_stringHtml('fixed', function (createHTML) {
	  return function fixed() {
	    return createHTML(this, 'tt', '', '');
	  };
	});

	var fixed = _core.String.fixed;

	// B.2.3.7 String.prototype.fontcolor(color)
	_stringHtml('fontcolor', function (createHTML) {
	  return function fontcolor(color) {
	    return createHTML(this, 'font', 'color', color);
	  };
	});

	var fontcolor = _core.String.fontcolor;

	// B.2.3.8 String.prototype.fontsize(size)
	_stringHtml('fontsize', function (createHTML) {
	  return function fontsize(size) {
	    return createHTML(this, 'font', 'size', size);
	  };
	});

	var fontsize = _core.String.fontsize;

	// B.2.3.9 String.prototype.italics()
	_stringHtml('italics', function (createHTML) {
	  return function italics() {
	    return createHTML(this, 'i', '', '');
	  };
	});

	var italics = _core.String.italics;

	// B.2.3.10 String.prototype.link(url)
	_stringHtml('link', function (createHTML) {
	  return function link(url) {
	    return createHTML(this, 'a', 'href', url);
	  };
	});

	var link = _core.String.link;

	// B.2.3.11 String.prototype.small()
	_stringHtml('small', function (createHTML) {
	  return function small() {
	    return createHTML(this, 'small', '', '');
	  };
	});

	var small = _core.String.small;

	// B.2.3.12 String.prototype.strike()
	_stringHtml('strike', function (createHTML) {
	  return function strike() {
	    return createHTML(this, 'strike', '', '');
	  };
	});

	var strike = _core.String.strike;

	// B.2.3.13 String.prototype.sub()
	_stringHtml('sub', function (createHTML) {
	  return function sub() {
	    return createHTML(this, 'sub', '', '');
	  };
	});

	var sub = _core.String.sub;

	// B.2.3.14 String.prototype.sup()
	_stringHtml('sup', function (createHTML) {
	  return function sup() {
	    return createHTML(this, 'sup', '', '');
	  };
	});

	var sup = _core.String.sup;

	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments[i++];
	      if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

	var fromCodePoint = _core.String.fromCodePoint;

	_export(_export.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = _toIobject(callSite.raw);
	    var len = _toLength(tpl.length);
	    var aLen = arguments.length;
	    var res = [];
	    var i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < aLen) res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

	var raw = _core.String.raw;

	var es2015Core = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2015Core);

	// 19.1.3.6 Object.prototype.toString()

	var test = {};
	test[_wks('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  _redefine(Object.prototype, 'toString', function toString() {
	    return '[object ' + _classof(this) + ']';
	  }, true);
	}

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	_addToUnscopables('keys');
	_addToUnscopables('values');
	_addToUnscopables('entries');

	var ITERATOR$4 = _wks('iterator');
	var TO_STRING_TAG = _wks('toStringTag');
	var ArrayValues = _iterators.Array;

	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};

	for (var collections = _objectKeys(DOMIterables), i$1 = 0; i$1 < collections.length; i$1++) {
	  var NAME$1 = collections[i$1];
	  var explicit = DOMIterables[NAME$1];
	  var Collection = _global[NAME$1];
	  var proto$1 = Collection && Collection.prototype;
	  var key;
	  if (proto$1) {
	    if (!proto$1[ITERATOR$4]) _hide(proto$1, ITERATOR$4, ArrayValues);
	    if (!proto$1[TO_STRING_TAG]) _hide(proto$1, TO_STRING_TAG, NAME$1);
	    _iterators[NAME$1] = ArrayValues;
	    if (explicit) for (key in es6_array_iterator) if (!proto$1[key]) _redefine(proto$1, key, es6_array_iterator[key], true);
	  }
	}

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
	  var f = _ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = _iterCall(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES$2 = _wks('species');
	var _speciesConstructor = function (O, D) {
	  var C = _anObject(O).constructor;
	  var S;
	  return C === undefined || (S = _anObject(C)[SPECIES$2]) == undefined ? D : _aFunction(S);
	};

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};

	var process = _global.process;
	var setTask = _global.setImmediate;
	var clearTask = _global.clearImmediate;
	var MessageChannel = _global.MessageChannel;
	var Dispatch = _global.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (_cof(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(_ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(_ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = _ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
	    defer = function (id) {
	      _global.postMessage(id + '', '*');
	    };
	    _global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
	    defer = function (id) {
	      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
	        _html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(_ctx(run, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};

	var macrotask = _task.set;
	var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
	var process$1 = _global.process;
	var Promise = _global.Promise;
	var isNode = _cof(process$1) == 'process';

	var _microtask = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(_global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = _aFunction(resolve);
	  this.reject = _aFunction(reject);
	}

	var f$5 = function (C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
		f: f$5
	};

	var _perform = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var navigator = _global.navigator;

	var _userAgent = navigator && navigator.userAgent || '';

	var _promiseResolve = function (C, x) {
	  _anObject(C);
	  if (_isObject(x) && x.constructor === C) return x;
	  var promiseCapability = _newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) _redefine(target, key, src[key], safe);
	  return target;
	};

	var task = _task.set;
	var microtask = _microtask();




	var PROMISE = 'Promise';
	var TypeError$1 = _global.TypeError;
	var process$2 = _global.process;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = _global[PROMISE];
	var isNode$1 = _classof(process$2) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

	var USE_NATIVE = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && _userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(_global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = _perform(function () {
	        if (isNode$1) {
	          process$2.emit('unhandledRejection', value, promise);
	        } else if (handler = _global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = _global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(_global, function () {
	    var handler;
	    if (isNode$1) {
	      process$2.emit('rejectionHandled', promise);
	    } else if (handler = _global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    _anInstance(this, $Promise, PROMISE, '_h');
	    _aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = _redefineAll($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$2.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = _ctx($resolve, promise, 1);
	    this.reject = _ctx($reject, promise, 1);
	  };
	  _newPromiseCapability.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Promise: $Promise });
	_setToStringTag($Promise, PROMISE);
	_setSpecies(PROMISE);
	Wrapper = _core[PROMISE];

	// statics
	_export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	_export(_export.S + _export.F * (_library || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
	  }
	});
	_export(_export.S + _export.F * !(USE_NATIVE && _iterDetect(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = _perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      _forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = _perform(function () {
	      _forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	var promise = _core.Promise;

	var es2015Promise = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2015Promise);

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var _validateCollection = function (it, TYPE) {
	  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};

	var dP$3 = _objectDp.f;









	var fastKey = _meta.fastKey;

	var SIZE = _descriptors ? '_s' : 'size';

	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	var _collectionStrong = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = _objectCreate(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = _validateCollection(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        _validateCollection(this, NAME);
	        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(_validateCollection(this, NAME), key);
	      }
	    });
	    if (_descriptors) dP$3(C.prototype, 'size', {
	      get: function () {
	        return _validateCollection(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    _iterDefine(C, NAME, function (iterated, kind) {
	      this._t = _validateCollection(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return _iterStep(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return _iterStep(0, entry.k);
	      if (kind == 'values') return _iterStep(0, entry.v);
	      return _iterStep(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    _setSpecies(NAME);
	  }
	};

	var _collection = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = _global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    _redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    _redefineAll(C.prototype, methods);
	    _meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = _fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = _iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && _fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        _anInstance(target, C, NAME);
	        var that = _inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }

	  _setToStringTag(C, NAME);

	  O[NAME] = C;
	  _export(_export.G + _export.W + _export.F * (C != Base), O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

	var MAP = 'Map';

	// 23.1 Map Objects
	var es6_map = _collection(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, _collectionStrong, true);

	var map = _core.Map;

	var getWeak = _meta.getWeak;







	var arrayFind = _arrayMethods(5);
	var arrayFindIndex = _arrayMethods(6);
	var id$1 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (that) {
	  return that._l || (that._l = new UncaughtFrozenStore());
	};
	var UncaughtFrozenStore = function () {
	  this.a = [];
	};
	var findUncaughtFrozen = function (store, key) {
	  return arrayFind(store.a, function (it) {
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = arrayFindIndex(this.a, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	var _collectionWeak = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME;      // collection type
	      that._i = id$1++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
	        return data && _has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!_isObject(key)) return false;
	        var data = getWeak(key);
	        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
	        return data && _has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var data = getWeak(_anObject(key), true);
	    if (data === true) uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

	var es6_weakMap = createCommonjsModule(function (module) {

	var each = _arrayMethods(0);






	var NATIVE_WEAK_MAP = _validateCollection;
	var IS_IE11 = !_global.ActiveXObject && 'ActiveXObject' in _global;
	var WEAK_MAP = 'WeakMap';
	var getWeak = _meta.getWeak;
	var isExtensible = Object.isExtensible;
	var uncaughtFrozenStore = _collectionWeak.ufstore;
	var InternalMap;

	var wrapper = function (get) {
	  return function WeakMap() {
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (_isObject(key)) {
	      var data = getWeak(key);
	      if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true);

	// IE11 WeakMap frozen keys fix
	if (NATIVE_WEAK_MAP && IS_IE11) {
	  InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
	  _objectAssign(InternalMap.prototype, methods);
	  _meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = $WeakMap.prototype;
	    var method = proto[key];
	    _redefine(proto, key, function (a, b) {
	      // store frozen objects on internal weakmap shim
	      if (_isObject(a) && !isExtensible(a)) {
	        if (!this._f) this._f = new InternalMap();
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}
	});

	var weakMap = _core.WeakMap;

	var SET = 'Set';

	// 23.2 Set Objects
	var es6_set = _collection(SET, function (get) {
	  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
	  }
	}, _collectionStrong);

	var set = _core.Set;

	var WEAK_SET = 'WeakSet';

	// 23.4 WeakSet Objects
	_collection(WEAK_SET, function (get) {
	  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
	  }
	}, _collectionWeak, false, true);

	var weakSet = _core.WeakSet;

	var es2015Collection = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2015Collection);

	// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)



	var rApply = (_global.Reflect || {}).apply;
	var fApply = Function.apply;
	// MS Edge argumentsList argument is optional
	_export(_export.S + _export.F * !_fails(function () {
	  rApply(function () { /* empty */ });
	}), 'Reflect', {
	  apply: function apply(target, thisArgument, argumentsList) {
	    var T = _aFunction(target);
	    var L = _anObject(argumentsList);
	    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
	  }
	});

	var arraySlice = [].slice;
	var factories = {};

	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};

	var _bind = Function.bind || function bind(that /* , ...args */) {
	  var fn = _aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
	  };
	  if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};

	// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])







	var rConstruct = (_global.Reflect || {}).construct;

	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = _fails(function () {
	  function F() { /* empty */ }
	  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !_fails(function () {
	  rConstruct(function () { /* empty */ });
	});

	_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
	  construct: function construct(Target, args /* , newTarget */) {
	    _aFunction(Target);
	    _anObject(args);
	    var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (_bind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return _isObject(result) ? result : instance;
	  }
	});

	// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)





	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	_export(_export.S + _export.F * _fails(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(_objectDp.f({}, 1, { value: 1 }), 1, { value: 2 });
	}), 'Reflect', {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    _anObject(target);
	    propertyKey = _toPrimitive(propertyKey, true);
	    _anObject(attributes);
	    try {
	      _objectDp.f(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.4 Reflect.deleteProperty(target, propertyKey)

	var gOPD$1 = _objectGopd.f;


	_export(_export.S, 'Reflect', {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = gOPD$1(_anObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  }
	});

	// 26.1.5 Reflect.enumerate(target)


	var Enumerate = function (iterated) {
	  this._t = _anObject(iterated); // target
	  this._i = 0;                  // next index
	  var keys = this._k = [];      // keys
	  var key;
	  for (key in iterated) keys.push(key);
	};
	_iterCreate(Enumerate, 'Object', function () {
	  var that = this;
	  var keys = that._k;
	  var key;
	  do {
	    if (that._i >= keys.length) return { value: undefined, done: true };
	  } while (!((key = keys[that._i++]) in that._t));
	  return { value: key, done: false };
	});

	_export(_export.S, 'Reflect', {
	  enumerate: function enumerate(target) {
	    return new Enumerate(target);
	  }
	});

	// 26.1.6 Reflect.get(target, propertyKey [, receiver])







	function get(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var desc, proto;
	  if (_anObject(target) === receiver) return target[propertyKey];
	  if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value')
	    ? desc.value
	    : desc.get !== undefined
	      ? desc.get.call(receiver)
	      : undefined;
	  if (_isObject(proto = _objectGpo(target))) return get(proto, propertyKey, receiver);
	}

	_export(_export.S, 'Reflect', { get: get });

	// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)




	_export(_export.S, 'Reflect', {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return _objectGopd.f(_anObject(target), propertyKey);
	  }
	});

	// 26.1.8 Reflect.getPrototypeOf(target)




	_export(_export.S, 'Reflect', {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return _objectGpo(_anObject(target));
	  }
	});

	// 26.1.9 Reflect.has(target, propertyKey)


	_export(_export.S, 'Reflect', {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	// 26.1.10 Reflect.isExtensible(target)


	var $isExtensible = Object.isExtensible;

	_export(_export.S, 'Reflect', {
	  isExtensible: function isExtensible(target) {
	    _anObject(target);
	    return $isExtensible ? $isExtensible(target) : true;
	  }
	});

	// all object keys, includes non-enumerable and symbols



	var Reflect$1 = _global.Reflect;
	var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
	  var keys = _objectGopn.f(_anObject(it));
	  var getSymbols = _objectGops.f;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

	// 26.1.11 Reflect.ownKeys(target)


	_export(_export.S, 'Reflect', { ownKeys: _ownKeys });

	// 26.1.12 Reflect.preventExtensions(target)


	var $preventExtensions = Object.preventExtensions;

	_export(_export.S, 'Reflect', {
	  preventExtensions: function preventExtensions(target) {
	    _anObject(target);
	    try {
	      if ($preventExtensions) $preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])









	function set$1(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
	  var existingDescriptor, proto;
	  if (!ownDesc) {
	    if (_isObject(proto = _objectGpo(target))) {
	      return set$1(proto, propertyKey, V, receiver);
	    }
	    ownDesc = _propertyDesc(0);
	  }
	  if (_has(ownDesc, 'value')) {
	    if (ownDesc.writable === false || !_isObject(receiver)) return false;
	    if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      _objectDp.f(receiver, propertyKey, existingDescriptor);
	    } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));
	    return true;
	  }
	  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	}

	_export(_export.S, 'Reflect', { set: set$1 });

	// 26.1.14 Reflect.setPrototypeOf(target, proto)



	if (_setProto) _export(_export.S, 'Reflect', {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    _setProto.check(target, proto);
	    try {
	      _setProto.set(target, proto);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	});

	var reflect = _core.Reflect;

	var es2015Reflect = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2015Reflect);

	// https://github.com/tc39/Array.prototype.includes

	var $includes = _arrayIncludes(true);

	_export(_export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	_addToUnscopables('includes');

	var includes$1 = _core.Array.includes;

	var es2016ArrayInclude = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2016ArrayInclude);

	var isEnum = _objectPie.f;
	var _objectToArray = function (isEntries) {
	  return function (it) {
	    var O = _toIobject(it);
	    var keys = _objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) if (isEnum.call(O, key = keys[i++])) {
	      result.push(isEntries ? [key, O[key]] : O[key]);
	    } return result;
	  };
	};

	// https://github.com/tc39/proposal-object-values-entries

	var $values = _objectToArray(false);

	_export(_export.S, 'Object', {
	  values: function values(it) {
	    return $values(it);
	  }
	});

	var values = _core.Object.values;

	// https://github.com/tc39/proposal-object-values-entries

	var $entries = _objectToArray(true);

	_export(_export.S, 'Object', {
	  entries: function entries(it) {
	    return $entries(it);
	  }
	});

	var entries = _core.Object.entries;

	// https://github.com/tc39/proposal-object-getownpropertydescriptors






	_export(_export.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = _toIobject(object);
	    var getDesc = _objectGopd.f;
	    var keys = _ownKeys(O);
	    var result = {};
	    var i = 0;
	    var key, desc;
	    while (keys.length > i) {
	      desc = getDesc(O, key = keys[i++]);
	      if (desc !== undefined) _createProperty(result, key, desc);
	    }
	    return result;
	  }
	});

	var getOwnPropertyDescriptors = _core.Object.getOwnPropertyDescriptors;

	var es2017Object = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2017Object);

	// https://github.com/tc39/proposal-string-pad-start-end




	var _stringPad = function (that, maxLength, fillString, left) {
	  var S = String(_defined(that));
	  var stringLength = S.length;
	  var fillStr = fillString === undefined ? ' ' : String(fillString);
	  var intMaxLength = _toLength(maxLength);
	  if (intMaxLength <= stringLength || fillStr == '') return S;
	  var fillLen = intMaxLength - stringLength;
	  var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
	  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	  return left ? stringFiller + S : S + stringFiller;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG, 'String', {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
	  }
	});

	var padStart = _core.String.padStart;

	// https://github.com/tc39/proposal-string-pad-start-end




	// https://github.com/zloirock/core-js/issues/280
	var WEBKIT_BUG$1 = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(_userAgent);

	_export(_export.P + _export.F * WEBKIT_BUG$1, 'String', {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
	  }
	});

	var padEnd = _core.String.padEnd;

	var es2017String = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2017String);

	var TYPED = _uid('typed_array');
	var VIEW = _uid('view');
	var ABV = !!(_global.ArrayBuffer && _global.DataView);
	var CONSTR = ABV;
	var i$2 = 0;
	var l = 9;
	var Typed;

	var TypedArrayConstructors = (
	  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
	).split(',');

	while (i$2 < l) {
	  if (Typed = _global[TypedArrayConstructors[i$2++]]) {
	    _hide(Typed.prototype, TYPED, true);
	    _hide(Typed.prototype, VIEW, true);
	  } else CONSTR = false;
	}

	var _typed = {
	  ABV: ABV,
	  CONSTR: CONSTR,
	  TYPED: TYPED,
	  VIEW: VIEW
	};

	// https://tc39.github.io/ecma262/#sec-toindex


	var _toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = _toInteger(it);
	  var length = _toLength(number);
	  if (number !== length) throw RangeError('Wrong length!');
	  return length;
	};

	var _typedBuffer = createCommonjsModule(function (module, exports) {











	var gOPN = _objectGopn.f;
	var dP = _objectDp.f;


	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE = 'prototype';
	var WRONG_LENGTH = 'Wrong length!';
	var WRONG_INDEX = 'Wrong index!';
	var $ArrayBuffer = _global[ARRAY_BUFFER];
	var $DataView = _global[DATA_VIEW];
	var Math = _global.Math;
	var RangeError = _global.RangeError;
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity = _global.Infinity;
	var BaseBuffer = $ArrayBuffer;
	var abs = Math.abs;
	var pow = Math.pow;
	var floor = Math.floor;
	var log = Math.log;
	var LN2 = Math.LN2;
	var BUFFER = 'buffer';
	var BYTE_LENGTH = 'byteLength';
	var BYTE_OFFSET = 'byteOffset';
	var $BUFFER = _descriptors ? '_b' : BUFFER;
	var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
	var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET;

	// IEEE754 conversions based on https://github.com/feross/ieee754
	function packIEEE754(value, mLen, nBytes) {
	  var buffer = new Array(nBytes);
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
	  var i = 0;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	  var e, m, c;
	  value = abs(value);
	  // eslint-disable-next-line no-self-compare
	  if (value != value || value === Infinity) {
	    // eslint-disable-next-line no-self-compare
	    m = value != value ? 1 : 0;
	    e = eMax;
	  } else {
	    e = floor(log(value) / LN2);
	    if (value * (c = pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * pow(2, eBias - 1) * pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
	  buffer[--i] |= s * 128;
	  return buffer;
	}
	function unpackIEEE754(buffer, mLen, nBytes) {
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = eLen - 7;
	  var i = nBytes - 1;
	  var s = buffer[i--];
	  var e = s & 127;
	  var m;
	  s >>= 7;
	  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : s ? -Infinity : Infinity;
	  } else {
	    m = m + pow(2, mLen);
	    e = e - eBias;
	  } return (s ? -1 : 1) * m * pow(2, e - mLen);
	}

	function unpackI32(bytes) {
	  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
	}
	function packI8(it) {
	  return [it & 0xff];
	}
	function packI16(it) {
	  return [it & 0xff, it >> 8 & 0xff];
	}
	function packI32(it) {
	  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
	}
	function packF64(it) {
	  return packIEEE754(it, 52, 8);
	}
	function packF32(it) {
	  return packIEEE754(it, 23, 4);
	}

	function addGetter(C, key, internal) {
	  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
	}

	function get(view, bytes, index, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = _toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = store.slice(start, start + bytes);
	  return isLittleEndian ? pack : pack.reverse();
	}
	function set(view, bytes, index, conversion, value, isLittleEndian) {
	  var numIndex = +index;
	  var intIndex = _toIndex(numIndex);
	  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
	  var store = view[$BUFFER]._b;
	  var start = intIndex + view[$OFFSET];
	  var pack = conversion(+value);
	  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
	}

	if (!_typed.ABV) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = _toIndex(length);
	    this._b = _arrayFill.call(new Array(byteLength), 0);
	    this[$LENGTH] = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    _anInstance(this, $DataView, DATA_VIEW);
	    _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = buffer[$LENGTH];
	    var offset = _toInteger(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
	    byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
	    this[$BUFFER] = buffer;
	    this[$OFFSET] = offset;
	    this[$LENGTH] = byteLength;
	  };

	  if (_descriptors) {
	    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
	    addGetter($DataView, BUFFER, '_b');
	    addGetter($DataView, BYTE_LENGTH, '_l');
	    addGetter($DataView, BYTE_OFFSET, '_o');
	  }

	  _redefineAll($DataView[PROTOTYPE], {
	    getInt8: function getInt8(byteOffset) {
	      return get(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get(this, 2, byteOffset, arguments[1]);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1]));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set(this, 1, byteOffset, packI8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set(this, 2, byteOffset, packI16, value, arguments[2]);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packI32, value, arguments[2]);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set(this, 4, byteOffset, packF32, value, arguments[2]);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set(this, 8, byteOffset, packF64, value, arguments[2]);
	    }
	  });
	} else {
	  if (!_fails(function () {
	    $ArrayBuffer(1);
	  }) || !_fails(function () {
	    new $ArrayBuffer(-1); // eslint-disable-line no-new
	  }) || _fails(function () {
	    new $ArrayBuffer(); // eslint-disable-line no-new
	    new $ArrayBuffer(1.5); // eslint-disable-line no-new
	    new $ArrayBuffer(NaN); // eslint-disable-line no-new
	    return $ArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      _anInstance(this, $ArrayBuffer);
	      return new BaseBuffer(_toIndex(length));
	    };
	    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
	    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
	      if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
	    }
	    ArrayBufferProto.constructor = $ArrayBuffer;
	  }
	  // iOS Safari 7.x bug
	  var view = new $DataView(new $ArrayBuffer(2));
	  var $setInt8 = $DataView[PROTOTYPE].setInt8;
	  view.setInt8(0, 2147483648);
	  view.setInt8(1, 2147483649);
	  if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
	    setInt8: function setInt8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      $setInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, true);
	}
	_setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	_setToStringTag($DataView, DATA_VIEW);
	_hide($DataView[PROTOTYPE], _typed.VIEW, true);
	exports[ARRAY_BUFFER] = $ArrayBuffer;
	exports[DATA_VIEW] = $DataView;
	});

	var ArrayBuffer = _global.ArrayBuffer;

	var $ArrayBuffer = _typedBuffer.ArrayBuffer;
	var $DataView = _typedBuffer.DataView;
	var $isView = _typed.ABV && ArrayBuffer.isView;
	var $slice = $ArrayBuffer.prototype.slice;
	var VIEW$1 = _typed.VIEW;
	var ARRAY_BUFFER = 'ArrayBuffer';

	_export(_export.G + _export.W + _export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

	_export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
	  // 24.1.3.1 ArrayBuffer.isView(arg)
	  isView: function isView(it) {
	    return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
	  }
	});

	_export(_export.P + _export.U + _export.F * _fails(function () {
	  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
	}), ARRAY_BUFFER, {
	  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
	  slice: function slice(start, end) {
	    if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix
	    var len = _anObject(this).byteLength;
	    var first = _toAbsoluteIndex(start, len);
	    var fin = _toAbsoluteIndex(end === undefined ? len : end, len);
	    var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));
	    var viewS = new $DataView(this);
	    var viewT = new $DataView(result);
	    var index = 0;
	    while (first < fin) {
	      viewT.setUint8(index++, viewS.getUint8(first++));
	    } return result;
	  }
	});

	_setSpecies(ARRAY_BUFFER);

	_export(_export.G + _export.W + _export.F * !_typed.ABV, {
	  DataView: _typedBuffer.DataView
	});

	var _typedArray = createCommonjsModule(function (module) {
	if (_descriptors) {
	  var LIBRARY = _library;
	  var global = _global;
	  var fails = _fails;
	  var $export = _export;
	  var $typed = _typed;
	  var $buffer = _typedBuffer;
	  var ctx = _ctx;
	  var anInstance = _anInstance;
	  var propertyDesc = _propertyDesc;
	  var hide = _hide;
	  var redefineAll = _redefineAll;
	  var toInteger = _toInteger;
	  var toLength = _toLength;
	  var toIndex = _toIndex;
	  var toAbsoluteIndex = _toAbsoluteIndex;
	  var toPrimitive = _toPrimitive;
	  var has = _has;
	  var classof = _classof;
	  var isObject = _isObject;
	  var toObject = _toObject;
	  var isArrayIter = _isArrayIter;
	  var create = _objectCreate;
	  var getPrototypeOf = _objectGpo;
	  var gOPN = _objectGopn.f;
	  var getIterFn = core_getIteratorMethod;
	  var uid = _uid;
	  var wks = _wks;
	  var createArrayMethod = _arrayMethods;
	  var createArrayIncludes = _arrayIncludes;
	  var speciesConstructor = _speciesConstructor;
	  var ArrayIterators = es6_array_iterator;
	  var Iterators = _iterators;
	  var $iterDetect = _iterDetect;
	  var setSpecies = _setSpecies;
	  var arrayFill = _arrayFill;
	  var arrayCopyWithin = _arrayCopyWithin;
	  var $DP = _objectDp;
	  var $GOPD = _objectGopd;
	  var dP = $DP.f;
	  var gOPD = $GOPD.f;
	  var RangeError = global.RangeError;
	  var TypeError = global.TypeError;
	  var Uint8Array = global.Uint8Array;
	  var ARRAY_BUFFER = 'ArrayBuffer';
	  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
	  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	  var PROTOTYPE = 'prototype';
	  var ArrayProto = Array[PROTOTYPE];
	  var $ArrayBuffer = $buffer.ArrayBuffer;
	  var $DataView = $buffer.DataView;
	  var arrayForEach = createArrayMethod(0);
	  var arrayFilter = createArrayMethod(2);
	  var arraySome = createArrayMethod(3);
	  var arrayEvery = createArrayMethod(4);
	  var arrayFind = createArrayMethod(5);
	  var arrayFindIndex = createArrayMethod(6);
	  var arrayIncludes = createArrayIncludes(true);
	  var arrayIndexOf = createArrayIncludes(false);
	  var arrayValues = ArrayIterators.values;
	  var arrayKeys = ArrayIterators.keys;
	  var arrayEntries = ArrayIterators.entries;
	  var arrayLastIndexOf = ArrayProto.lastIndexOf;
	  var arrayReduce = ArrayProto.reduce;
	  var arrayReduceRight = ArrayProto.reduceRight;
	  var arrayJoin = ArrayProto.join;
	  var arraySort = ArrayProto.sort;
	  var arraySlice = ArrayProto.slice;
	  var arrayToString = ArrayProto.toString;
	  var arrayToLocaleString = ArrayProto.toLocaleString;
	  var ITERATOR = wks('iterator');
	  var TAG = wks('toStringTag');
	  var TYPED_CONSTRUCTOR = uid('typed_constructor');
	  var DEF_CONSTRUCTOR = uid('def_constructor');
	  var ALL_CONSTRUCTORS = $typed.CONSTR;
	  var TYPED_ARRAY = $typed.TYPED;
	  var VIEW = $typed.VIEW;
	  var WRONG_LENGTH = 'Wrong length!';

	  var $map = createArrayMethod(1, function (O, length) {
	    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
	  });

	  var LITTLE_ENDIAN = fails(function () {
	    // eslint-disable-next-line no-undef
	    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
	  });

	  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
	    new Uint8Array(1).set({});
	  });

	  var toOffset = function (it, BYTES) {
	    var offset = toInteger(it);
	    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
	    return offset;
	  };

	  var validate = function (it) {
	    if (isObject(it) && TYPED_ARRAY in it) return it;
	    throw TypeError(it + ' is not a typed array!');
	  };

	  var allocate = function (C, length) {
	    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
	      throw TypeError('It is not a typed array constructor!');
	    } return new C(length);
	  };

	  var speciesFromList = function (O, list) {
	    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
	  };

	  var fromList = function (C, list) {
	    var index = 0;
	    var length = list.length;
	    var result = allocate(C, length);
	    while (length > index) result[index] = list[index++];
	    return result;
	  };

	  var addGetter = function (it, key, internal) {
	    dP(it, key, { get: function () { return this._d[internal]; } });
	  };

	  var $from = function from(source /* , mapfn, thisArg */) {
	    var O = toObject(source);
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var iterFn = getIterFn(O);
	    var i, length, values, result, step, iterator;
	    if (iterFn != undefined && !isArrayIter(iterFn)) {
	      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
	        values.push(step.value);
	      } O = values;
	    }
	    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
	    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
	      result[i] = mapping ? mapfn(O[i], i) : O[i];
	    }
	    return result;
	  };

	  var $of = function of(/* ...items */) {
	    var index = 0;
	    var length = arguments.length;
	    var result = allocate(this, length);
	    while (length > index) result[index] = arguments[index++];
	    return result;
	  };

	  // iOS Safari 6.x fails here
	  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

	  var $toLocaleString = function toLocaleString() {
	    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
	  };

	  var proto = {
	    copyWithin: function copyWithin(target, start /* , end */) {
	      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    every: function every(callbackfn /* , thisArg */) {
	      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
	      return arrayFill.apply(validate(this), arguments);
	    },
	    filter: function filter(callbackfn /* , thisArg */) {
	      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
	        arguments.length > 1 ? arguments[1] : undefined));
	    },
	    find: function find(predicate /* , thisArg */) {
	      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    findIndex: function findIndex(predicate /* , thisArg */) {
	      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    forEach: function forEach(callbackfn /* , thisArg */) {
	      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    indexOf: function indexOf(searchElement /* , fromIndex */) {
	      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    includes: function includes(searchElement /* , fromIndex */) {
	      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    join: function join(separator) { // eslint-disable-line no-unused-vars
	      return arrayJoin.apply(validate(this), arguments);
	    },
	    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
	      return arrayLastIndexOf.apply(validate(this), arguments);
	    },
	    map: function map(mapfn /* , thisArg */) {
	      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduce.apply(validate(this), arguments);
	    },
	    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
	      return arrayReduceRight.apply(validate(this), arguments);
	    },
	    reverse: function reverse() {
	      var that = this;
	      var length = validate(that).length;
	      var middle = Math.floor(length / 2);
	      var index = 0;
	      var value;
	      while (index < middle) {
	        value = that[index];
	        that[index++] = that[--length];
	        that[length] = value;
	      } return that;
	    },
	    some: function some(callbackfn /* , thisArg */) {
	      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    },
	    sort: function sort(comparefn) {
	      return arraySort.call(validate(this), comparefn);
	    },
	    subarray: function subarray(begin, end) {
	      var O = validate(this);
	      var length = O.length;
	      var $begin = toAbsoluteIndex(begin, length);
	      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
	        O.buffer,
	        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
	        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
	      );
	    }
	  };

	  var $slice = function slice(start, end) {
	    return speciesFromList(this, arraySlice.call(validate(this), start, end));
	  };

	  var $set = function set(arrayLike /* , offset */) {
	    validate(this);
	    var offset = toOffset(arguments[1], 1);
	    var length = this.length;
	    var src = toObject(arrayLike);
	    var len = toLength(src.length);
	    var index = 0;
	    if (len + offset > length) throw RangeError(WRONG_LENGTH);
	    while (index < len) this[offset + index] = src[index++];
	  };

	  var $iterators = {
	    entries: function entries() {
	      return arrayEntries.call(validate(this));
	    },
	    keys: function keys() {
	      return arrayKeys.call(validate(this));
	    },
	    values: function values() {
	      return arrayValues.call(validate(this));
	    }
	  };

	  var isTAIndex = function (target, key) {
	    return isObject(target)
	      && target[TYPED_ARRAY]
	      && typeof key != 'symbol'
	      && key in target
	      && String(+key) == String(key);
	  };
	  var $getDesc = function getOwnPropertyDescriptor(target, key) {
	    return isTAIndex(target, key = toPrimitive(key, true))
	      ? propertyDesc(2, target[key])
	      : gOPD(target, key);
	  };
	  var $setDesc = function defineProperty(target, key, desc) {
	    if (isTAIndex(target, key = toPrimitive(key, true))
	      && isObject(desc)
	      && has(desc, 'value')
	      && !has(desc, 'get')
	      && !has(desc, 'set')
	      // TODO: add validation descriptor w/o calling accessors
	      && !desc.configurable
	      && (!has(desc, 'writable') || desc.writable)
	      && (!has(desc, 'enumerable') || desc.enumerable)
	    ) {
	      target[key] = desc.value;
	      return target;
	    } return dP(target, key, desc);
	  };

	  if (!ALL_CONSTRUCTORS) {
	    $GOPD.f = $getDesc;
	    $DP.f = $setDesc;
	  }

	  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
	    getOwnPropertyDescriptor: $getDesc,
	    defineProperty: $setDesc
	  });

	  if (fails(function () { arrayToString.call({}); })) {
	    arrayToString = arrayToLocaleString = function toString() {
	      return arrayJoin.call(this);
	    };
	  }

	  var $TypedArrayPrototype$ = redefineAll({}, proto);
	  redefineAll($TypedArrayPrototype$, $iterators);
	  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
	  redefineAll($TypedArrayPrototype$, {
	    slice: $slice,
	    set: $set,
	    constructor: function () { /* noop */ },
	    toString: arrayToString,
	    toLocaleString: $toLocaleString
	  });
	  addGetter($TypedArrayPrototype$, 'buffer', 'b');
	  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
	  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
	  addGetter($TypedArrayPrototype$, 'length', 'e');
	  dP($TypedArrayPrototype$, TAG, {
	    get: function () { return this[TYPED_ARRAY]; }
	  });

	  // eslint-disable-next-line max-statements
	  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
	    CLAMPED = !!CLAMPED;
	    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + KEY;
	    var SETTER = 'set' + KEY;
	    var TypedArray = global[NAME];
	    var Base = TypedArray || {};
	    var TAC = TypedArray && getPrototypeOf(TypedArray);
	    var FORCED = !TypedArray || !$typed.ABV;
	    var O = {};
	    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
	    var getter = function (that, index) {
	      var data = that._d;
	      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
	    };
	    var setter = function (that, index, value) {
	      var data = that._d;
	      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
	      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
	    };
	    var addElement = function (that, index) {
	      dP(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };
	    if (FORCED) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME, '_d');
	        var index = 0;
	        var offset = 0;
	        var buffer, byteLength, length, klass;
	        if (!isObject(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new $ArrayBuffer(byteLength);
	        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          buffer = data;
	          offset = toOffset($offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - offset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength($length) * BYTES;
	            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (TYPED_ARRAY in data) {
	          return fromList(TypedArray, data);
	        } else {
	          return $from.call(TypedArray, data);
	        }
	        hide(that, '_d', {
	          b: buffer,
	          o: offset,
	          l: byteLength,
	          e: length,
	          v: new $DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });
	      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
	      hide(TypedArrayPrototype, 'constructor', TypedArray);
	    } else if (!fails(function () {
	      TypedArray(1);
	    }) || !fails(function () {
	      new TypedArray(-1); // eslint-disable-line no-new
	    }) || !$iterDetect(function (iter) {
	      new TypedArray(); // eslint-disable-line no-new
	      new TypedArray(null); // eslint-disable-line no-new
	      new TypedArray(1.5); // eslint-disable-line no-new
	      new TypedArray(iter); // eslint-disable-line no-new
	    }, true)) {
	      TypedArray = wrapper(function (that, data, $offset, $length) {
	        anInstance(that, TypedArray, NAME);
	        var klass;
	        // `ws` module bug, temporarily remove validation length for Uint8Array
	        // https://github.com/websockets/ws/pull/645
	        if (!isObject(data)) return new Base(toIndex(data));
	        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
	          return $length !== undefined
	            ? new Base(data, toOffset($offset, BYTES), $length)
	            : $offset !== undefined
	              ? new Base(data, toOffset($offset, BYTES))
	              : new Base(data);
	        }
	        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
	        return $from.call(TypedArray, data);
	      });
	      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
	        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
	      });
	      TypedArray[PROTOTYPE] = TypedArrayPrototype;
	      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
	    }
	    var $nativeIterator = TypedArrayPrototype[ITERATOR];
	    var CORRECT_ITER_NAME = !!$nativeIterator
	      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
	    var $iterator = $iterators.values;
	    hide(TypedArray, TYPED_CONSTRUCTOR, true);
	    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
	    hide(TypedArrayPrototype, VIEW, true);
	    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

	    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
	      dP(TypedArrayPrototype, TAG, {
	        get: function () { return NAME; }
	      });
	    }

	    O[NAME] = TypedArray;

	    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

	    $export($export.S, NAME, {
	      BYTES_PER_ELEMENT: BYTES
	    });

	    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
	      from: $from,
	      of: $of
	    });

	    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

	    $export($export.P, NAME, proto);

	    setSpecies(NAME);

	    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

	    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

	    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

	    $export($export.P + $export.F * fails(function () {
	      new TypedArray(1).slice();
	    }), NAME, { slice: $slice });

	    $export($export.P + $export.F * (fails(function () {
	      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
	    }) || !fails(function () {
	      TypedArrayPrototype.toLocaleString.call([1, 2]);
	    })), NAME, { toLocaleString: $toLocaleString });

	    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
	    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
	  };
	} else module.exports = function () { /* empty */ };
	});

	_typedArray('Int8', 1, function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint8', 1, function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	_typedArray('Int16', 2, function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint16', 2, function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Int32', 4, function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Uint32', 4, function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float32', 4, function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	_typedArray('Float64', 8, function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var es2017TypedArrays = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2017TypedArrays);

	_export(_export.P + _export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = _speciesConstructor(this, _core.Promise || _global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return _promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return _promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });

	var _finally = _core.Promise['finally'];

	var es2018Promise = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	unwrapExports(es2018Promise);

	var lib = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	});

	var index = unwrapExports(lib);

	return index;

}());

},{}],3:[function(require,module,exports){
(function (global){
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    __extends = function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function (m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    };

    __values = function (o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result["default"] = mod;
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],4:[function(require,module,exports){
/*!
 * vConsole v3.3.0 (https://github.com/Tencent/vConsole)
 * 
 * Tencent is pleased to support the open source community by making vConsole available.
 * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("VConsole",[],t):"object"==typeof exports?exports.VConsole=t():e.VConsole=t()}(window,function(){return function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=6)}([function(e,t,o){var n,r,i;r=[t],void 0===(i="function"==typeof(n=function(e){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return"[object Number]"==Object.prototype.toString.call(e)}function n(e){return"[object String]"==Object.prototype.toString.call(e)}function r(e){return"[object Array]"==Object.prototype.toString.call(e)}function i(e){return"[object Boolean]"==Object.prototype.toString.call(e)}function a(e){return void 0===e}function l(e){return null===e}function c(e){return"[object Symbol]"==Object.prototype.toString.call(e)}function s(e){return!("[object Object]"!=Object.prototype.toString.call(e)&&(o(e)||n(e)||i(e)||r(e)||l(e)||d(e)||a(e)||c(e)))}function d(e){return"[object Function]"==Object.prototype.toString.call(e)}function u(e){var t=Object.prototype.toString.call(e);return"[object global]"==t||"[object Window]"==t||"[object DOMWindow]"==t}function f(e){if(!s(e)&&!r(e))return[];if(r(e)){var t=[];return e.forEach(function(e,o){t.push(o)}),t}return Object.getOwnPropertyNames(e).sort()}Object.defineProperty(e,"__esModule",{value:!0}),e.getDate=function(e){var t=e>0?new Date(e):new Date,o=t.getDate()<10?"0"+t.getDate():t.getDate(),n=t.getMonth()<9?"0"+(t.getMonth()+1):t.getMonth()+1,r=t.getFullYear(),i=t.getHours()<10?"0"+t.getHours():t.getHours(),a=t.getMinutes()<10?"0"+t.getMinutes():t.getMinutes(),l=t.getSeconds()<10?"0"+t.getSeconds():t.getSeconds(),c=t.getMilliseconds()<10?"0"+t.getMilliseconds():t.getMilliseconds();return c<100&&(c="0"+c),{time:+t,year:r,month:n,day:o,hour:i,minute:a,second:l,millisecond:c}},e.isNumber=o,e.isString=n,e.isArray=r,e.isBoolean=i,e.isUndefined=a,e.isNull=l,e.isSymbol=c,e.isObject=s,e.isFunction=d,e.isElement=function(e){return"object"===("undefined"==typeof HTMLElement?"undefined":t(HTMLElement))?e instanceof HTMLElement:e&&"object"===t(e)&&null!==e&&1===e.nodeType&&"string"==typeof e.nodeName},e.isWindow=u,e.isPlainObject=function(e){var o,n=Object.prototype.hasOwnProperty;if(!e||"object"!==t(e)||e.nodeType||u(e))return!1;try{if(e.constructor&&!n.call(e,"constructor")&&!n.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}for(o in e);return void 0===o||n.call(e,o)},e.htmlEncode=function(e){return document.createElement("a").appendChild(document.createTextNode(e)).parentNode.innerHTML},e.JSONStringify=function(e){if(!s(e)&&!r(e))return JSON.stringify(e);var t="{",o="}";r(e)&&(t="[",o="]");for(var n=t,i=f(e),a=0;a<i.length;a++){var l=i[a],u=e[l];try{r(e)||(s(l)||r(l)||c(l)?n+=Object.prototype.toString.call(l):n+=l,n+=": "),r(u)?n+="Array["+u.length+"]":s(u)||c(u)||d(u)?n+=Object.prototype.toString.call(u):n+=JSON.stringify(u),a<i.length-1&&(n+=", ")}catch(e){continue}}return n+=o},e.getObjAllKeys=f,e.getObjName=function(e){return Object.prototype.toString.call(e).replace("[object ","").replace("]","")},e.setStorage=function(e,t){window.localStorage&&(e="vConsole_"+e,localStorage.setItem(e,t))},e.getStorage=function(e){if(window.localStorage)return e="vConsole_"+e,localStorage.getItem(e)}})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n,r,i;r=[t,o(0),o(10)],void 0===(i="function"==typeof(n=function(o,n,r){"use strict";var i;Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,r=(i=r)&&i.__esModule?i:{default:i};var a={one:function(e,t){return t?t.querySelector(e):document.querySelector(e)},all:function(e,t){var o,n=[];return(o=t?t.querySelectorAll(e):document.querySelectorAll(e))&&o.length>0&&(n=Array.prototype.slice.call(o)),n},addClass:function(e,t){if(e){(0,n.isArray)(e)||(e=[e]);for(var o=0;o<e.length;o++){var r=e[o].className||"",i=r.split(" ");i.indexOf(t)>-1||(i.push(t),e[o].className=i.join(" "))}}},removeClass:function(e,t){if(e){(0,n.isArray)(e)||(e=[e]);for(var o=0;o<e.length;o++){for(var r=e[o].className.split(" "),i=0;i<r.length;i++)r[i]==t&&(r[i]="");e[o].className=r.join(" ").trim()}}},hasClass:function(e,t){if(!e)return!1;for(var o=e.className.split(" "),n=0;n<o.length;n++)if(o[n]==t)return!0;return!1},bind:function(e,t,o,r){if(e){void 0===r&&(r=!1),(0,n.isArray)(e)||(e=[e]);for(var i=0;i<e.length;i++)e[i].addEventListener(t,o,r)}},delegate:function(e,t,o,n){e&&e.addEventListener(t,function(t){var r=a.all(o,e);if(r)e:for(var i=0;i<r.length;i++)for(var l=t.target;l;){if(l==r[i]){n.call(l,t);break e}if((l=l.parentNode)==e)break}},!1)}};a.render=r.default;var l=a;o.default=l,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n,r,i;r=[t],void 0===(i="function"==typeof(n=function(o){"use strict";function n(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0;var r=function(){function e(t){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"newPlugin";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=t,this.name=o,this.isReady=!1,this.eventList={}}return t=e,(o=[{key:"on",value:function(e,t){return this.eventList[e]=t,this}},{key:"trigger",value:function(e,t){if("function"==typeof this.eventList[e])this.eventList[e].call(this,t);else{var o="on"+e.charAt(0).toUpperCase()+e.slice(1);"function"==typeof this[o]&&this[o].call(this,t)}return this}},{key:"id",get:function(){return this._id},set:function(e){if(!e)throw"Plugin ID cannot be empty";this._id=e.toLowerCase()}},{key:"name",get:function(){return this._name},set:function(e){if(!e)throw"Plugin name cannot be empty";this._name=e}},{key:"vConsole",get:function(){return this._vConsole||void 0},set:function(e){if(!e)throw"vConsole cannot be empty";this._vConsole=e}}])&&n(t.prototype,o),r&&n(t,r),e;var t,o,r}();o.default=r,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var o=function(e,t){var o=e[1]||"",n=e[3];if(!n)return o;if(t&&"function"==typeof btoa){var r=(a=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"});return[o].concat(i).concat([r]).join("\n")}var a;return[o].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+o+"}":o}).join("")},t.i=function(e,o){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},r=0;r<this.length;r++){var i=this[r][0];null!=i&&(n[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];null!=a[0]&&n[a[0]]||(o&&!a[2]?a[2]=o:o&&(a[2]="("+a[2]+") and ("+o+")"),t.push(a))}},t}},function(e,t,o){var n,r,i={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=n.apply(this,arguments)),r}),l=function(e){var t={};return function(e,o){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,o);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,s=0,d=[],u=o(13);function f(e,t){for(var o=0;o<e.length;o++){var n=e[o],r=i[n.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](n.parts[a]);for(;a<n.parts.length;a++)r.parts.push(m(n.parts[a],t))}else{var l=[];for(a=0;a<n.parts.length;a++)l.push(m(n.parts[a],t));i[n.id]={id:n.id,refs:1,parts:l}}}}function v(e,t){for(var o=[],n={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};n[a]?n[a].parts.push(l):o.push(n[a]={id:a,parts:[l]})}return o}function p(e,t){var o=l(e.insertInto);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=d[d.length-1];if("top"===e.insertAt)n?n.nextSibling?o.insertBefore(t,n.nextSibling):o.appendChild(t):o.insertBefore(t,o.firstChild),d.push(t);else if("bottom"===e.insertAt)o.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertAt.before,o);o.insertBefore(t,r)}}function b(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var n=function(){0;return o.nc}();n&&(e.attrs.nonce=n)}return g(t,e.attrs),p(e,t),t}function g(e,t){Object.keys(t).forEach(function(o){e.setAttribute(o,t[o])})}function m(e,t){var o,n,r,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;o=c||(c=h(t)),n=w.bind(null,o,a,!1),r=w.bind(null,o,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(o=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),p(e,t),t}(t),n=function(e,t,o){var n=o.css,r=o.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(n=u(n));r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([n],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,o,t),r=function(){b(o),o.href&&URL.revokeObjectURL(o.href)}):(o=h(t),n=function(e,t){var o=t.css,n=t.media;n&&e.setAttribute("media",n);if(e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}.bind(null,o),r=function(){b(o)});return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var o=v(e,t);return f(o,t),function(e){for(var n=[],r=0;r<o.length;r++){var a=o[r];(l=i[a.id]).refs--,n.push(l)}e&&f(v(e,t),t);for(r=0;r<n.length;r++){var l;if(0===(l=n[r]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete i[l.id]}}}};var y,_=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function w(e,t,o,n){var r=o?"":n.css;if(e.styleSheet)e.styleSheet.cssText=_(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t,o){var n,r,i;r=[t,o(0),o(1),o(2),o(20),o(21),o(22)],void 0===(i="function"==typeof(n=function(o,n,r,i,a,l,c){"use strict";function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(n),r=s(r),i=s(i),a=s(a),l=s(l),c=s(c);var b=1e3,h=[],g={},m=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return o=f(this,(e=v(t)).call.apply(e,[this].concat(r))),h.push(o.id),o.tplTabbox="",o.allowUnformattedLog=!0,o.isReady=!1,o.isShow=!1,o.$tabbox=null,o.console={},o.logList=[],o.isInBottom=!0,o.maxLogNumber=b,o.logNumber=0,o.mockConsole(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),o=t,(i=[{key:"onInit",value:function(){this.$tabbox=r.default.render(this.tplTabbox,{}),this.updateMaxLogNumber()}},{key:"onRenderTab",value:function(e){e(this.$tabbox)}},{key:"onAddTopBar",value:function(e){for(var t=this,o=["All","Log","Info","Warn","Error"],n=[],i=0;i<o.length;i++)n.push({name:o[i],data:{type:o[i].toLowerCase()},className:"",onClick:function(){if(r.default.hasClass(this,"vc-actived"))return!1;t.showLogType(this.dataset.type||"all")}});n[0].className="vc-actived",e(n)}},{key:"onAddTool",value:function(e){var t=this,o=[{name:"Clear",global:!1,onClick:function(){t.clearLog(),t.vConsole.triggerEvent("clearLog")}}];e(o)}},{key:"onReady",value:function(){var e=this;e.isReady=!0;var t=r.default.all(".vc-subtab",e.$tabbox);r.default.bind(t,"click",function(o){if(o.preventDefault(),r.default.hasClass(this,"vc-actived"))return!1;r.default.removeClass(t,"vc-actived"),r.default.addClass(this,"vc-actived");var n=this.dataset.type,i=r.default.one(".vc-log",e.$tabbox);r.default.removeClass(i,"vc-log-partly-log"),r.default.removeClass(i,"vc-log-partly-info"),r.default.removeClass(i,"vc-log-partly-warn"),r.default.removeClass(i,"vc-log-partly-error"),"all"==n?r.default.removeClass(i,"vc-log-partly"):(r.default.addClass(i,"vc-log-partly"),r.default.addClass(i,"vc-log-partly-"+n))});var o=r.default.one(".vc-content");r.default.bind(o,"scroll",function(t){e.isShow&&(o.scrollTop+o.offsetHeight>=o.scrollHeight?e.isInBottom=!0:e.isInBottom=!1)});for(var n=0;n<e.logList.length;n++)e.printLog(e.logList[n]);e.logList=[]}},{key:"onRemove",value:function(){window.console.log=this.console.log,window.console.info=this.console.info,window.console.warn=this.console.warn,window.console.debug=this.console.debug,window.console.error=this.console.error,window.console.time=this.console.time,window.console.timeEnd=this.console.timeEnd,window.console.clear=this.console.clear,this.console={};var e=h.indexOf(this.id);e>-1&&h.splice(e,1)}},{key:"onShow",value:function(){this.isShow=!0,1==this.isInBottom&&this.autoScrollToBottom()}},{key:"onHide",value:function(){this.isShow=!1}},{key:"onShowConsole",value:function(){1==this.isInBottom&&this.autoScrollToBottom()}},{key:"onUpdateOption",value:function(){this.vConsole.option.maxLogNumber!=this.maxLogNumber&&(this.updateMaxLogNumber(),this.limitMaxLogs())}},{key:"updateMaxLogNumber",value:function(){this.maxLogNumber=this.vConsole.option.maxLogNumber||b,this.maxLogNumber=Math.max(1,this.maxLogNumber)}},{key:"limitMaxLogs",value:function(){if(this.isReady)for(;this.logNumber>this.maxLogNumber;){var e=r.default.one(".vc-item",this.$tabbox);if(!e)break;e.parentNode.removeChild(e),this.logNumber--}}},{key:"showLogType",value:function(e){var t=r.default.one(".vc-log",this.$tabbox);r.default.removeClass(t,"vc-log-partly-log"),r.default.removeClass(t,"vc-log-partly-info"),r.default.removeClass(t,"vc-log-partly-warn"),r.default.removeClass(t,"vc-log-partly-error"),"all"==e?r.default.removeClass(t,"vc-log-partly"):(r.default.addClass(t,"vc-log-partly"),r.default.addClass(t,"vc-log-partly-"+e))}},{key:"autoScrollToBottom",value:function(){this.vConsole.option.disableLogScrolling||this.scrollToBottom()}},{key:"scrollToBottom",value:function(){var e=r.default.one(".vc-content");e&&(e.scrollTop=e.scrollHeight-e.offsetHeight)}},{key:"mockConsole",value:function(){var e=this,t=this,o=["log","info","warn","debug","error"];window.console?(o.map(function(e){t.console[e]=window.console[e]}),t.console.time=window.console.time,t.console.timeEnd=window.console.timeEnd,t.console.clear=window.console.clear):window.console={},o.map(function(t){window.console[t]=function(){for(var o=arguments.length,n=new Array(o),r=0;r<o;r++)n[r]=arguments[r];e.printLog({logType:t,logs:n})}});var n={};window.console.time=function(e){n[e]=Date.now()},window.console.timeEnd=function(e){var t=n[e];t?(console.log(e+":",Date.now()-t+"ms"),delete n[e]):console.log(e+": 0ms")},window.console.clear=function(){t.clearLog();for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];t.console.clear.apply(window.console,o)}}},{key:"clearLog",value:function(){r.default.one(".vc-log",this.$tabbox).innerHTML="",this.logNumber=0,g={}}},{key:"printOriginLog",value:function(e){"function"==typeof this.console[e.logType]&&this.console[e.logType].apply(window.console,e.logs)}},{key:"printLog",value:function(e){var t=e.logs||[];if(t.length||e.content){t=[].slice.call(t||[]);var o=/^\[(\w+)\]$/i,r="",i=!1;if(n.isString(t[0])){var a=t[0].match(o);null!==a&&a.length>0&&(r=a[1].toLowerCase(),i=h.indexOf(r)>-1)}if(r===this.id||!0!==i&&"default"===this.id)if(e._id||(e._id="__vc_"+Math.random().toString(36).substring(2,8)),e.date||(e.date=+new Date),this.isReady){n.isString(t[0])&&i&&(t[0]=t[0].replace(o,""),""===t[0]&&t.shift());for(var l={_id:e._id,logType:e.logType,logText:[],hasContent:!!e.content,count:1},c=0;c<t.length;c++)n.isFunction(t[c])?l.logText.push(t[c].toString()):n.isObject(t[c])||n.isArray(t[c])?l.logText.push(n.JSONStringify(t[c])):l.logText.push(t[c]);l.logText=l.logText.join(" "),l.hasContent||g.logType!==l.logType||g.logText!==l.logText?(this.printNewLog(e,t),g=l):this.printRepeatLog(),this.isInBottom&&this.autoScrollToBottom(),e.noOrigin||this.printOriginLog(e)}else this.logList.push(e);else e.noOrigin||this.printOriginLog(e)}}},{key:"printRepeatLog",value:function(){var e=r.default.one("#"+g._id),t=r.default.one(".vc-item-repeat",e);t||((t=document.createElement("i")).className="vc-item-repeat",e.insertBefore(t,e.lastChild)),g.count,g.count++,t.innerHTML=g.count}},{key:"printNewLog",value:function(e,t){for(var o=r.default.render(a.default,{_id:e._id,logType:e.logType,style:e.style||""}),i=r.default.one(".vc-item-content",o),l=0;l<t.length;l++){var c=void 0;try{if(""===t[l])continue;c=n.isFunction(t[l])?"<span> "+t[l].toString()+"</span>":n.isObject(t[l])||n.isArray(t[l])?this.getFoldedLine(t[l]):"<span> "+n.htmlEncode(t[l]).replace(/\n/g,"<br/>")+"</span>"}catch(e){c="<span> ["+d(t[l])+"]</span>"}c&&("string"==typeof c?i.insertAdjacentHTML("beforeend",c):i.insertAdjacentElement("beforeend",c))}n.isObject(e.content)&&i.insertAdjacentElement("beforeend",e.content),r.default.one(".vc-log",this.$tabbox).insertAdjacentElement("beforeend",o),this.logNumber++,this.limitMaxLogs()}},{key:"getFoldedLine",value:function(e,t){var o=this;if(!t){var i=n.JSONStringify(e),a=i.substr(0,36);t=n.getObjName(e),i.length>36&&(a+="..."),t+=" "+a}var s=r.default.render(l.default,{outer:t,lineType:"obj"});return r.default.bind(r.default.one(".vc-fold-outer",s),"click",function(t){t.preventDefault(),t.stopPropagation(),r.default.hasClass(s,"vc-toggle")?(r.default.removeClass(s,"vc-toggle"),r.default.removeClass(r.default.one(".vc-fold-inner",s),"vc-toggle"),r.default.removeClass(r.default.one(".vc-fold-outer",s),"vc-toggle")):(r.default.addClass(s,"vc-toggle"),r.default.addClass(r.default.one(".vc-fold-inner",s),"vc-toggle"),r.default.addClass(r.default.one(".vc-fold-outer",s),"vc-toggle"));var i=r.default.one(".vc-fold-inner",s);return setTimeout(function(){if(0==i.children.length&&e){for(var t=n.getObjAllKeys(e),a=0;a<t.length;a++){var s=void 0,d="undefined",u="";try{s=e[t[a]]}catch(e){continue}n.isString(s)?(d="string",s='"'+s+'"'):n.isNumber(s)?d="number":n.isBoolean(s)?d="boolean":n.isNull(s)?(d="null",s="null"):n.isUndefined(s)?(d="undefined",s="undefined"):n.isFunction(s)?(d="function",s="function()"):n.isSymbol(s)&&(d="symbol");var f=void 0;if(n.isArray(s)){var v=n.getObjName(s)+"["+s.length+"]";f=o.getFoldedLine(s,r.default.render(c.default,{key:t[a],keyType:u,value:v,valueType:"array"},!0))}else if(n.isObject(s)){var p=n.getObjName(s);f=o.getFoldedLine(s,r.default.render(c.default,{key:n.htmlEncode(t[a]),keyType:u,value:p,valueType:"object"},!0))}else{e.hasOwnProperty&&!e.hasOwnProperty(t[a])&&(u="private");var b={lineType:"kv",key:n.htmlEncode(t[a]),keyType:u,value:n.htmlEncode(s),valueType:d};f=r.default.render(l.default,b)}i.insertAdjacentElement("beforeend",f)}if(n.isObject(e)){var h,g=e.__proto__;h=n.isObject(g)?o.getFoldedLine(g,r.default.render(c.default,{key:"__proto__",keyType:"private",value:n.getObjName(g),valueType:"object"},!0)):r.default.render(c.default,{key:"__proto__",keyType:"private",value:"null",valueType:"null"}),i.insertAdjacentElement("beforeend",h)}}}),!1}),s}}])&&u(o.prototype,i),s&&u(o,s),t;var o,i,s}(i.default);m.AddedLogID=[];var y=m;o.default=y,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n,r,i;r=[t,o(7),o(8),o(2)],void 0===(i="function"==typeof(n=function(o,n,r,i){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,r=a(r),i=a(i),r.default.VConsolePlugin=i.default;var l=r.default;o.default=l,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n,r,i;r=[],void 0===(i="function"==typeof(n=function(){"use strict";if("undefined"==typeof Symbol){window.Symbol=function(){};var e="__symbol_iterator_key";window.Symbol.iterator=e,Array.prototype[e]=function(){var e=this,t=0;return{next:function(){return{done:e.length===t,value:e.length===t?void 0:e[t++]}}}}}})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n,r,i;r=[t,o(9),o(0),o(1),o(11),o(14),o(15),o(16),o(17),o(18),o(19),o(25),o(27),o(31),o(38)],void 0===(i="function"==typeof(n=function(o,n,r,i,a,l,c,s,d,u,f,v,p,b,h){"use strict";function g(e){return e&&e.__esModule?e:{default:e}}function m(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=g(n),r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(r),i=g(i),l=g(l),c=g(c),s=g(s),d=g(d),u=g(u),f=g(f),v=g(v),p=g(p),b=g(b),h=g(h);var y="#__vconsole",_=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i.default.one(y))console.debug("vConsole is already exists.");else{var o=this;if(this.version=n.default.version,this.$dom=null,this.isInited=!1,this.option={defaultPlugins:["system","network","element","storage"]},this.activedTab="",this.tabList=[],this.pluginList={},this.switchPos={x:10,y:10,startX:0,startY:0,endX:0,endY:0},this.tool=r,this.$=i.default,r.isObject(t))for(var a in t)this.option[a]=t[a];this._addBuiltInPlugins();var l,c=function(){o.isInited||(o._render(),o._mockTap(),o._bindEvent(),o._autoRun())};if(void 0!==document)"complete"==document.readyState?c():i.default.bind(window,"load",c);else l=setTimeout(function e(){document&&"complete"==document.readyState?(l&&clearTimeout(l),c()):l=setTimeout(e,1)},1)}}return t=e,(o=[{key:"_addBuiltInPlugins",value:function(){this.addPlugin(new f.default("default","Log"));var e=this.option.defaultPlugins,t={system:{proto:v.default,name:"System"},network:{proto:p.default,name:"Network"},element:{proto:b.default,name:"Element"},storage:{proto:h.default,name:"Storage"}};if(e&&r.isArray(e))for(var o=0;o<e.length;o++){var n=t[e[o]];n?this.addPlugin(new n.proto(e[o],n.name)):console.debug("Unrecognized default plugin ID:",e[o])}}},{key:"_render",value:function(){if(!i.default.one(y)){var e=document.createElement("div");e.innerHTML=l.default,document.documentElement.insertAdjacentElement("beforeend",e.children[0])}this.$dom=i.default.one(y);var t=i.default.one(".vc-switch",this.$dom),o=1*r.getStorage("switch_x"),n=1*r.getStorage("switch_y");(o||n)&&(o+t.offsetWidth>document.documentElement.offsetWidth&&(o=document.documentElement.offsetWidth-t.offsetWidth),n+t.offsetHeight>document.documentElement.offsetHeight&&(n=document.documentElement.offsetHeight-t.offsetHeight),o<0&&(o=0),n<0&&(n=0),this.switchPos.x=o,this.switchPos.y=n,i.default.one(".vc-switch").style.right=o+"px",i.default.one(".vc-switch").style.bottom=n+"px");var a=window.devicePixelRatio||1,c=document.querySelector('[name="viewport"]');if(c&&c.content){var s=c.content.match(/initial\-scale\=\d+(\.\d+)?/),d=s?parseFloat(s[0].split("=")[1]):1;d<1&&(this.$dom.style.fontSize=13*a+"px")}i.default.one(".vc-mask",this.$dom).style.display="none"}},{key:"_mockTap",value:function(){var e,t,o,n=!1,r=null;this.$dom.addEventListener("touchstart",function(n){if(void 0===e){var i=n.targetTouches[0];t=i.pageX,o=i.pageY,e=n.timeStamp,r=n.target.nodeType===Node.TEXT_NODE?n.target.parentNode:n.target}},!1),this.$dom.addEventListener("touchmove",function(e){var r=e.changedTouches[0];(Math.abs(r.pageX-t)>10||Math.abs(r.pageY-o)>10)&&(n=!0)}),this.$dom.addEventListener("touchend",function(t){if(!1===n&&t.timeStamp-e<700&&null!=r){var o=r.tagName.toLowerCase(),i=!1;switch(o){case"textarea":i=!0;break;case"input":switch(r.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":i=!1;break;default:i=!r.disabled&&!r.readOnly}}i?r.focus():t.preventDefault();var a=t.changedTouches[0],l=document.createEvent("MouseEvents");l.initMouseEvent("click",!0,!0,window,1,a.screenX,a.screenY,a.clientX,a.clientY,!1,!1,!1,!1,0,null),l.forwardedTouchEvent=!0,l.initEvent("click",!0,!0),r.dispatchEvent(l)}e=void 0,n=!1,r=null},!1)}},{key:"_bindEvent",value:function(){var e=this,t=i.default.one(".vc-switch",e.$dom);i.default.bind(t,"touchstart",function(t){e.switchPos.startX=t.touches[0].pageX,e.switchPos.startY=t.touches[0].pageY}),i.default.bind(t,"touchend",function(t){e.switchPos.x=e.switchPos.endX,e.switchPos.y=e.switchPos.endY,e.switchPos.startX=0,e.switchPos.startY=0,e.switchPos.endX=0,e.switchPos.endY=0,r.setStorage("switch_x",e.switchPos.x),r.setStorage("switch_y",e.switchPos.y)}),i.default.bind(t,"touchmove",function(o){if(o.touches.length>0){var n=o.touches[0].pageX-e.switchPos.startX,r=o.touches[0].pageY-e.switchPos.startY,i=e.switchPos.x-n,a=e.switchPos.y-r;i+t.offsetWidth>document.documentElement.offsetWidth&&(i=document.documentElement.offsetWidth-t.offsetWidth),a+t.offsetHeight>document.documentElement.offsetHeight&&(a=document.documentElement.offsetHeight-t.offsetHeight),i<0&&(i=0),a<0&&(a=0),t.style.right=i+"px",t.style.bottom=a+"px",e.switchPos.endX=i,e.switchPos.endY=a,o.preventDefault()}}),i.default.bind(i.default.one(".vc-switch",e.$dom),"click",function(){e.show()}),i.default.bind(i.default.one(".vc-hide",e.$dom),"click",function(){e.hide()}),i.default.bind(i.default.one(".vc-mask",e.$dom),"click",function(t){if(t.target!=i.default.one(".vc-mask"))return!1;e.hide()}),i.default.delegate(i.default.one(".vc-tabbar",e.$dom),"click",".vc-tab",function(t){var o=this.dataset.tab;o!=e.activedTab&&e.showTab(o)}),i.default.bind(i.default.one(".vc-panel",e.$dom),"transitionend webkitTransitionEnd oTransitionEnd otransitionend",function(t){if(t.target!=i.default.one(".vc-panel"))return!1;i.default.hasClass(e.$dom,"vc-toggle")||(t.target.style.display="none")});var o=i.default.one(".vc-content",e.$dom),n=!1;i.default.bind(o,"touchstart",function(e){var t=o.scrollTop,r=o.scrollHeight,a=t+o.offsetHeight;0===t?(o.scrollTop=1,0===o.scrollTop&&(i.default.hasClass(e.target,"vc-cmd-input")||(n=!0))):a===r&&(o.scrollTop=t-1,o.scrollTop===t&&(i.default.hasClass(e.target,"vc-cmd-input")||(n=!0)))}),i.default.bind(o,"touchmove",function(e){n&&e.preventDefault()}),i.default.bind(o,"touchend",function(e){n=!1})}},{key:"_autoRun",value:function(){for(var e in this.isInited=!0,this.pluginList)this._initPlugin(this.pluginList[e]);this.tabList.length>0&&this.showTab(this.tabList[0]),this.triggerEvent("ready")}},{key:"triggerEvent",value:function(e,t){e="on"+e.charAt(0).toUpperCase()+e.slice(1),r.isFunction(this.option[e])&&this.option[e].apply(this,t)}},{key:"_initPlugin",value:function(e){var t=this;e.vConsole=this,e.trigger("init"),e.trigger("renderTab",function(o){t.tabList.push(e.id);var n=i.default.render(c.default,{id:e.id,name:e.name});i.default.one(".vc-tabbar",t.$dom).insertAdjacentElement("beforeend",n);var a=i.default.render(s.default,{id:e.id});o&&(r.isString(o)?a.innerHTML+=o:r.isFunction(o.appendTo)?o.appendTo(a):r.isElement(o)&&a.insertAdjacentElement("beforeend",o)),i.default.one(".vc-content",t.$dom).insertAdjacentElement("beforeend",a)}),e.trigger("addTopBar",function(o){if(o)for(var n=i.default.one(".vc-topbar",t.$dom),a=function(t){var a=o[t],l=i.default.render(d.default,{name:a.name||"Undefined",className:a.className||"",pluginID:e.id});if(a.data)for(var c in a.data)l.dataset[c]=a.data[c];r.isFunction(a.onClick)&&i.default.bind(l,"click",function(t){var o=a.onClick.call(l);!1===o||(i.default.removeClass(i.default.all(".vc-topbar-"+e.id),"vc-actived"),i.default.addClass(l,"vc-actived"))}),n.insertAdjacentElement("beforeend",l)},l=0;l<o.length;l++)a(l)}),e.trigger("addTool",function(o){if(o)for(var n=i.default.one(".vc-tool-last",t.$dom),a=function(t){var a=o[t],l=i.default.render(u.default,{name:a.name||"Undefined",pluginID:e.id});1==a.global&&i.default.addClass(l,"vc-global-tool"),r.isFunction(a.onClick)&&i.default.bind(l,"click",function(e){a.onClick.call(l)}),n.parentNode.insertBefore(l,n)},l=0;l<o.length;l++)a(l)}),e.isReady=!0,e.trigger("ready")}},{key:"_triggerPluginsEvent",value:function(e){for(var t in this.pluginList)this.pluginList[t].isReady&&this.pluginList[t].trigger(e)}},{key:"_triggerPluginEvent",value:function(e,t){var o=this.pluginList[e];o&&o.isReady&&o.trigger(t)}},{key:"addPlugin",value:function(e){return void 0!==this.pluginList[e.id]?(console.debug("Plugin "+e.id+" has already been added."),!1):(this.pluginList[e.id]=e,this.isInited&&(this._initPlugin(e),1==this.tabList.length&&this.showTab(this.tabList[0])),!0)}},{key:"removePlugin",value:function(e){e=(e+"").toLowerCase();var t=this.pluginList[e];if(void 0===t)return console.debug("Plugin "+e+" does not exist."),!1;if(t.trigger("remove"),this.isInited){var o=i.default.one("#__vc_tab_"+e);o&&o.parentNode.removeChild(o);for(var n=i.default.all(".vc-topbar-"+e,this.$dom),r=0;r<n.length;r++)n[r].parentNode.removeChild(n[r]);var a=i.default.one("#__vc_log_"+e);a&&a.parentNode.removeChild(a);for(var l=i.default.all(".vc-tool-"+e,this.$dom),c=0;c<l.length;c++)l[c].parentNode.removeChild(l[c])}var s=this.tabList.indexOf(e);s>-1&&this.tabList.splice(s,1);try{delete this.pluginList[e]}catch(t){this.pluginList[e]=void 0}return this.activedTab==e&&this.tabList.length>0&&this.showTab(this.tabList[0]),!0}},{key:"show",value:function(){if(this.isInited){var e=this,t=i.default.one(".vc-panel",this.$dom);t.style.display="block",setTimeout(function(){i.default.addClass(e.$dom,"vc-toggle"),e._triggerPluginsEvent("showConsole");var t=i.default.one(".vc-mask",e.$dom);t.style.display="block"},10)}}},{key:"hide",value:function(){if(this.isInited){i.default.removeClass(this.$dom,"vc-toggle"),this._triggerPluginsEvent("hideConsole");var e=i.default.one(".vc-mask",this.$dom),t=i.default.one(".vc-panel",this.$dom);i.default.bind(e,"transitionend",function(o){e.style.display="none",t.style.display="none"})}}},{key:"showSwitch",value:function(){if(this.isInited){var e=i.default.one(".vc-switch",this.$dom);e.style.display="block"}}},{key:"hideSwitch",value:function(){if(this.isInited){var e=i.default.one(".vc-switch",this.$dom);e.style.display="none"}}},{key:"showTab",value:function(e){if(this.isInited){var t=i.default.one("#__vc_log_"+e);i.default.removeClass(i.default.all(".vc-tab",this.$dom),"vc-actived"),i.default.addClass(i.default.one("#__vc_tab_"+e),"vc-actived"),i.default.removeClass(i.default.all(".vc-logbox",this.$dom),"vc-actived"),i.default.addClass(t,"vc-actived");var o=i.default.all(".vc-topbar-"+e,this.$dom);i.default.removeClass(i.default.all(".vc-toptab",this.$dom),"vc-toggle"),i.default.addClass(o,"vc-toggle"),o.length>0?i.default.addClass(i.default.one(".vc-content",this.$dom),"vc-has-topbar"):i.default.removeClass(i.default.one(".vc-content",this.$dom),"vc-has-topbar"),i.default.removeClass(i.default.all(".vc-tool",this.$dom),"vc-toggle"),i.default.addClass(i.default.all(".vc-tool-"+e,this.$dom),"vc-toggle"),this.activedTab&&this._triggerPluginEvent(this.activedTab,"hide"),this.activedTab=e,this._triggerPluginEvent(this.activedTab,"show")}}},{key:"setOption",value:function(e,t){if(r.isString(e))this.option[e]=t,this._triggerPluginsEvent("updateOption");else if(r.isObject(e)){for(var o in e)this.option[o]=e[o];this._triggerPluginsEvent("updateOption")}else console.debug("The first parameter of vConsole.setOption() must be a string or an object.")}},{key:"destroy",value:function(){if(this.isInited){for(var e=Object.keys(this.pluginList),t=e.length-1;t>=0;t--)this.removePlugin(e[t]);this.$dom.parentNode.removeChild(this.$dom)}}}])&&m(t.prototype,o),a&&m(t,a),e;var t,o,a}();o.default=_,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e){e.exports={name:"vconsole",version:"3.3.0",description:"A lightweight, extendable front-end developer tool for mobile web page.",homepage:"https://github.com/Tencent/vConsole",main:"dist/vconsole.min.js",scripts:{test:"mocha",dist:"webpack"},keywords:["console","debug","mobile"],repository:{type:"git",url:"git+https://github.com/Tencent/vConsole.git"},dependencies:{},devDependencies:{"@babel/core":"^7.2.2","@babel/plugin-proposal-class-properties":"^7.3.0","@babel/plugin-proposal-export-namespace-from":"^7.2.0","@babel/plugin-proposal-object-rest-spread":"^7.3.1","@babel/preset-env":"^7.3.1","babel-loader":"^8.0.4","babel-plugin-add-module-exports":"^1.0.0",chai:"^4.2.0","css-loader":"^2.1.0","html-loader":"^0.5.5",jsdom:"^13.2.0","json-loader":"^0.5.7",less:"^3.9.0","less-loader":"^4.1.0",mocha:"^5.2.0","style-loader":"^0.23.1",webpack:"^4.29.0","webpack-cli":"^3.2.1"},author:"Tencent",license:"MIT"}},function(e,t,o){var n,r,i;r=[t],void 0===(i="function"==typeof(n=function(o){"use strict";Object.defineProperty(o,"__esModule",{value:!0}),o.default=function(e,t,o){var n=/\{\{([^\}]+)\}\}/g,r="",i="",a=0,l=[],c=function(e,t){""!==e&&(t?e.match(/^ ?else/g)?r+="} "+e+" {\n":e.match(/\/(if|for|switch)/g)?r+="}\n":e.match(/^ ?if|for|switch/g)?r+=e+" {\n":e.match(/^ ?(break|continue) ?$/g)?r+=e+";\n":e.match(/^ ?(case|default)/g)?r+=e+":\n":r+="arr.push("+e+");\n":r+='arr.push("'+e.replace(/"/g,'\\"')+'");\n')};for(window.__mito_data=t,window.__mito_code="",window.__mito_result="",e=(e=e.replace(/(\{\{ ?switch(.+?)\}\})[\r\n\t ]+\{\{/g,"$1{{")).replace(/^[\r\n]/,"").replace(/\n/g,"\\\n").replace(/\r/g,"\\\r"),i="(function(){\n",r="var arr = [];\n";l=n.exec(e);)c(e.slice(a,l.index),!1),c(l[1],!0),a=l.index+l[0].length;c(e.substr(a,e.length-a),!1),i+=r="with (__mito_data) {\n"+(r+='__mito_result = arr.join("");')+"\n}",i+="})();";var s=document.getElementsByTagName("script"),d="";s.length>0&&(d=s[0].nonce||"");var u=document.createElement("SCRIPT");u.innerHTML=i,u.setAttribute("nonce",d),document.documentElement.appendChild(u);var f=__mito_result;if(document.documentElement.removeChild(u),!o){var v=document.createElement("DIV");v.innerHTML=f,f=v.children[0]}return f},e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n=o(12);"string"==typeof n&&(n=[[e.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};o(4)(n,r);n.locals&&(e.exports=n.locals)},function(e,t,o){(e.exports=o(3)(!1)).push([e.i,'#__vconsole {\n  color: #000;\n  font-size: 13px;\n  font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\n  /* global */\n  /* compoment */\n}\n#__vconsole .vc-max-height {\n  max-height: 19.23076923em;\n}\n#__vconsole .vc-max-height-line {\n  max-height: 3.38461538em;\n}\n#__vconsole .vc-min-height {\n  min-height: 3.07692308em;\n}\n#__vconsole dd,\n#__vconsole dl,\n#__vconsole pre {\n  margin: 0;\n}\n#__vconsole .vc-switch {\n  display: block;\n  position: fixed;\n  right: 0.76923077em;\n  bottom: 0.76923077em;\n  color: #FFF;\n  background-color: #04BE02;\n  line-height: 1;\n  font-size: 1.07692308em;\n  padding: 0.61538462em 1.23076923em;\n  z-index: 10000;\n  border-radius: 0.30769231em;\n  box-shadow: 0 0 0.61538462em rgba(0, 0, 0, 0.4);\n}\n#__vconsole .vc-mask {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0);\n  z-index: 10001;\n  transition: background 0.3s;\n  -webkit-tap-highlight-color: transparent;\n  overflow-y: scroll;\n}\n#__vconsole .vc-panel {\n  display: none;\n  position: fixed;\n  min-height: 85%;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 10002;\n  background-color: #EFEFF4;\n  -webkit-transition: -webkit-transform 0.3s;\n  transition: -webkit-transform 0.3s;\n  transition: transform 0.3s;\n  transition: transform 0.3s, -webkit-transform 0.3s;\n  -webkit-transform: translate(0, 100%);\n  transform: translate(0, 100%);\n}\n#__vconsole .vc-tabbar {\n  border-bottom: 1px solid #D9D9D9;\n  overflow-x: auto;\n  height: 3em;\n  width: auto;\n  white-space: nowrap;\n}\n#__vconsole .vc-tabbar .vc-tab {\n  display: inline-block;\n  line-height: 3em;\n  padding: 0 1.15384615em;\n  border-right: 1px solid #D9D9D9;\n  text-decoration: none;\n  color: #000;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n#__vconsole .vc-tabbar .vc-tab:active {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n#__vconsole .vc-tabbar .vc-tab.vc-actived {\n  background-color: #FFF;\n}\n#__vconsole .vc-content {\n  background-color: #FFF;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: absolute;\n  top: 3.07692308em;\n  left: 0;\n  right: 0;\n  bottom: 3.07692308em;\n  -webkit-overflow-scrolling: touch;\n  margin-bottom: constant(safe-area-inset-bottom);\n  margin-bottom: env(safe-area-inset-bottom);\n}\n#__vconsole .vc-content.vc-has-topbar {\n  top: 5.46153846em;\n}\n#__vconsole .vc-topbar {\n  background-color: #FBF9FE;\n  display: flex;\n  display: -webkit-box;\n  flex-direction: row;\n  flex-wrap: wrap;\n  -webkit-box-direction: row;\n  -webkit-flex-wrap: wrap;\n  width: 100%;\n}\n#__vconsole .vc-topbar .vc-toptab {\n  display: none;\n  flex: 1;\n  -webkit-box-flex: 1;\n  line-height: 2.30769231em;\n  padding: 0 1.15384615em;\n  border-bottom: 1px solid #D9D9D9;\n  text-decoration: none;\n  text-align: center;\n  color: #000;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-touch-callout: none;\n}\n#__vconsole .vc-topbar .vc-toptab.vc-toggle {\n  display: block;\n}\n#__vconsole .vc-topbar .vc-toptab:active {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n#__vconsole .vc-topbar .vc-toptab.vc-actived {\n  border-bottom: 1px solid #3e82f7;\n}\n#__vconsole .vc-logbox {\n  display: none;\n  position: relative;\n  min-height: 100%;\n}\n#__vconsole .vc-logbox i {\n  font-style: normal;\n}\n#__vconsole .vc-logbox .vc-log {\n  padding-bottom: 3em;\n  -webkit-tap-highlight-color: transparent;\n}\n#__vconsole .vc-logbox .vc-log:empty:before {\n  content: "Empty";\n  color: #999;\n  position: absolute;\n  top: 45%;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  font-size: 1.15384615em;\n  text-align: center;\n}\n#__vconsole .vc-logbox .vc-item {\n  margin: 0;\n  padding: 0.46153846em 0.61538462em;\n  overflow: hidden;\n  line-height: 1.3;\n  border-bottom: 1px solid #EEE;\n  word-break: break-word;\n}\n#__vconsole .vc-logbox .vc-item-info {\n  color: #6A5ACD;\n}\n#__vconsole .vc-logbox .vc-item-debug {\n  color: #DAA520;\n}\n#__vconsole .vc-logbox .vc-item-warn {\n  color: #FFA500;\n  border-color: #FFB930;\n  background-color: #FFFACD;\n}\n#__vconsole .vc-logbox .vc-item-error {\n  color: #DC143C;\n  border-color: #F4A0AB;\n  background-color: #FFE4E1;\n}\n#__vconsole .vc-logbox .vc-log.vc-log-partly .vc-item {\n  display: none;\n}\n#__vconsole .vc-logbox .vc-log.vc-log-partly-log .vc-item-log,\n#__vconsole .vc-logbox .vc-log.vc-log-partly-info .vc-item-info,\n#__vconsole .vc-logbox .vc-log.vc-log-partly-warn .vc-item-warn,\n#__vconsole .vc-logbox .vc-log.vc-log-partly-error .vc-item-error {\n  display: block;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-content {\n  margin-right: 4.61538462em;\n  display: inline-block;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-repeat {\n  display: inline-block;\n  margin-right: 0.30769231em;\n  padding: 0 6.5px;\n  color: #D7E0EF;\n  background-color: #42597F;\n  border-radius: 8.66666667px;\n}\n#__vconsole .vc-logbox .vc-item.vc-item-error .vc-item-repeat {\n  color: #901818;\n  background-color: #DC2727;\n}\n#__vconsole .vc-logbox .vc-item.vc-item-warn .vc-item-repeat {\n  color: #987D20;\n  background-color: #F4BD02;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-code {\n  display: block;\n  white-space: pre-wrap;\n  overflow: auto;\n  position: relative;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-input,\n#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output {\n  padding-left: 0.92307692em;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-input:before,\n#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output:before {\n  content: "›";\n  position: absolute;\n  top: -0.23076923em;\n  left: 0;\n  font-size: 1.23076923em;\n  color: #6A5ACD;\n}\n#__vconsole .vc-logbox .vc-item .vc-item-code.vc-item-code-output:before {\n  content: "‹";\n}\n#__vconsole .vc-logbox .vc-item .vc-fold {\n  display: block;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer {\n  display: block;\n  font-style: italic;\n  padding-left: 0.76923077em;\n  position: relative;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer:active {\n  background-color: #E6E6E6;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer:before {\n  content: "";\n  position: absolute;\n  top: 0.30769231em;\n  left: 0.15384615em;\n  width: 0;\n  height: 0;\n  border: transparent solid 0.30769231em;\n  border-left-color: #000;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer.vc-toggle:before {\n  top: 0.46153846em;\n  left: 0;\n  border-top-color: #000;\n  border-left-color: transparent;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner {\n  display: none;\n  margin-left: 0.76923077em;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner.vc-toggle {\n  display: block;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-inner .vc-code-key {\n  margin-left: 0.76923077em;\n}\n#__vconsole .vc-logbox .vc-item .vc-fold .vc-fold-outer .vc-code-key {\n  margin-left: 0;\n}\n#__vconsole .vc-logbox .vc-code-key {\n  color: #905;\n}\n#__vconsole .vc-logbox .vc-code-private-key {\n  color: #D391B5;\n}\n#__vconsole .vc-logbox .vc-code-function {\n  color: #905;\n  font-style: italic;\n}\n#__vconsole .vc-logbox .vc-code-number,\n#__vconsole .vc-logbox .vc-code-boolean {\n  color: #0086B3;\n}\n#__vconsole .vc-logbox .vc-code-string {\n  color: #183691;\n}\n#__vconsole .vc-logbox .vc-code-null,\n#__vconsole .vc-logbox .vc-code-undefined {\n  color: #666;\n}\n#__vconsole .vc-logbox .vc-cmd {\n  position: absolute;\n  height: 3.07692308em;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-top: 1px solid #D9D9D9;\n  display: block!important;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-input-wrap {\n  display: block;\n  height: 2.15384615em;\n  margin-right: 3.07692308em;\n  padding: 0.46153846em 0.61538462em;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-input {\n  width: 100%;\n  border: none;\n  resize: none;\n  outline: none;\n  padding: 0;\n  font-size: 0.92307692em;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-input::-webkit-input-placeholder {\n  line-height: 2.15384615em;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-btn {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 3.07692308em;\n  border: none;\n  background-color: #EFEFF4;\n  outline: none;\n  -webkit-touch-callout: none;\n  font-size: 1em;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-btn:active {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-prompted {\n  position: fixed;\n  width: 100%;\n  background-color: #FBF9FE;\n  border: 1px solid #D9D9D9;\n  overflow-x: scroll;\n  display: none;\n}\n#__vconsole .vc-logbox .vc-cmd .vc-cmd-prompted li {\n  list-style: none;\n  line-height: 30px;\n  padding: 0 0.46153846em;\n  border-bottom: 1px solid #D9D9D9;\n}\n#__vconsole .vc-logbox .vc-group .vc-group-preview {\n  -webkit-touch-callout: none;\n}\n#__vconsole .vc-logbox .vc-group .vc-group-preview:active {\n  background-color: #E6E6E6;\n}\n#__vconsole .vc-logbox .vc-group .vc-group-detail {\n  display: none;\n  padding: 0 0 0.76923077em 1.53846154em;\n  border-bottom: 1px solid #EEE;\n}\n#__vconsole .vc-logbox .vc-group.vc-actived .vc-group-detail {\n  display: block;\n  background-color: #FBF9FE;\n}\n#__vconsole .vc-logbox .vc-group.vc-actived .vc-table-row {\n  background-color: #FFF;\n}\n#__vconsole .vc-logbox .vc-group.vc-actived .vc-group-preview {\n  background-color: #FBF9FE;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-row {\n  display: flex;\n  display: -webkit-flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  -webkit-box-direction: row;\n  -webkit-flex-wrap: wrap;\n  overflow: hidden;\n  border-bottom: 1px solid #EEE;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-row.vc-left-border {\n  border-left: 1px solid #EEE;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col {\n  flex: 1;\n  -webkit-box-flex: 1;\n  padding: 0.23076923em 0.30769231em;\n  border-left: 1px solid #EEE;\n  overflow: auto;\n  white-space: pre-wrap;\n  word-break: break-word;\n  /*white-space: nowrap;\n        text-overflow: ellipsis;*/\n  -webkit-overflow-scrolling: touch;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col:first-child {\n  border: none;\n}\n#__vconsole .vc-logbox .vc-table .vc-small .vc-table-col {\n  padding: 0 0.30769231em;\n  font-size: 0.92307692em;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-2 {\n  flex: 2;\n  -webkit-box-flex: 2;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-3 {\n  flex: 3;\n  -webkit-box-flex: 3;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-4 {\n  flex: 4;\n  -webkit-box-flex: 4;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-5 {\n  flex: 5;\n  -webkit-box-flex: 5;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-6 {\n  flex: 6;\n  -webkit-box-flex: 6;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-row-error {\n  border-color: #F4A0AB;\n  background-color: #FFE4E1;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-row-error .vc-table-col {\n  color: #DC143C;\n  border-color: #F4A0AB;\n}\n#__vconsole .vc-logbox .vc-table .vc-table-col-title {\n  font-weight: bold;\n}\n#__vconsole .vc-logbox.vc-actived {\n  display: block;\n}\n#__vconsole .vc-toolbar {\n  border-top: 1px solid #D9D9D9;\n  line-height: 3em;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  display: -webkit-box;\n  flex-direction: row;\n  -webkit-box-direction: row;\n}\n#__vconsole .vc-toolbar .vc-tool {\n  display: none;\n  text-decoration: none;\n  color: #000;\n  width: 50%;\n  flex: 1;\n  -webkit-box-flex: 1;\n  text-align: center;\n  position: relative;\n  -webkit-touch-callout: none;\n}\n#__vconsole .vc-toolbar .vc-tool.vc-toggle,\n#__vconsole .vc-toolbar .vc-tool.vc-global-tool {\n  display: block;\n}\n#__vconsole .vc-toolbar .vc-tool:active {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n#__vconsole .vc-toolbar .vc-tool:after {\n  content: " ";\n  position: absolute;\n  top: 0.53846154em;\n  bottom: 0.53846154em;\n  right: 0;\n  border-left: 1px solid #D9D9D9;\n}\n#__vconsole .vc-toolbar .vc-tool-last:after {\n  border: none;\n}\n@supports (bottom: constant(safe-area-inset-bottom)) or (bottom: env(safe-area-inset-bottom)) {\n  #__vconsole .vc-toolbar,\n  #__vconsole .vc-switch {\n    bottom: constant(safe-area-inset-bottom);\n    bottom: env(safe-area-inset-bottom);\n  }\n}\n#__vconsole.vc-toggle .vc-switch {\n  display: none;\n}\n#__vconsole.vc-toggle .vc-mask {\n  background: rgba(0, 0, 0, 0.6);\n  display: block;\n}\n#__vconsole.vc-toggle .vc-panel {\n  -webkit-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n',""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=t.protocol+"//"+t.host,n=o+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?o+i:n+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t){e.exports='<div id="__vconsole" class="">\n  <div class="vc-switch">vConsole</div>\n  <div class="vc-mask">\n  </div>\n  <div class="vc-panel">\n    <div class="vc-tabbar">\n    </div>\n    <div class="vc-topbar">\n    </div>\n    <div class="vc-content">\n    </div>\n    <div class="vc-toolbar">\n      <a class="vc-tool vc-global-tool vc-tool-last vc-hide">Hide</a>\n    </div>\n  </div>\n</div>'},function(e,t){e.exports='<a class="vc-tab" data-tab="{{id}}" id="__vc_tab_{{id}}">{{name}}</a>'},function(e,t){e.exports='<div class="vc-logbox" id="__vc_log_{{id}}">\n  \n</div>'},function(e,t){e.exports='<a class="vc-toptab vc-topbar-{{pluginID}}{{if (className)}} {{className}}{{/if}}">{{name}}</a>'},function(e,t){e.exports='<a class="vc-tool vc-tool-{{pluginID}}">{{name}}</a>'},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,factory;factory=function(_exports,_query,tool,_log,_tabbox_default,_item_code){"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,o){return t&&_defineProperties(e.prototype,t),o&&_defineProperties(e,o),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _get(e,t,o){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,o){var n=_superPropBase(e,t);if(n){var r=Object.getOwnPropertyDescriptor(n,t);return r.get?r.get.call(o):r.value}})(e,t,o||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_query=_interopRequireDefault(_query),tool=_interopRequireWildcard(tool),_log=_interopRequireDefault(_log),_tabbox_default=_interopRequireDefault(_tabbox_default),_item_code=_interopRequireDefault(_item_code);var VConsoleDefaultTab=function(_VConsoleLogTab){function VConsoleDefaultTab(){var e,t;_classCallCheck(this,VConsoleDefaultTab);for(var o=arguments.length,n=new Array(o),r=0;r<o;r++)n[r]=arguments[r];return(t=_possibleConstructorReturn(this,(e=_getPrototypeOf(VConsoleDefaultTab)).call.apply(e,[this].concat(n)))).tplTabbox=_tabbox_default.default,t}return _inherits(VConsoleDefaultTab,_VConsoleLogTab),_createClass(VConsoleDefaultTab,[{key:"onReady",value:function onReady(){var that=this;_get(_getPrototypeOf(VConsoleDefaultTab.prototype),"onReady",this).call(this),window.winKeys=Object.getOwnPropertyNames(window).sort(),window.keyTypes={};for(var i=0;i<winKeys.length;i++)keyTypes[winKeys[i]]=_typeof(window[winKeys[i]]);var cacheObj={},ID_REGEX=/[a-zA-Z_0-9\$\-\u00A2-\uFFFF]/,retrievePrecedingIdentifier=function(e,t,o){o=o||ID_REGEX;for(var n=[],r=t-1;r>=0&&o.test(e[r]);r--)n.push(e[r]);if(0==n.length){o=/\./;for(var i=t-1;i>=0&&o.test(e[i]);i--)n.push(e[i])}if(0===n.length){var a=e.match(/[\(\)\[\]\{\}]/gi)||[];return a[a.length-1]}return n.reverse().join("")};_query.default.bind(_query.default.one(".vc-cmd-input"),"keyup",function(e){var isDeleteKeyCode=8===e.keyCode||46===e.keyCode,$prompted=_query.default.one(".vc-cmd-prompted");$prompted.style.display="none",$prompted.innerHTML="";var tempValue=this.value,value=retrievePrecedingIdentifier(this.value,this.value.length);if(value&&value.length>0){if(/\(/.test(value)&&!isDeleteKeyCode)return void(_query.default.one(".vc-cmd-input").value+=")");if(/\[/.test(value)&&!isDeleteKeyCode)return void(_query.default.one(".vc-cmd-input").value+="]");if(/\{/.test(value)&&!isDeleteKeyCode)return void(_query.default.one(".vc-cmd-input").value+="}");if("."===value){var key=retrievePrecedingIdentifier(tempValue,tempValue.length-1);if(!cacheObj[key])try{cacheObj[key]=Object.getOwnPropertyNames(eval("("+key+")")).sort()}catch(e){}try{for(var _i3=0;_i3<cacheObj[key].length;_i3++){var $li=document.createElement("li"),_key=cacheObj[key][_i3];$li.innerHTML=_key,$li.onclick=function(){_query.default.one(".vc-cmd-input").value="",_query.default.one(".vc-cmd-input").value=tempValue+this.innerHTML,$prompted.style.display="none"},$prompted.appendChild($li)}}catch(e){}}else if("."!==value.substring(value.length-1)&&value.indexOf(".")<0){for(var _i4=0;_i4<winKeys.length;_i4++)if(winKeys[_i4].toLowerCase().indexOf(value.toLowerCase())>=0){var _$li=document.createElement("li");_$li.innerHTML=winKeys[_i4],_$li.onclick=function(){_query.default.one(".vc-cmd-input").value="",_query.default.one(".vc-cmd-input").value=this.innerHTML,"function"==keyTypes[this.innerHTML]&&(_query.default.one(".vc-cmd-input").value+="()"),$prompted.style.display="none"},$prompted.appendChild(_$li)}}else{var arr=value.split(".");if(cacheObj[arr[0]]){cacheObj[arr[0]].sort();for(var _i5=0;_i5<cacheObj[arr[0]].length;_i5++){var _$li2=document.createElement("li"),_key3=cacheObj[arr[0]][_i5];_key3.indexOf(arr[1])>=0&&(_$li2.innerHTML=_key3,_$li2.onclick=function(){_query.default.one(".vc-cmd-input").value="",_query.default.one(".vc-cmd-input").value=tempValue+this.innerHTML,$prompted.style.display="none"},$prompted.appendChild(_$li2))}}}if($prompted.children.length>0){var m=Math.min(200,31*$prompted.children.length);$prompted.style.display="block",$prompted.style.height=m+"px",$prompted.style.marginTop=-m+"px"}}else $prompted.style.display="none"}),_query.default.bind(_query.default.one(".vc-cmd",this.$tabbox),"submit",function(e){e.preventDefault();var t=_query.default.one(".vc-cmd-input",e.target),o=t.value;t.value="",""!==o&&that.evalCommand(o);var n=_query.default.one(".vc-cmd-prompted");n&&(n.style.display="none")});var code="";code+="if (!!window) {",code+="window.__vConsole_cmd_result = undefined;",code+="window.__vConsole_cmd_error = false;",code+="}";var scriptList=document.getElementsByTagName("script"),nonce="";scriptList.length>0&&(nonce=scriptList[0].nonce||"");var script=document.createElement("SCRIPT");script.innerHTML=code,script.setAttribute("nonce",nonce),document.documentElement.appendChild(script),document.documentElement.removeChild(script)}},{key:"mockConsole",value:function(){_get(_getPrototypeOf(VConsoleDefaultTab.prototype),"mockConsole",this).call(this);var e=this;tool.isFunction(window.onerror)&&(this.windowOnError=window.onerror),window.onerror=function(t,o,n,r,i){var a=t;o&&(a+="\n"+o.replace(location.origin,"")),(n||r)&&(a+=":"+n+":"+r);var l=!!i&&!!i.stack&&i.stack.toString()||"";e.printLog({logType:"error",logs:[a,l],noOrigin:!0}),tool.isFunction(e.windowOnError)&&e.windowOnError.call(window,t,o,n,r,i)}}},{key:"evalCommand",value:function(e){this.printLog({logType:"log",content:_query.default.render(_item_code.default,{content:e,type:"input"}),style:""});var t,o=void 0;try{o=eval.call(window,"("+e+")")}catch(t){try{o=eval.call(window,e)}catch(e){}}tool.isArray(o)||tool.isObject(o)?t=this.getFoldedLine(o):(tool.isNull(o)?o="null":tool.isUndefined(o)?o="undefined":tool.isFunction(o)?o="function()":tool.isString(o)&&(o='"'+o+'"'),t=_query.default.render(_item_code.default,{content:o,type:"output"})),this.printLog({logType:"log",content:t,style:""}),window.winKeys=Object.getOwnPropertyNames(window).sort()}}]),VConsoleDefaultTab}(_log.default),_default=VConsoleDefaultTab;_exports.default=_default,module.exports=exports.default},__WEBPACK_AMD_DEFINE_ARRAY__=[exports,__webpack_require__(1),__webpack_require__(0),__webpack_require__(5),__webpack_require__(23),__webpack_require__(24)],void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=factory)?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},function(e,t){e.exports='<div id="{{_id}}" class="vc-item vc-item-{{logType}} {{style}}">\n\t<div class="vc-item-content"></div>\n</div>'},function(e,t){e.exports='<div class="vc-fold">\n  {{if (lineType == \'obj\')}}\n    <i class="vc-fold-outer">{{outer}}</i>\n    <div class="vc-fold-inner"></div>\n  {{else if (lineType == \'value\')}}\n    <i class="vc-code-{{valueType}}">{{value}}</i>\n  {{else if (lineType == \'kv\')}}\n    <i class="vc-code-key{{if (keyType)}} vc-code-{{keyType}}-key{{/if}}">{{key}}</i>: <i class="vc-code-{{valueType}}">{{value}}</i>\n  {{/if}}\n</div>'},function(e,t){e.exports='<span>\n  <i class="vc-code-key{{if (keyType)}} vc-code-{{keyType}}-key{{/if}}">{{key}}</i>: <i class="vc-code-{{valueType}}">{{value}}</i>\n</span>'},function(e,t){e.exports='<div>\n  <div class="vc-log"></div>\n  <form class="vc-cmd">\n    <button class="vc-cmd-btn" type="submit">OK</button>\n    <ul class=\'vc-cmd-prompted\'></ul>\n    <div class="vc-cmd-input-wrap">\n      <textarea class="vc-cmd-input" placeholder="command..."></textarea>\n    </div>\n  </form>\n</div>'},function(e,t){e.exports='<pre class="vc-item-code vc-item-code-{{type}}">{{content}}</pre>'},function(e,t,o){var n,r,i;r=[t,o(5),o(26)],void 0===(i="function"==typeof(n=function(o,n,r){"use strict";function i(e){return e&&e.__esModule?e:{default:e}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e,t,o){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,o){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(n){var r=Object.getOwnPropertyDescriptor(n,t);return r.get?r.get.call(o):r.value}})(e,t,o||e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=i(n),r=i(r);var f=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return(o=c(this,(e=d(t)).call.apply(e,[this].concat(i)))).tplTabbox=r.default,o.allowUnformattedLog=!1,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),o=t,(n=[{key:"onInit",value:function(){s(d(t.prototype),"onInit",this).call(this),this.printSystemInfo()}},{key:"printSystemInfo",value:function(){var e=navigator.userAgent,t="",o=e.match(/(ipod).*\s([\d_]+)/i),n=e.match(/(ipad).*\s([\d_]+)/i),r=e.match(/(iphone)\sos\s([\d_]+)/i),i=e.match(/(android)\s([\d\.]+)/i);t="Unknown",i?t="Android "+i[2]:r?t="iPhone, iOS "+r[2].replace(/_/g,"."):n?t="iPad, iOS "+n[2].replace(/_/g,"."):o&&(t="iPod, iOS "+o[2].replace(/_/g,"."));var a=t,l=e.match(/MicroMessenger\/([\d\.]+)/i);t="Unknown",l&&l[1]?(t=l[1],a+=", WeChat "+t,console.info("[system]","System:",a)):console.info("[system]","System:",a),t="Unknown",t="https:"==location.protocol?"HTTPS":"http:"==location.protocol?"HTTP":location.protocol.replace(":",""),a=t;var c=e.toLowerCase().match(/ nettype\/([^ ]+)/g);t="Unknown",c&&c[0]?(c=c[0].split("/"),t=c[1],a+=", "+t,console.info("[system]","Network:",a)):console.info("[system]","Protocol:",a),console.info("[system]","UA:",e),setTimeout(function(){var e=window.performance||window.msPerformance||window.webkitPerformance;if(e&&e.timing){var t=e.timing;t.navigationStart&&console.info("[system]","navigationStart:",t.navigationStart),t.navigationStart&&t.domainLookupStart&&console.info("[system]","navigation:",t.domainLookupStart-t.navigationStart+"ms"),t.domainLookupEnd&&t.domainLookupStart&&console.info("[system]","dns:",t.domainLookupEnd-t.domainLookupStart+"ms"),t.connectEnd&&t.connectStart&&(t.connectEnd&&t.secureConnectionStart?console.info("[system]","tcp (ssl):",t.connectEnd-t.connectStart+"ms ("+(t.connectEnd-t.secureConnectionStart)+"ms)"):console.info("[system]","tcp:",t.connectEnd-t.connectStart+"ms")),t.responseStart&&t.requestStart&&console.info("[system]","request:",t.responseStart-t.requestStart+"ms"),t.responseEnd&&t.responseStart&&console.info("[system]","response:",t.responseEnd-t.responseStart+"ms"),t.domComplete&&t.domLoading&&(t.domContentLoadedEventStart&&t.domLoading?console.info("[system]","domComplete (domLoaded):",t.domComplete-t.domLoading+"ms ("+(t.domContentLoadedEventStart-t.domLoading)+"ms)"):console.info("[system]","domComplete:",t.domComplete-t.domLoading+"ms")),t.loadEventEnd&&t.loadEventStart&&console.info("[system]","loadEvent:",t.loadEventEnd-t.loadEventStart+"ms"),t.navigationStart&&t.loadEventEnd&&console.info("[system]","total (DOM):",t.loadEventEnd-t.navigationStart+"ms ("+(t.domComplete-t.navigationStart)+"ms)")}},0)}}])&&l(o.prototype,n),i&&l(o,i),t;var o,n,i}(n.default);o.default=f,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t){e.exports='<div>\n  <div class="vc-log"></div>\n</div>'},function(e,t,o){var n,r,i;r=[t,o(1),o(0),o(2),o(28),o(29),o(30)],void 0===(i="function"==typeof(n=function(o,n,r,i,a,l,c){"use strict";function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=s(n),r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(r),i=s(i),a=s(a),l=s(l),c=s(c);var b=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=new Array(r),l=0;l<r;l++)i[l]=arguments[l];return(o=f(this,(e=v(t)).call.apply(e,[this].concat(i)))).$tabbox=n.default.render(a.default,{}),o.$header=null,o.reqList={},o.domList={},o.isReady=!1,o.isShow=!1,o.isInBottom=!0,o._open=void 0,o._send=void 0,o.mockAjax(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,e),o=t,(i=[{key:"onRenderTab",value:function(e){e(this.$tabbox)}},{key:"onAddTool",value:function(e){var t=this,o=[{name:"Clear",global:!1,onClick:function(e){t.clearLog()}}];e(o)}},{key:"onReady",value:function(){var e=this;e.isReady=!0,this.renderHeader(),n.default.delegate(n.default.one(".vc-log",this.$tabbox),"click",".vc-group-preview",function(t){var o=this.dataset.reqid,r=this.parentNode;n.default.hasClass(r,"vc-actived")?(n.default.removeClass(r,"vc-actived"),e.updateRequest(o,{actived:!1})):(n.default.addClass(r,"vc-actived"),e.updateRequest(o,{actived:!0})),t.preventDefault()});var t=n.default.one(".vc-content");for(var o in n.default.bind(t,"scroll",function(o){e.isShow&&(t.scrollTop+t.offsetHeight>=t.scrollHeight?e.isInBottom=!0:e.isInBottom=!1)}),e.reqList)e.updateRequest(o,{})}},{key:"onRemove",value:function(){window.XMLHttpRequest&&(window.XMLHttpRequest.prototype.open=this._open,window.XMLHttpRequest.prototype.send=this._send,this._open=void 0,this._send=void 0)}},{key:"onShow",value:function(){this.isShow=!0,1==this.isInBottom&&this.scrollToBottom()}},{key:"onHide",value:function(){this.isShow=!1}},{key:"onShowConsole",value:function(){1==this.isInBottom&&this.scrollToBottom()}},{key:"scrollToBottom",value:function(){var e=n.default.one(".vc-content");e.scrollTop=e.scrollHeight-e.offsetHeight}},{key:"clearLog",value:function(){for(var e in this.reqList={},this.domList)this.domList[e].remove(),this.domList[e]=void 0;this.domList={},this.renderHeader()}},{key:"renderHeader",value:function(){var e=Object.keys(this.reqList).length,t=n.default.render(l.default,{count:e}),o=n.default.one(".vc-log",this.$tabbox);this.$header?this.$header.parentNode.replaceChild(t,this.$header):o.parentNode.insertBefore(t,o),this.$header=t}},{key:"updateRequest",value:function(e,t){var o=Object.keys(this.reqList).length,i=this.reqList[e]||{};for(var a in t)i[a]=t[a];if(this.reqList[e]=i,this.isReady){var l={id:e,url:i.url,status:i.status,method:i.method||"-",costTime:i.costTime>0?i.costTime+"ms":"-",header:i.header||null,getData:i.getData||null,postData:i.postData||null,response:null,actived:!!i.actived};switch(i.responseType){case"":case"text":if(r.isString(i.response))try{l.response=JSON.parse(i.response),l.response=JSON.stringify(l.response,null,1),l.response=r.htmlEncode(l.response)}catch(e){l.response=r.htmlEncode(i.response)}else void 0!==i.response&&(l.response=Object.prototype.toString.call(i.response));break;case"json":void 0!==i.response&&(l.response=JSON.stringify(i.response,null,1),l.response=r.htmlEncode(l.response));break;case"blob":case"document":case"arraybuffer":default:void 0!==i.response&&(l.response=Object.prototype.toString.call(i.response))}0==i.readyState||1==i.readyState?l.status="Pending":2==i.readyState||3==i.readyState?l.status="Loading":4==i.readyState||(l.status="Unknown");var s=n.default.render(c.default,l),d=this.domList[e];i.status>=400&&n.default.addClass(n.default.one(".vc-group-preview",s),"vc-table-row-error"),d?d.parentNode.replaceChild(s,d):n.default.one(".vc-log",this.$tabbox).insertAdjacentElement("beforeend",s),this.domList[e]=s;var u=Object.keys(this.reqList).length;u!=o&&this.renderHeader(),this.isInBottom&&this.scrollToBottom()}}},{key:"mockAjax",value:function(){var e=window.XMLHttpRequest;if(e){var t=this,o=window.XMLHttpRequest.prototype.open,n=window.XMLHttpRequest.prototype.send;t._open=o,t._send=n,window.XMLHttpRequest.prototype.open=function(){var e=this,n=[].slice.call(arguments),r=n[0],i=n[1],a=t.getUniqueID(),l=null;e._requestID=a,e._method=r,e._url=i;var c=e.onreadystatechange||function(){},s=function(){var o=t.reqList[a]||{};if(o.readyState=e.readyState,o.status=0,e.readyState>1&&(o.status=e.status),o.responseType=e.responseType,0==e.readyState)o.startTime||(o.startTime=+new Date);else if(1==e.readyState)o.startTime||(o.startTime=+new Date);else if(2==e.readyState){o.header={};for(var n=e.getAllResponseHeaders()||"",r=n.split("\n"),i=0;i<r.length;i++){var s=r[i];if(s){var d=s.split(": "),u=d[0],f=d.slice(1).join(": ");o.header[u]=f}}}else 3==e.readyState||(4==e.readyState?(clearInterval(l),o.endTime=+new Date,o.costTime=o.endTime-(o.startTime||o.endTime),o.response=e.response):clearInterval(l));return e._noVConsole||t.updateRequest(a,o),c.apply(e,arguments)};e.onreadystatechange=s;var d=-1;return l=setInterval(function(){d!=e.readyState&&(d=e.readyState,s.call(e))},10),o.apply(e,n)},window.XMLHttpRequest.prototype.send=function(){var e=[].slice.call(arguments),o=e[0],i=t.reqList[this._requestID]||{};i.method=this._method.toUpperCase();var a=this._url.split("?");if(i.url=a.shift(),a.length>0){i.getData={},a=(a=a.join("?")).split("&");var l=!0,c=!1,s=void 0;try{for(var d,u=a[Symbol.iterator]();!(l=(d=u.next()).done);l=!0){var f=d.value;f=f.split("="),i.getData[f[0]]=f[1]}}catch(e){c=!0,s=e}finally{try{l||null==u.return||u.return()}finally{if(c)throw s}}}if("POST"==i.method)if(r.isString(o)){var v=o.split("&");i.postData={};var p=!0,b=!1,h=void 0;try{for(var g,m=v[Symbol.iterator]();!(p=(g=m.next()).done);p=!0){var y=g.value;y=y.split("="),i.postData[y[0]]=y[1]}}catch(e){b=!0,h=e}finally{try{p||null==m.return||m.return()}finally{if(b)throw h}}}else r.isPlainObject(o)&&(i.postData=o);return this._noVConsole||t.updateRequest(this._requestID,i),n.apply(this,e)}}}},{key:"getUniqueID",value:function(){var e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0,o="x"==e?t:3&t|8;return o.toString(16)});return e}}])&&u(o.prototype,i),s&&u(o,s),t;var o,i,s}(i.default);o.default=b,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t){e.exports='<div class="vc-table">\n  <div class="vc-log"></div>\n</div>'},function(e,t){e.exports='<dl class="vc-table-row">\n  <dd class="vc-table-col vc-table-col-4">Name {{if (count > 0)}}({{count}}){{/if}}</dd>\n  <dd class="vc-table-col">Method</dd>\n  <dd class="vc-table-col">Status</dd>\n  <dd class="vc-table-col">Time</dd>\n</dl>'},function(e,t){e.exports='<div class="vc-group {{actived ? \'vc-actived\' : \'\'}}">\n  <dl class="vc-table-row vc-group-preview" data-reqid="{{id}}">\n    <dd class="vc-table-col vc-table-col-4">{{url}}</dd>\n    <dd class="vc-table-col">{{method}}</dd>\n    <dd class="vc-table-col">{{status}}</dd>\n    <dd class="vc-table-col">{{costTime}}</dd>\n  </dl>\n  <div class="vc-group-detail">\n    {{if (header !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Headers</dt>\n      </dl>\n      {{for (var key in header)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{header[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    {{if (getData !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Query String Parameters</dt>\n      </dl>\n      {{for (var key in getData)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{getData[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    {{if (postData !== null)}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Form Data</dt>\n      </dl>\n      {{for (var key in postData)}}\n      <div class="vc-table-row vc-left-border vc-small">\n        <div class="vc-table-col vc-table-col-2">{{key}}</div>\n        <div class="vc-table-col vc-table-col-4 vc-max-height-line">{{postData[key]}}</div>\n      </div>\n      {{/for}}\n    </div>\n    {{/if}}\n    <div>\n      <dl class="vc-table-row vc-left-border">\n        <dt class="vc-table-col vc-table-col-title">Response</dt>\n      </dl>\n      <div class="vc-table-row vc-left-border vc-small">\n        <pre class="vc-table-col vc-max-height vc-min-height">{{response || \'\'}}</pre>\n      </div>\n    </div>\n  </div>\n</div>'},function(e,t,o){var n,r,i;r=[t,o(32),o(2),o(34),o(35),o(0),o(1)],void 0===(i="function"==typeof(n=function(o,n,r,i,a,l,c){"use strict";function s(e){return e&&e.__esModule?e:{default:e}}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(l),c=s(c);var b=function(e){function t(){var e,o,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,l=new Array(a),s=0;s<a;s++)l[s]=arguments[s];n=this,r=(e=f(t)).call.apply(e,[this].concat(l)),o=!r||"object"!==d(r)&&"function"!=typeof r?p(n):r;var u=p(p(o));u.isInited=!1,u.node={},u.$tabbox=c.default.render(i.default,{}),u.nodes=[],u.activedElem={};var v=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;return u.observer=new v(function(e){for(var t=0;t<e.length;t++){var o=e[t];u._isInVConsole(o.target)||u.onMutation(o)}}),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,e),o=t,(n=[{key:"onRenderTab",value:function(e){e(this.$tabbox)}},{key:"onAddTool",value:function(e){var t=this,o=[{name:"Expand",global:!1,onClick:function(e){if(t.activedElem)if(c.default.hasClass(t.activedElem,"vc-toggle"))for(var o=0;o<t.activedElem.childNodes.length;o++){var n=t.activedElem.childNodes[o];if(c.default.hasClass(n,"vcelm-l")&&!c.default.hasClass(n,"vcelm-noc")&&!c.default.hasClass(n,"vc-toggle")){c.default.one(".vcelm-node",n).click();break}}else c.default.one(".vcelm-node",t.activedElem).click()}},{name:"Collapse",global:!1,onClick:function(e){t.activedElem&&(c.default.hasClass(t.activedElem,"vc-toggle")?c.default.one(".vcelm-node",t.activedElem).click():t.activedElem.parentNode&&c.default.hasClass(t.activedElem.parentNode,"vcelm-l")&&c.default.one(".vcelm-node",t.activedElem.parentNode).click())}}];e(o)}},{key:"onShow",value:function(){if(!this.isInited){this.isInited=!0,this.node=this.getNode(document.documentElement);var e=this.renderView(this.node,c.default.one(".vc-log",this.$tabbox)),t=c.default.one(".vcelm-node",e);t&&t.click(),this.observer.observe(document.documentElement,{attributes:!0,childList:!0,characterData:!0,subtree:!0})}}},{key:"onRemove",value:function(){this.observer.disconnect()}},{key:"onMutation",value:function(e){switch(e.type){case"childList":e.removedNodes.length>0&&this.onChildRemove(e),e.addedNodes.length>0&&this.onChildAdd(e);break;case"attributes":this.onAttributesChange(e);break;case"characterData":this.onCharacterDataChange(e)}}},{key:"onChildRemove",value:function(e){var t=e.target,o=t.__vconsole_node;if(o){for(var n=0;n<e.removedNodes.length;n++){var r=e.removedNodes[n],i=r.__vconsole_node;i&&i.view&&i.view.parentNode.removeChild(i.view)}this.getNode(t)}}},{key:"onChildAdd",value:function(e){var t=e.target,o=t.__vconsole_node;if(o){this.getNode(t),o.view&&c.default.removeClass(o.view,"vcelm-noc");for(var n=0;n<e.addedNodes.length;n++){var r=e.addedNodes[n],i=r.__vconsole_node;if(i)if(null!==e.nextSibling){var a=e.nextSibling.__vconsole_node;a.view&&this.renderView(i,a.view,"insertBefore")}else o.view&&(o.view.lastChild?this.renderView(i,o.view.lastChild,"insertBefore"):this.renderView(i,o.view))}}}},{key:"onAttributesChange",value:function(e){var t=e.target.__vconsole_node;t&&(t=this.getNode(e.target)).view&&this.renderView(t,t.view,!0)}},{key:"onCharacterDataChange",value:function(e){var t=e.target.__vconsole_node;t&&(t=this.getNode(e.target)).view&&this.renderView(t,t.view,!0)}},{key:"renderView",value:function(e,t,o){var n=this,r=new a.default(e).get();switch(e.view=r,c.default.delegate(r,"click",".vcelm-node",function(t){t.stopPropagation();var o=this.parentNode;if(!c.default.hasClass(o,"vcelm-noc")){n.activedElem=o,c.default.hasClass(o,"vc-toggle")?c.default.removeClass(o,"vc-toggle"):c.default.addClass(o,"vc-toggle");for(var r=-1,i=0;i<o.children.length;i++){var a=o.children[i];c.default.hasClass(a,"vcelm-l")&&(r++,a.children.length>0||(e.childNodes[r]?n.renderView(e.childNodes[r],a,"replace"):a.style.display="none"))}}}),o){case"replace":t.parentNode.replaceChild(r,t);break;case"insertBefore":t.parentNode.insertBefore(r,t);break;default:t.appendChild(r)}return r}},{key:"getNode",value:function(e){if(!this._isIgnoredElement(e)){var t=e.__vconsole_node||{};if(t.nodeType=e.nodeType,t.nodeName=e.nodeName,t.tagName=e.tagName||"",t.textContent="",t.nodeType!=e.TEXT_NODE&&t.nodeType!=e.DOCUMENT_TYPE_NODE||(t.textContent=e.textContent),t.id=e.id||"",t.className=e.className||"",t.attributes=[],e.hasAttributes&&e.hasAttributes())for(var o=0;o<e.attributes.length;o++)t.attributes.push({name:e.attributes[o].name,value:e.attributes[o].value||""});if(t.childNodes=[],e.childNodes.length>0)for(var n=0;n<e.childNodes.length;n++){var r=this.getNode(e.childNodes[n]);r&&t.childNodes.push(r)}return e.__vconsole_node=t,t}}},{key:"_isIgnoredElement",value:function(e){return e.nodeType==e.TEXT_NODE&&""==e.textContent.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$|\n+/g,"")}},{key:"_isInVConsole",value:function(e){for(var t=e;null!=t;){if("__vconsole"==t.id)return!0;t=t.parentNode||void 0}return!1}}])&&u(o.prototype,n),r&&u(o,r),t;var o,n,r}(r.default);o.default=b,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t,o){var n=o(33);"string"==typeof n&&(n=[[e.i,n,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};o(4)(n,r);n.locals&&(e.exports=n.locals)},function(e,t,o){(e.exports=o(3)(!1)).push([e.i,'/* color */\n.vcelm-node {\n  color: #183691;\n}\n.vcelm-k {\n  color: #0086B3;\n}\n.vcelm-v {\n  color: #905;\n}\n/* layout */\n.vcelm-l {\n  padding-left: 8px;\n  position: relative;\n  word-wrap: break-word;\n  line-height: 1;\n}\n/*.vcelm-l.vcelm-noc {\n  padding-left: 0;\n}*/\n.vcelm-l.vc-toggle > .vcelm-node {\n  display: block;\n}\n.vcelm-l .vcelm-node:active {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n.vcelm-l.vcelm-noc .vcelm-node:active {\n  background-color: transparent;\n}\n.vcelm-t {\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n/* level */\n.vcelm-l .vcelm-l {\n  display: none;\n}\n.vcelm-l.vc-toggle > .vcelm-l {\n  margin-left: 4px;\n  display: block;\n}\n/* arrow */\n.vcelm-l:before {\n  content: "";\n  display: block;\n  position: absolute;\n  top: 6px;\n  left: 3px;\n  width: 0;\n  height: 0;\n  border: transparent solid 3px;\n  border-left-color: #000;\n}\n.vcelm-l.vc-toggle:before {\n  display: block;\n  top: 6px;\n  left: 0;\n  border-top-color: #000;\n  border-left-color: transparent;\n}\n.vcelm-l.vcelm-noc:before {\n  display: none;\n}\n',""])},function(e,t){e.exports='<div>\n  <div class="vc-log"></div>\n</div>'},function(e,t,o){var n,r,i;r=[t,o(36),o(37),o(0),o(1)],void 0===(i="function"==typeof(n=function(o,n,r,i,a){"use strict";function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=l(n),r=l(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(i),a=l(a);var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.node=t,this.view=this._create(this.node)}return t=e,(o=[{key:"get",value:function(){return this.view}},{key:"_create",value:function(e,t){var o=document.createElement("DIV");switch(a.default.addClass(o,"vcelm-l"),e.nodeType){case o.ELEMENT_NODE:this._createElementNode(e,o);break;case o.TEXT_NODE:this._createTextNode(e,o);break;case o.COMMENT_NODE:case o.DOCUMENT_NODE:case o.DOCUMENT_TYPE_NODE:case o.DOCUMENT_FRAGMENT_NODE:}return o}},{key:"_createTextNode",value:function(e,t){a.default.addClass(t,"vcelm-t vcelm-noc"),e.textContent&&t.appendChild(function(e){return document.createTextNode(e)}(e.textContent.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")))}},{key:"_createElementNode",value:function(e,t){var o,i=(o=(o=e.tagName)?o.toLowerCase():"",["br","hr","img","input","link","meta"].indexOf(o)>-1),l=i;0==e.childNodes.length&&(l=!0);var c=a.default.render(n.default,{node:e}),s=a.default.render(r.default,{node:e});if(l)a.default.addClass(t,"vcelm-noc"),t.appendChild(c),i||t.appendChild(s);else{t.appendChild(c);for(var d=0;d<e.childNodes.length;d++){var u=document.createElement("DIV");a.default.addClass(u,"vcelm-l"),t.appendChild(u)}i||t.appendChild(s)}}}])&&c(t.prototype,o),i&&c(t,i),e;var t,o,i}();o.default=s,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t){e.exports='<span class="vcelm-node">&lt;{{node.tagName.toLowerCase()}}{{if (node.className || node.attributes.length)}}\n  <i class="vcelm-k">\n    {{for (var i = 0; i < node.attributes.length; i++)}}\n      {{if (node.attributes[i].value !== \'\')}}\n        {{node.attributes[i].name}}="<i class="vcelm-v">{{node.attributes[i].value}}</i>"{{else}}\n        {{node.attributes[i].name}}{{/if}}{{/for}}</i>{{/if}}&gt;</span>'},function(e,t){e.exports='<span class="vcelm-node">&lt;/{{node.tagName.toLowerCase()}}&gt;</span>'},function(e,t,o){var n,r,i;r=[t,o(2),o(39),o(40),o(0),o(1)],void 0===(i="function"==typeof(n=function(o,n,r,i,a,l){"use strict";function c(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}Object.defineProperty(o,"__esModule",{value:!0}),o.default=void 0,n=c(n),r=c(r),i=c(i),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,o):{};n.get||n.set?Object.defineProperty(t,o,n):t[o]=e[o]}return t.default=e,t}(a),l=c(l);var p=function(e){function t(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return(o=u(this,(e=f(t)).call.apply(e,[this].concat(i)))).$tabbox=l.default.render(r.default,{}),o.currentType="",o.typeNameMap={cookies:"Cookies",localstorage:"LocalStorage",sessionstorage:"SessionStorage"},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(t,e),o=t,(n=[{key:"onRenderTab",value:function(e){e(this.$tabbox)}},{key:"onAddTopBar",value:function(e){for(var t=this,o=["Cookies","LocalStorage","SessionStorage"],n=[],r=0;r<o.length;r++)n.push({name:o[r],data:{type:o[r].toLowerCase()},className:"",onClick:function(){if(l.default.hasClass(this,"vc-actived"))return!1;t.currentType=this.dataset.type,t.renderStorage()}});n[0].className="vc-actived",e(n)}},{key:"onAddTool",value:function(e){var t=this,o=[{name:"Refresh",global:!1,onClick:function(e){t.renderStorage()}},{name:"Clear",global:!1,onClick:function(e){t.clearLog()}}];e(o)}},{key:"onReady",value:function(){}},{key:"onShow",value:function(){""==this.currentType&&(this.currentType="cookies",this.renderStorage())}},{key:"clearLog",value:function(){if(this.currentType&&window.confirm){var e=window.confirm("Remove all "+this.typeNameMap[this.currentType]+"?");if(!e)return!1}switch(this.currentType){case"cookies":this.clearCookieList();break;case"localstorage":this.clearLocalStorageList();break;case"sessionstorage":this.clearSessionStorageList();break;default:return!1}this.renderStorage()}},{key:"renderStorage",value:function(){var e=[];switch(this.currentType){case"cookies":e=this.getCookieList();break;case"localstorage":e=this.getLocalStorageList();break;case"sessionstorage":e=this.getSessionStorageList();break;default:return!1}var t=l.default.one(".vc-log",this.$tabbox);if(0==e.length)t.innerHTML="";else{for(var o=0;o<e.length;o++)e[o].name=a.htmlEncode(e[o].name),e[o].value=a.htmlEncode(e[o].value);t.innerHTML=l.default.render(i.default,{list:e},!0)}}},{key:"getCookieList",value:function(){if(!document.cookie||!navigator.cookieEnabled)return[];for(var e=[],t=document.cookie.split(";"),o=0;o<t.length;o++){var n=t[o].split("="),r=n.shift().replace(/^ /,""),i=n.join("=");try{r=decodeURIComponent(r),i=decodeURIComponent(i)}catch(e){console.log(e,r,i)}e.push({name:r,value:i})}return e}},{key:"getLocalStorageList",value:function(){if(!window.localStorage)return[];try{for(var e=[],t=0;t<localStorage.length;t++){var o=localStorage.key(t),n=localStorage.getItem(o);e.push({name:o,value:n})}return e}catch(e){return[]}}},{key:"getSessionStorageList",value:function(){if(!window.sessionStorage)return[];try{for(var e=[],t=0;t<sessionStorage.length;t++){var o=sessionStorage.key(t),n=sessionStorage.getItem(o);e.push({name:o,value:n})}return e}catch(e){return[]}}},{key:"clearCookieList",value:function(){if(document.cookie&&navigator.cookieEnabled){for(var e=this.getCookieList(),t=0;t<e.length;t++)document.cookie=e[t].name+"=;expires=Thu, 01 Jan 1970 00:00:00 GMT";this.renderStorage()}}},{key:"clearLocalStorageList",value:function(){if(window.localStorage)try{localStorage.clear(),this.renderStorage()}catch(e){alert("localStorage.clear() fail.")}}},{key:"clearSessionStorageList",value:function(){if(window.sessionStorage)try{sessionStorage.clear(),this.renderStorage()}catch(e){alert("sessionStorage.clear() fail.")}}}])&&d(o.prototype,n),c&&d(o,c),t;var o,n,c}(n.default);o.default=p,e.exports=t.default})?n.apply(t,r):n)||(e.exports=i)},function(e,t){e.exports='<div class="vc-table">\n  <div class="vc-log"></div>\n</div>'},function(e,t){e.exports='<div>\n  <dl class="vc-table-row">\n    <dd class="vc-table-col">Name</dd>\n    <dd class="vc-table-col vc-table-col-2">Value</dd>\n  </dl>\n  {{for (var i = 0; i < list.length; i++)}}\n  <dl class="vc-table-row">\n    <dd class="vc-table-col">{{list[i].name}}</dd>\n    <dd class="vc-table-col vc-table-col-2">{{list[i].value}}</dd>\n  </dl>\n  {{/for}}\n</div>'}])});
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Director_1 = require("./core/view/Director");
var Facade_1 = require("./core/mvc/Facade");
var Constant_1 = require("./Constant");
var StartupCmd_1 = require("./cmd/StartupCmd");
var Updater_1 = require("./core/Updater");
var App = /** @class */ (function (_super) {
    tslib_1.__extends(App, _super);
    function App() {
        var _this = _super.call(this) || this;
        _this.ui = new Director_1.default();
        _this.updater = new Updater_1.default();
        return _this;
    }
    App.startup = function () {
        var app = new App;
        Object.defineProperty(window, 'app', { get: function () { return app; }, configurable: true });
        app.registCommand(Constant_1.Constant.Notify.startup, StartupCmd_1.StartupCmd);
        app.notify(Constant_1.Constant.Notify.startup);
    };
    Object.defineProperty(App.prototype, "vibrateEnable", {
        get: function () { return +localStorage.getItem("can_vibrate") == 1; },
        set: function (bo) { localStorage.setItem("can_vibrate", bo ? "1" : "0"); },
        enumerable: true,
        configurable: true
    });
    App.prototype.vibrate = function (duration) {
        if (duration === void 0) { duration = 1000; }
        if (!("vibrate" in navigator))
            return;
        if (!this.vibrateEnable)
            return;
        navigator.vibrate(duration);
    };
    return App;
}(Facade_1.Facade));
exports.default = App;

},{"./Constant":6,"./cmd/StartupCmd":9,"./core/Updater":16,"./core/mvc/Facade":22,"./core/view/Director":25,"tslib":3}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Constant;
(function (Constant) {
    var Notify;
    (function (Notify) {
        Notify["startup"] = "startup";
    })(Notify = Constant.Notify || (Constant.Notify = {}));
    var Analytics;
    (function (Analytics) {
        Analytics["level_begin"] = "level_begin";
        Analytics["level_end"] = "level_end";
        Analytics["continue_show"] = "continue_show";
        Analytics["continue_click"] = "continue_click";
    })(Analytics = Constant.Analytics || (Constant.Analytics = {}));
})(Constant = exports.Constant || (exports.Constant = {}));

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var CircleProgressScript_1 = require("./script/CircleProgressScript");
var ButtonScript_1 = require("./script/ButtonScript");
var RankItemRender_1 = require("./view/RankItemRender");
var RotateScript_1 = require("./script/RotateScript");
var FullScreenScript_1 = require("./script/FullScreenScript");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/CircleProgressScript.ts", CircleProgressScript_1.default);
        reg("script/ButtonScript.ts", ButtonScript_1.default);
        reg("view/RankItemRender.ts", RankItemRender_1.default);
        reg("script/RotateScript.ts", RotateScript_1.default);
        reg("script/FullScreenScript.ts", FullScreenScript_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedheight";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "center";
    GameConfig.startScene = "share/ShareChallenge.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();

},{"./script/ButtonScript":54,"./script/CircleProgressScript":55,"./script/FullScreenScript":56,"./script/RotateScript":57,"./view/RankItemRender":68}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("ts-polyfill");
require("./core/extension");
require("./core/LayaExtra");
var GameConfig_1 = require("./GameConfig");
var App_1 = require("./App");
var PlatformFactory_1 = require("./platform/PlatformFactory");
var VConsole = require("vconsole");
var Main = /** @class */ (function () {
    function Main() {
        var config = new window["Config3D"]();
        config.isAlpha = true;
        // Config.isAlpha = true;
        //根据IDE设置初始化引擎	
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height, config);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya.stage.bgColor = null;
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = false;
        this.checkConsole_();
        PlatformFactory_1.PlatformFactory.startup();
        App_1.default.startup();
        // document.body.style.backgroundColor = `linear-gradient( to bottom, #red, #blue);`
        // //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        // Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.checkConsole_ = function () {
        var click_count = 0;
        var timer = 0;
        var key = "dvdvdvd";
        var isDev = !$sys_release || localStorage.getItem(key) == "true";
        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, function (e) {
            if (!e.touches || e.touches.length < 2)
                return;
            if (e.stageX < Laya.stage.width - 50 || e.stageY >= 50)
                return;
            click_count++;
            clearTimeout(timer);
            timer = setTimeout(function () {
                if (click_count >= 5) {
                    isDev = !isDev;
                    localStorage.setItem(key, isDev ? "true" : "false");
                    app.ui.toast("Success:" + isDev);
                }
                click_count = 0;
            }, 200);
        });
        if (isDev) {
            if (Laya.Browser.onMobile) {
                var vconsole = new VConsole();
                vconsole.show();
            }
        }
        else {
            console.log = function () { };
        }
    };
    return Main;
}());
//激活启动类
new Main();

},{"./App":5,"./GameConfig":7,"./core/LayaExtra":14,"./core/extension":21,"./platform/PlatformFactory":50,"ts-polyfill":2,"vconsole":4}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var LayaUtils_1 = require("../core/LayaUtils");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Game_1 = require("../game/Game");
var GameHelper_1 = require("../core/GameHelper");
var StartupCmd = /** @class */ (function () {
    function StartupCmd() {
    }
    StartupCmd.prototype.excute = function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loadingView, loadingPromise, scene, scenePromise, iads, rads, game;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loadingPromise = LayaUtils_1.LayaUtils.loadResAsync([
                            "loading/bg_loading.jpg",
                            "res/atlas/loading.atlas",
                            "res/atlas/rank.atlas"
                        ], function (progress) { })
                            .then(function () {
                            var view = new layaMaxUI_1.ui.view.SplashUI();
                            view.width = Laya.stage.width;
                            view.height = Laya.stage.height;
                            Laya.stage.addChild(view);
                            loadingView = view;
                        });
                        scenePromise = LayaUtils_1.LayaUtils.createResAsync("res/scene/Conventional/main.ls", (function (progress) { }))
                            .then(function (_scene) {
                            scene = _scene;
                        });
                        return [4 /*yield*/, Promise.all([
                                loadingPromise,
                                scenePromise,
                                platform.initialize(),
                                LayaUtils_1.LayaUtils.loadResAsync([
                                    "res/atlas/comp.atlas",
                                    "res/atlas/game.atlas",
                                ], function (progress) { return $sys_progress = progress; })
                            ])];
                    case 1:
                        _a.sent();
                        iads = [
                            "2298527883768766_2298529910435230",
                            "2298527883768766_2298529603768594"
                        ];
                        rads = [
                            "2298527883768766_2298529477101940",
                            "2298527883768766_2298529347101953"
                        ];
                        if (platform.appId == "309008946478086") {
                            iads = [
                                "309008946478086_309011306477850",
                                "309008946478086_309011353144512",
                                "309008946478086_309011426477838"
                            ],
                                rads = [
                                    "309008946478086_309011493144498",
                                    "309008946478086_309011539811160",
                                    "309008946478086_309011599811154"
                                ];
                        }
                        else if (platform.appId == "257395441815477") {
                            // rad_any,257395441815477_264943187727369,,Frist,
                            // rad_low,257395441815477_264943151060706,,Frist,
                            // rad_high,257395441815477_264943091060712,,Frist,
                            // iad_any,257395441815477_264943027727385,,Frist,
                            // iad_low,257395441815477_264942967727391,,Frist,
                            // iad_high,257395441815477_264942911060730,,Frist,
                            iads = [
                                "257395441815477_264942911060730",
                                "257395441815477_264942967727391",
                                "257395441815477_264943027727385"
                            ],
                                rads = [
                                    "257395441815477_264943091060712",
                                    "257395441815477_264943151060706",
                                    "257395441815477_264943187727369"
                                ];
                        }
                        return [4 /*yield*/, platform.startGame(iads, rads)];
                    case 2:
                        _a.sent();
                        app.ui.stage3d_.addChild(scene);
                        game = scene.addComponent(Game_1.Game);
                        Laya.stage.on(Laya.Event.MOUSE_DOWN, null, function () {
                            game.onPress_(true);
                            Laya.stage.once(Laya.Event.MOUSE_UP, null, function () {
                                game.onPress_(false);
                            });
                        });
                        return [4 /*yield*/, this.checkBotAndShortCut()];
                    case 3:
                        _a.sent();
                        loadingView.removeSelf();
                        GameHelper_1.GameHelper.onGameReady();
                        Laya.stage.screenAdaptationEnabled = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    StartupCmd.prototype.checkBotAndShortCut = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, platform.subscribeBotAsync()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, platform.createShortcutAsync()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.log("bot subscribe/shortcut error", e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return StartupCmd;
}());
exports.StartupCmd = StartupCmd;

},{"../core/GameHelper":13,"../core/LayaUtils":15,"../game/Game":34,"../ui/layaMaxUI":63,"tslib":3}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Color = /** @class */ (function () {
    function Color(r, g, b, a) {
        if (r === void 0) { r = 1; }
        if (g === void 0) { g = 1; }
        if (b === void 0) { b = 1; }
        if (a === void 0) { a = 1; }
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    Color.prototype.setHex = function (hex) {
        hex = Math.floor(hex);
        this.a = (hex >> 24 & 255) / 255;
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        return this;
    };
    Color.prototype.getHex = function () {
        return ((this.a * 255) << 24 ^ (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0) >>> 0;
    };
    Color.prototype.getHexString = function () {
        var str = ('00000000' + this.getHex().toString(16)).slice(-8);
        return "#" + str;
    };
    Color.prototype.getRGBHexString = function () {
        var str = ('000000' + this.getHex().toString(16)).slice(-6);
        return "#" + str;
    };
    Color.prototype.toV4 = function () {
        return new Laya.Vector4(this.r, this.g, this.b, this.a);
    };
    Color.Lerp = function (start, end, t) {
        var a = start.a + (end.a - start.a) * t;
        var r = start.r + (end.r - start.r) * t;
        var g = start.g + (end.g - start.g) * t;
        var b = start.b + (end.b - start.b) * t;
        return new Color(r, g, b, a);
    };
    Color.white = new Color(1, 1, 1);
    Color.black = new Color(0, 0, 0);
    Color.red = new Color(1, 0, 0);
    return Color;
}());
exports.Color = Color;

},{}],11:[function(require,module,exports){
"use strict";
/**
 * Author:terran
 * Email:terran.tian@foxmail.com
 *
 * Time:上午9:56 2016年12月17日
**/
Object.defineProperty(exports, "__esModule", { value: true });
var Emiter = /** @class */ (function () {
    function Emiter() {
        this.maps = {};
        this.uid = 0;
        this._duringEmit = false;
    }
    Emiter.prototype.add = function (name, handler, thisObject, priority, isOnce) {
        thisObject = thisObject || null;
        priority = priority || 0;
        var queue_id = this.uid++;
        var item = this.maps[name] || [];
        item.push([queue_id, handler, thisObject, priority, isOnce]);
        this.maps[name] = item;
        //倒序
        item.sort(function (a, b) { return a[3] < b[3]; });
        return queue_id;
    };
    Emiter.prototype.on = function (name, handler, thisObject, priority) { return this.add(name, handler, thisObject, priority, false); };
    Emiter.prototype.once = function (name, handler, thisObject, priority) { return this.add(name, handler, thisObject, priority, true); };
    Emiter.prototype.race = function (names, handler, thisObject, priority) {
        var _this = this;
        var events = [];
        var hasDone = false;
        var call = function (name) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            hasDone = true;
            //$dev && console.log(events);
            events.forEach(function (item) { return _this.rm(item[0], item[1]); });
            handler.apply(thisObject, [name].concat(args));
        };
        var _loop_1 = function (name_1) {
            if (hasDone)
                return "break";
            events.push([this_1.once(name_1, function () { return call(name_1); }, thisObject, priority), name_1]);
        };
        var this_1 = this;
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            var state_1 = _loop_1(name_1);
            if (state_1 === "break")
                break;
        }
    };
    Emiter.prototype.rm = function (id, name) {
        var names = name ? [name] : Object.keys(this.maps);
        for (var _i = 0, names_2 = names; _i < names_2.length; _i++) {
            var name_2 = names_2[_i];
            var handlers = this.maps[name_2];
            if (!handlers)
                continue;
            if (this._duringEmit) {
                this.maps[name_2] = handlers = handlers.concat();
            }
            var index = 0;
            while (index < handlers.length) {
                var _a = handlers[index], queue_id = _a[0], handler = _a[1], thisObject = _a[2], priority = _a[3], isOnce = _a[4];
                if (queue_id == id) {
                    handlers.splice(index, 1);
                    return true;
                }
                else {
                    index++;
                }
            }
        }
        return false;
    };
    Emiter.prototype.rmall = function (name) {
        if (name == undefined)
            this.maps = {};
        else
            delete this.maps[name];
    };
    Emiter.prototype.emit = function (name, data) {
        var handlers = this.maps[name];
        if (handlers && handlers.length > 0) {
            var index = 0;
            while (index < handlers.length) {
                var _a = handlers[index], queue_id = _a[0], handler = _a[1], thisObject = _a[2], priority = _a[3], isOnce = _a[4];
                isOnce ? handlers.splice(index, 1) : index++;
                this._duringEmit = true;
                var result = handler.call(thisObject, data);
                this._duringEmit = false;
                if (result == Emiter.CONST.break)
                    break;
            }
            return true;
        }
        return false;
    };
    Emiter.CONST = { break: {} };
    return Emiter;
}());
exports.Emiter = Emiter;

},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity = /** @class */ (function (_super) {
    tslib_1.__extends(Entity, _super);
    function Entity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Entity.prototype, "base", {
        get: function () {
            return this.owner;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "transform", {
        get: function () {
            return this.base.transform;
        },
        enumerable: true,
        configurable: true
    });
    Entity.prototype.getComponent_ = function (a) {
        return this.base.getComponent(a);
    };
    return Entity;
}(Laya.Script3D));
exports.Entity = Entity;

},{"tslib":3}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var FBPlatform_1 = require("../platform/FBPlatform");
var GameStats_1 = require("../game/GameStats");
var Utils_1 = require("./Utils");
var GameHelper;
(function (GameHelper) {
    var recomends = [];
    function onGameReady() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentContextId, arr, entry;
            return tslib_1.__generator(this, function (_a) {
                if (!(platform instanceof FBPlatform_1.FBPlatform))
                    return [2 /*return*/];
                currentContextId = platform.getContextId();
                arr = platform.remoteData.contextIds.filter(function (v) { return v != currentContextId; }).map(function (v) { return { type: 0, id: v }; });
                platform.getFriends().forEach(function (v) {
                    arr.push({ type: 1, id: v.id });
                });
                arr.shuffle();
                recomends = arr;
                entry = platform.entry;
                if (entry != "challenge_request" && entry != "challenge_result" && entry != "challenge_request_share") {
                    watchContext();
                }
                return [2 /*return*/];
            });
        });
    }
    GameHelper.onGameReady = onGameReady;
    function requestContext(withChoose) {
        if (withChoose === void 0) { withChoose = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, recomend;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        if (!(recomends.length > 0)) return [3 /*break*/, 4];
                        recomend = recomends.pop();
                        if (!(recomend.type == 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, platform.switchAsync(recomend.id, "request_context")];
                    case 1:
                        bo = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, platform.createAsync(recomend.id, "request_context")];
                    case 3:
                        bo = _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!(!bo && withChoose)) return [3 /*break*/, 6];
                        return [4 /*yield*/, platform.chooseAsync(void 0, void 0, void 0, "request_context")];
                    case 5:
                        bo = _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, bo];
                }
            });
        });
    }
    GameHelper.requestContext = requestContext;
    var _lastContextId = null;
    var _contextLeaderBoard = null;
    var _lastContextualScore = 25;
    function watchContext() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var playerName, contextId, rankName, contextIds, entry, e_1, curScore, e_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        playerName = FBInstant.player.getName();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 15];
                        contextId = FBInstant.context.getID();
                        if (!contextId) return [3 /*break*/, 13];
                        rankName = "ncontext." + contextId;
                        if (!(contextId != _lastContextId)) return [3 /*break*/, 8];
                        console.log("context changed");
                        contextIds = platform.remoteData.contextIds;
                        if (contextIds.indexOf(contextId) == -1) {
                            contextIds.push(contextId);
                            platform.remoteData.isDirty = true;
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        _lastContextId = contextId;
                        return [4 /*yield*/, FBInstant.getLeaderboardAsync(rankName)];
                    case 3:
                        _contextLeaderBoard = _a.sent();
                        return [4 /*yield*/, _contextLeaderBoard.getPlayerEntryAsync()];
                    case 4:
                        entry = _a.sent();
                        _lastContextualScore = entry ? entry.getScore() : 25;
                        return [4 /*yield*/, _contextLeaderBoard.setScoreAsync(_lastContextualScore, "")];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, FBInstant.updateAsync({ action: 'LEADERBOARD', name: rankName, text: playerName + " played this game" })];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        console.log("rank msg failed:", e_1);
                        return [3 /*break*/, 8];
                    case 8:
                        curScore = GameStats_1.GameStats.inst_.scores || 0;
                        if (!(_contextLeaderBoard && curScore > _lastContextualScore)) return [3 /*break*/, 13];
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 12, , 13]);
                        console.log("score changed!");
                        return [4 /*yield*/, _contextLeaderBoard.setScoreAsync(curScore, "")];
                    case 10:
                        _a.sent();
                        return [4 /*yield*/, FBInstant.updateAsync({ action: 'LEADERBOARD', name: rankName })];
                    case 11:
                        _a.sent();
                        _lastContextualScore = curScore;
                        return [3 /*break*/, 13];
                    case 12:
                        e_2 = _a.sent();
                        console.log("score changed update failed:", e_2);
                        return [3 /*break*/, 13];
                    case 13: return [4 /*yield*/, Utils_1.Utils.wait(5000)];
                    case 14:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 15: return [2 /*return*/];
                }
            });
        });
    }
})(GameHelper = exports.GameHelper || (exports.GameHelper = {}));

},{"../game/GameStats":35,"../platform/FBPlatform":44,"./Utils":17,"tslib":3}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Object.Destroy = function (ob, delaySec) {
    if (delaySec === void 0) { delaySec = 0; }
    if (!ob)
        return;
    if (delaySec > 0) {
        setTimeout(function (t) {
            // ob.destroy(false);
            t.removeSelf();
        }, delaySec * 1000, ob);
    }
    else {
        ob.removeSelf();
        // ob.destroy(false);
    }
};
Object.defineProperty(Laya.Quaternion.prototype, "eulerAngles", {
    get: function () {
        var out = new Laya.Vector3();
        this.getYawPitchRoll(out);
        return out;
    },
    set: function (value) {
        Laya.Quaternion.createFromYawPitchRoll(value.x, value.y, value.z, this);
    },
    enumerable: true,
    configurable: true
});
Laya.Vector3.up = new Laya.Vector3(0, 1, 0);
Laya.Vector3.down = new Laya.Vector3(0, -1, 0);
Laya.Vector3.left = new Laya.Vector3(-1, 0, 0);
Laya.Vector3.right = new Laya.Vector3(1, 0, 0);
Laya.Vector3.forward = new Laya.Vector3(0, 0, 1);
Laya.Vector3.back = new Laya.Vector3(0, 0, -1);
Laya.Vector3.zero = new Laya.Vector3(0, 0, 0);
Laya.Vector3.one = new Laya.Vector3(1, 1, 1);
Laya.Vector3.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
};
Laya.Vector3.prototype.multiplyScalar = function (scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
};
Laya.Vector3.prototype.divideScalar = function (scalar) {
    return this.multiplyScalar(1 / scalar);
};
Laya.Vector3.prototype.clampLength = function (min, max) {
    var length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
};
Laya.Vector3.prototype.add = function (v) {
    this.x += v.x;
    this.y += v.y;
    this.z += v.z;
    return this;
};
Laya.Vector3.prototype.sub = function (v) {
    this.x -= v.x;
    this.y -= v.y;
    this.z -= v.z;
    return this;
};
Laya.Vector3.prototype.setX = function (v) {
    this.x = v;
    return this;
};
Laya.Vector3.prototype.setY = function (v) {
    this.y = v;
    return this;
};
Laya.Vector3.prototype.setZ = function (v) {
    this.z = v;
    return this;
};
Laya.Vector3.prototype.distanceTo = function (v) {
    return Math.sqrt(this.distanceToSquared(v));
};
Laya.Vector3.prototype.distanceToSquared = function (v) {
    var dx = this.x - v.x;
    var dy = this.y - v.y;
    var dz = this.z - v.z;
    return dx * dx + dy * dy + dz * dz;
};
Laya.Vector3.prototype.set = function (x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
};
Laya.Vector3.prototype.normalize = function () {
    return this.divideScalar(this.length() || 1);
};
Laya.Vector3.prototype.negate = function () {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
};
Laya.Vector3.prototype.setLength = function (v) {
    return this.normalize().multiplyScalar(v);
};
Laya.Vector3.prototype.plus = function (v) {
    return new Laya.Vector3(this.x + v.x, this.y + v.y, this.z + v.z);
};
Laya.Vector3.prototype.minus = function (v) {
    return new Laya.Vector3(this.x - v.x, this.y - v.y, this.z - v.z);
    ;
};
Laya.Vector3.prototype.scale = function (v) {
    return new Laya.Vector3(this.x * v, this.y * v, this.z * v);
    ;
};
Object.defineProperty(Laya.Vector3.prototype, 'angle', {
    enumerable: true,
    configurable: true,
    get: function () {
        return Math.atan2(this.z, this.x);
    },
    set: function (value) {
        this.x = Math.cos(value) * this.length();
        this.z = Math.sin(value) * this.length();
    }
});
Object.defineProperty(laya.utils.Timer.prototype, 'deltaSec', {
    enumerable: true,
    configurable: true,
    get: function () {
        return this.delta / 1000;
    }
});
Object.defineProperty(laya.utils.Timer.prototype, 'currTimerSec', {
    enumerable: true,
    configurable: true,
    get: function () {
        return this.currTimer / 1000;
    }
});
laya.d3.core.Sprite3D.prototype.SetActive = function (bo) {
    this.active = bo;
};
exports.default = {};

},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var LayaUtils;
(function (LayaUtils) {
    function getChildByName_(node, name) {
        var names = ("" + name).split("/");
        var child = node;
        for (var i = 0; i < names.length; i++) {
            child = child.getChildByName(names[i]);
            if (child == null)
                return null;
        }
        return child;
    }
    LayaUtils.getChildByName_ = getChildByName_;
    function getAllMaterials_(obj) {
        var result = [];
        var arr = [obj];
        for (var i = 0; i < arr.length; i++) {
            var v = arr[i];
            if (v.meshRenderer) {
                result.push.apply(result, v.meshRenderer.materials);
            }
            for (var n = 0; n < v.numChildren; n++) {
                arr.push(v.getChildAt(n));
            }
        }
        return result;
    }
    LayaUtils.getAllMaterials_ = getAllMaterials_;
    function setMeshTransparent_(obj, bo) {
        var materials = LayaUtils.getAllMaterials_(obj);
        for (var _i = 0, materials_1 = materials; _i < materials_1.length; _i++) {
            var m = materials_1[_i];
            m.renderMode = bo ? Laya.BlinnPhongMaterial.RENDERMODE_TRANSPARENT : Laya.BlinnPhongMaterial.RENDERMODE_OPAQUE;
            m.albedoColor = new Laya.Vector4(1, 1, 1, bo ? 0.5 : 1);
        }
    }
    LayaUtils.setMeshTransparent_ = setMeshTransparent_;
    function doDestroy_(mesh) {
        Laya.timer.frameOnce(1, this, function () {
            null != mesh && mesh.destroy();
        });
    }
    LayaUtils.doDestroy_ = doDestroy_;
    function addV3_(t, e) {
        var i = new Laya.Vector3;
        return Laya.Vector3.add(t, e, i), i;
    }
    LayaUtils.addV3_ = addV3_;
    function subV3_(t, e) {
        var i = new Laya.Vector3;
        return Laya.Vector3.subtract(t, e, i), i;
    }
    LayaUtils.subV3_ = subV3_;
    function mulV3_(t, e) {
        var i = new Laya.Vector3;
        return Laya.Vector3.scale(t, e, i), i;
    }
    LayaUtils.mulV3_ = mulV3_;
    function normalizeV3_(t) {
        var e = new Laya.Vector3;
        return Laya.Vector3.normalize(t, e), e;
    }
    LayaUtils.normalizeV3_ = normalizeV3_;
    function normalizeDriection_(a, b) {
        var e = new Laya.Vector3;
        Laya.Vector3.subtract(a, b, e);
        Laya.Vector3.normalize(e, e);
        return e;
    }
    LayaUtils.normalizeDriection_ = normalizeDriection_;
    function moveBy_(postion, direction, len) {
        var tmp = new Laya.Vector3;
        Laya.Vector3.scale(direction, len, tmp);
        Laya.Vector3.add(postion, tmp, tmp);
        return tmp;
    }
    LayaUtils.moveBy_ = moveBy_;
    LayaUtils.UP = new Laya.Vector3(0, 1, 0);
    LayaUtils.DOWN = new Laya.Vector3(0, -1, 0);
    // replace Laya.Quaternion.getYawPitchRoll
    function QuaternionToEuler_(q, v) {
        v.x = Math.atan2(2 * q.y * q.w - 2 * q.x * q.z, 1 - 2 * Math.pow(q.y, 2) - 2 * Math.pow(q.z, 2));
        v.z = Math.asin(2 * q.x * q.y + 2 * q.z * q.w);
        v.y = Math.atan2(2 * q.x * q.w - 2 * q.y * q.z, 1 - 2 * Math.pow(q.x, 2) - 2 * Math.pow(q.z, 2));
        if (q.x * q.y + q.z * q.w == 0.5) {
            v.x = (2 * Math.atan2(q.x, q.w));
            v.y = 0;
        }
        else if (q.x * q.y + q.z * q.w == -0.5) {
            v.x = (-2 * Math.atan2(q.x, q.w));
            v.y = 0;
        }
        return v;
    }
    LayaUtils.QuaternionToEuler_ = QuaternionToEuler_;
    function convertColor_(value) {
        var v = new Laya.Vector4();
        var hex = value.slice(1);
        var color = parseInt(hex, 16);
        // let r = value.slice(1).split("");
        // let nums = [];
        // while(r.length>2){
        // 	let a = parseInt(r.splice(0,2).join(""),16)/255;
        // 	nums.push(a);
        // }
        // while(nums.length <3){
        // 	nums.unshift(0);
        // }
        // if(nums.length < 4){
        // 	nums.unshift(1);
        // }	
        v.w = hex.length > 6 ? ((color >> 24) & 0xff) / 255 : 1; //a
        v.x = ((color >> 16) & 0xff) / 255; //r
        v.y = ((color >> 8) & 0xff) / 255; //g
        v.z = (color & 0xff) / 255; //b
        return v;
    }
    LayaUtils.convertColor_ = convertColor_;
    function walkDisplayList(parent, valideFun) {
        var target = null;
        var arr = [parent];
        for (var index = 0; index < arr.length; index++) {
            var element = arr[index];
            if (valideFun && valideFun(element)) {
                target = element;
                break;
            }
            for (var i = 0; i < element.numChildren; i++) {
                arr.push(element.getChildAt(i));
            }
        }
        return target;
    }
    LayaUtils.walkDisplayList = walkDisplayList;
    function createResAsync(url, onProgress) {
        return new Promise(function (resolve, reject) {
            Laya.loader.create(url, Laya.Handler.create(null, function () {
                if (Array.isArray(url)) {
                    var arr = url.map(function (v) { return Laya.loader.getRes((v.url ? v.url : v) || url); });
                    resolve(arr);
                }
                else {
                    var item = Laya.loader.getRes(url);
                    if (item) {
                        resolve(item);
                    }
                    else {
                        reject("create res async failed");
                    }
                }
            }), new Laya.Handler(null, onProgress));
        });
    }
    LayaUtils.createResAsync = createResAsync;
    function loadResAsync(url, onProgress) {
        return new Promise(function (resolve, reject) {
            Laya.loader.load(url, Laya.Handler.create(null, function () {
                if (Array.isArray(url)) {
                    var arr = url.map(function (v) { return Laya.loader.getRes((v.url ? v.url : v) || url); });
                    resolve(arr);
                }
                else {
                    var item = Laya.loader.getRes(url);
                    if (item) {
                        resolve(item);
                    }
                    else {
                        reject("load res async failed");
                    }
                }
            }), new Laya.Handler(null, onProgress));
        });
    }
    LayaUtils.loadResAsync = loadResAsync;
    function tween(target, props, duration, opt) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            opt = props || {};
            Laya.Tween.to(target, props, duration, opt.ease, Laya.Handler.create(_this, function () {
                resolve();
            }), opt.delay, opt.coverBefore, opt.autoRecover);
        });
    }
    LayaUtils.tween = tween;
    function wait(millseconds) {
        return new Promise(function (resolve) { return setTimeout(resolve, millseconds); });
    }
    LayaUtils.wait = wait;
})(LayaUtils = exports.LayaUtils || (exports.LayaUtils = {}));

},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Updater = /** @class */ (function () {
    function Updater() {
        this._list = [];
        this.isStarted = false;
        this._duringUpdate = false;
    }
    Updater.prototype.add = function (obj) {
        if (this._list.indexOf(obj) > -1)
            return;
        this._list.push(obj);
        if (!this.isStarted) {
            this.isStarted = true;
            Laya.timer.frameLoop(1, this, this.onUpdate);
        }
    };
    Updater.prototype.rm = function (obj) {
        var index = this._list.indexOf(obj);
        if (index == -1)
            return;
        if (this._duringUpdate) {
            this._list = this._list.concat();
        }
        this._list.splice(index, 1);
    };
    Updater.prototype.onUpdate = function () {
        var index = 0;
        var list = this._list;
        this._duringUpdate = true;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var obj = list_1[_i];
            obj.onUpdate();
        }
        this._duringUpdate = false;
    };
    return Updater;
}());
exports.default = Updater;

},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils;
(function (Utils) {
    function wait(millseconds) {
        return new Promise(function (resolve) { return setTimeout(resolve, millseconds); });
    }
    Utils.wait = wait;
})(Utils = exports.Utils || (exports.Utils = {}));

},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Effect = /** @class */ (function () {
    function Effect(fxTime, _next) {
        if (_next === void 0) { _next = true; }
        this.effectTime = -1;
        this.effectTime = fxTime;
        this.next = !!_next;
    }
    Object.defineProperty(Effect.prototype, "isStarted_", {
        get: function () {
            return this.start;
        },
        enumerable: true,
        configurable: true
    });
    Effect.prototype.getCoeff_ = function () {
        if (this.effectTime == -1) {
            return 0;
        }
        return Math.sin(Math.clamp(this.getLifeTime_() / this.effectTime, 0, 1) / 2 * Math.PI);
    };
    Effect.prototype.start_ = function () {
        this.start = true;
        this.timeStart = Laya.timer.currTimerSec;
        this.onStart_();
    };
    Effect.prototype.isEnd_ = function () {
        return this.getLifeTime_() >= this.effectTime;
    };
    Effect.prototype.isNext_ = function () {
        return this.next;
    };
    Effect.prototype.getLifeTime_ = function () {
        if (!this.start) {
            return 0;
        }
        return Laya.timer.currTimerSec - this.timeStart;
    };
    Effect.prototype.setTargetObj_ = function (obj) {
        this.target = obj;
    };
    Effect.prototype.getTargetObj_ = function () {
        return this.target;
    };
    Effect.prototype.update_ = function () {
    };
    Effect.prototype.onStart_ = function () {
    };
    return Effect;
}());
exports.Effect = Effect;

},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../../core/Entity");
var EffectProc = /** @class */ (function (_super) {
    tslib_1.__extends(EffectProc, _super);
    function EffectProc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.listEffects = [];
        return _this;
    }
    EffectProc.prototype.AddEffect = function (fx) {
        this.listEffects.push(fx);
        fx.setTargetObj_(this.base);
        return fx;
    };
    EffectProc.prototype.BackEffect = function () {
        if (this.listEffects.length > 0) {
            return this.listEffects[this.listEffects.length - 1];
        }
        return null;
    };
    EffectProc.prototype.ClearEffects = function () {
        this.listEffects.length = 0;
    };
    EffectProc.prototype.hasEffects_ = function () {
        return this.listEffects.length > 0;
    };
    EffectProc.prototype.UpdateEffects = function () {
        for (var i = 0; i < this.listEffects.length; i++) {
            var effect = this.listEffects[i];
            if (!effect.isStarted_) {
                effect.start_();
            }
            effect.update_();
            if (effect.isEnd_()) {
                this.listEffects.splice(i, 1);
                i--;
            }
            else if (!effect.isNext_()) {
                break;
            }
        }
    };
    EffectProc.prototype.onUpdate = function () {
        this.UpdateEffects();
    };
    return EffectProc;
}(Entity_1.Entity));
exports.EffectProc = EffectProc;

},{"../../core/Entity":12,"tslib":3}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Effect_1 = require("./Effect");
var FxScale = /** @class */ (function (_super) {
    tslib_1.__extends(FxScale, _super);
    function FxScale(fromScale, toScale, fxTime, _next) {
        if (_next === void 0) { _next = true; }
        var _this = _super.call(this, fxTime, _next) || this;
        _this.tmp_vec = new Laya.Vector3;
        _this._from = fromScale;
        _this._to = toScale;
        return _this;
    }
    FxScale.prototype.update_ = function () {
        var coeff = this.getCoeff_();
        Laya.Vector3.lerp(this._from, this._to, coeff, this.tmp_vec);
        this.getTargetObj_().transform.localScale = this.tmp_vec;
    };
    return FxScale;
}(Effect_1.Effect));
exports.FxScale = FxScale;

},{"./Effect":18,"tslib":3}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
String.prototype.substitute = function (data) {
    return this.replace(/\{(.+?)\}/ig, function (match, name) { return data[name]; });
};
Object.defineProperty(Array.prototype, "random", {
    value: function (rm) {
        if (this.length == 0)
            return null;
        var index = Math.floor(this.length * Math.random());
        var item = this[index];
        if (rm)
            this.splice(index, 1);
        return this[index];
    },
    configurable: true,
    writable: true
});
Object.defineProperty(Array.prototype, "choice", {
    value: function (fun) {
        if (this.length == 0)
            return null;
        if (fun == void 0)
            fun = function (v) { return v; };
        var sum = this.reduce(function (a, b) { return a + fun(b); }, 0) * Math.random();
        var len = this.length;
        for (var i = 0; i < len; i++) {
            var w = fun(this[i]);
            if (sum < w)
                return this[i];
            sum -= w;
        }
        return this[len - 1];
    },
    configurable: true,
    writable: true
});
Object.defineProperty(Array.prototype, "unique", {
    value: function () {
        var arr = [];
        var i = 0;
        while (i < this.length) {
            var item = this[i];
            if (arr.indexOf(this[i]) >= 0) {
                this.splice(i, 1);
            }
            else {
                arr.push(this[i++]);
            }
        }
        return this;
    },
    configurable: true,
    writable: true
});
Object.defineProperty(Array.prototype, "sorton", {
    value: function (field, ascending) {
        if (ascending === void 0) { ascending = true; }
        if (typeof field == "string") {
            field = [field];
        }
        return this.sort(function (a, b) {
            var ascore = 0;
            var bscore = 0;
            var len = field.length;
            for (var i = 0; i < len; i++) {
                var key = field[i];
                ascore += (a[key] || 0) / 100000 * (len - i);
                bscore += (b[key] || 0) / 100000 * (len - i);
            }
            var result = ascore > bscore ? 1 : ascore < bscore ? -1 : 0;
            ascending || (result *= -1);
            return result;
        });
    },
    configurable: true,
    writable: true
});
Object.defineProperty(Array.prototype, "rm", {
    value: function (item) {
        var fun = typeof item == "function" ? item : function (v) { return v == item; };
        var index = 0;
        while (index < this.length) {
            var item_1 = this[index];
            if (fun(item_1)) {
                this.splice(index, 1);
                return this;
            }
            else {
                index++;
            }
        }
        return this;
    },
    configurable: true,
    writable: true
});
Object.defineProperty(Array.prototype, "shuffle", {
    value: function () {
        var _a;
        for (var i = this.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            _a = [this[j], this[i]], this[i] = _a[0], this[j] = _a[1];
        }
        return this;
    },
    configurable: true,
    writable: true
});
Date.prototype.format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        "S": this.getMilliseconds() //毫秒 
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};
Date.week = function (offset) {
    if (offset === void 0) { offset = 2521; }
    // start from 1527151462527
    var timeZone = -7 * 3600 * 1000;
    var week = ~~((Date.now() + timeZone + 1 * 24 * 3600 * 1000) / (24 * 7 * 3600 * 1000)) - offset - 1;
    return week;
};
Date.days = function (offset) {
    if (offset === void 0) { offset = 0; }
    var timeZone = -7 * 3600 * 1000;
    var days = ~~((Date.now() + timeZone + 1 * 24 * 3600 * 1000) / (24 * 3600 * 1000)) - offset - 1;
    return days;
};
Math.rad = function (degree) {
    return degree * Math.PI / 180;
};
Math.deg = function (radian) {
    return radian * 180 / Math.PI;
};
Math.normalDeg = function (degree) {
    degree %= 360;
    if (degree < 0)
        degree += 360;
    return degree;
};
Math.randInt = function (min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 10; }
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
Math.randFloat = function (min, max) {
    var p = Math.randInt(0, 1000);
    return Math.lerp(min, max, p / 1000);
};
Math.clamp = function (value, min, max) {
    return Math.max(min, Math.min(value, max));
};
Math.lerp = function (x, y, t) {
    // return (1 - t) * x + t * y;
    return x + (y - x) * t;
};
Math.udid = function () {
    var stamp = Date.now();
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
        stamp += performance.now(); //use high-precision timer if available
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
        var i = (stamp + 16 * Math.random()) % 16 | 0;
        stamp = Math.floor(stamp / 16);
        return ("x" == e ? i : (i & 0x3 | 0x8)).toString(16);
    });
};
!function () {
    var _w_ = 0;
    var _z_ = 987654321;
    var mask = 0xffffffff;
    function random() {
        _z_ = (36969 * (_z_ & 65535) + (_z_ >> 16)) & mask;
        _w_ = (18000 * (_w_ & 65535) + (_w_ >> 16)) & mask;
        var result = ((_z_ << 16) + _w_) & mask;
        result /= 4294967296;
        return result + 0.5;
    }
    var origin_random = Math.random;
    Object.defineProperty(Math, "randomSeed", {
        get: function () {
            return _w_;
        },
        set: function (seed) {
            if (!!+seed) {
                _w_ = seed;
                Math.random = random;
            }
            else {
                _w_ = 0;
                Math.random = origin_random;
            }
        },
        enumerable: true,
        configurable: true
    });
}();
exports.default = {};

},{}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Emiter_1 = require("../Emiter");
/**
 * Author:terran
 * Email:terran.tian@foxmail.com
 *
 * Time:下午4:50 2016年12月29日
**/
var Facade = /** @class */ (function () {
    function Facade() {
        this._commands = {};
        this._responders = [];
        // if(Facade.inst) throw "singleton error";
        Facade.inst = this;
        this.emiter = new Emiter_1.Emiter();
    }
    Facade.prototype.registCommand = function (name, cmd) {
        if (this._commands[name])
            throw "cmd has been registed already!!!";
        var id = this.emiter.on(name, function (data) {
            new cmd().excute(data, name);
        });
        this._commands[name] = id;
    };
    Facade.prototype.unregistCommand = function (name) {
        var id = this._commands[name];
        if (id) {
            this.emiter.rm(id, name);
        }
    };
    Facade.prototype.registResponser = function (res) {
        if (this._responders.some(function (item) { return item.res == res; }))
            throw "this responser has been registed already!";
        var arr = res.listResponse();
        var ids = [];
        var _loop_1 = function (name_1) {
            var id = this_1.emiter.on(name_1, function (data) {
                res.doResponse(name_1, data);
            });
            ids.push({ name: name_1, id: id });
        };
        var this_1 = this;
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var name_1 = arr_1[_i];
            _loop_1(name_1);
        }
        this._responders.push({ res: res, ids: ids });
    };
    Facade.prototype.unregistResponser = function (res) {
        for (var _i = 0, _a = this._responders; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.res == res) {
                var ids = item.ids;
                for (var _b = 0, ids_1 = ids; _b < ids_1.length; _b++) {
                    var value = ids_1[_b];
                    this.emiter.rm(value.id, value.name);
                }
                this._responders.splice(this._responders.indexOf(item), 1);
                break;
            }
        }
    };
    Facade.prototype.notify = function (name, data) {
        return this.emiter.emit(name, data);
    };
    Facade.prototype.dispose = function () {
        this.emiter.rmall();
        this._responders.length = 0;
    };
    return Facade;
}());
exports.Facade = Facade;

},{"../Emiter":11}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BaseView = /** @class */ (function (_super) {
    tslib_1.__extends(BaseView, _super);
    function BaseView(view) {
        var _this = _super.call(this) || this;
        _this.view = view;
        _this.autoClose = true; //自动关闭
        _this.modal = true; //黑色背景
        _this.modalAlpha = .7;
        _this.animateIn = true; //切换动画
        _this.fullscreen = true;
        _this.center = true;
        _this.depth = 0;
        view && (view["owner_"] = _this);
        view && view.once(Laya.Event.ADDED, _this, _this.onAdd);
        view && view.once(Laya.Event.RESIZE, _this, _this.onResize);
        return _this;
    }
    BaseView.prototype.onAdd = function () {
    };
    BaseView.prototype.onResize = function () {
    };
    BaseView.prototype.onEnter = function () {
        this.parent.addChild(this.view);
    };
    BaseView.prototype.onExit = function () {
        this.view.removeSelf();
    };
    BaseView.prototype.onReady = function () {
    };
    BaseView.prototype.listResponse = function () {
        return [];
    };
    BaseView.prototype.doResponse = function (name, data) {
    };
    BaseView.prototype.fadeIn = function (callback) {
        this.view.alpha = 0;
        return Laya.Tween.to(this.view, {
            alpha: 1
        }, 400, Laya.Ease.quadOut, new Laya.Handler(null, callback));
    };
    BaseView.prototype.close = function () {
        this.event(Laya.Event.CLOSE);
    };
    return BaseView;
}(Laya.EventDispatcher));
exports.BaseView = BaseView;

},{"tslib":3}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BusyIndicator = /** @class */ (function (_super) {
    tslib_1.__extends(BusyIndicator, _super);
    function BusyIndicator() {
        var _this = _super.call(this) || this;
        _this.img = new Laya.Image;
        _this.img.skin = "loading/img_busy.png";
        _this.addChild(_this.img);
        _this.img.anchorX = _this.img.anchorY = 0.5;
        var ticker = 0;
        _this.once(Laya.Event.ADDED, null, function () {
            var step = 360 / 8;
            clearInterval(ticker);
            ticker = setInterval(function () {
                _this.rotation += step;
            }, 100);
        });
        _this.once(Laya.Event.REMOVED, null, function () {
            clearInterval(ticker);
        });
        return _this;
    }
    return BusyIndicator;
}(Laya.Sprite));
exports.BusyIndicator = BusyIndicator;

},{"tslib":3}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseView_1 = require("./BaseView");
var BusyIndicator_1 = require("./BusyIndicator");
var Toast_1 = require("./Toast");
var Director = /** @class */ (function () {
    function Director() {
        var _this = this;
        this.layerNotice = new Laya.Sprite;
        this.layer = new Laya.Sprite;
        this.game_layer = new Laya.Sprite;
        this.stage3d_ = new Laya.Sprite;
        this.fps = 0;
        this.version = "";
        this.views_ = [];
        this._busyCount = 0;
        this._busy_timer = 0;
        this._toastCout = 0;
        this._toastPool = [];
        this.layer.size(Laya.stage.width, Laya.stage.height);
        this.layerNotice.size(Laya.stage.width, Laya.stage.height);
        this.layerNotice.mouseThrough = this.layer.mouseThrough = true;
        Laya.stage.addChild(this.stage3d_);
        // this.game_layer.active = true;
        Laya.stage.addChild(this.game_layer);
        Laya.stage.addChild(this.layer);
        Laya.stage.addChild(this.layerNotice);
        this.modalMask_ = new Laya.Sprite();
        this.modalMask_.visible = false;
        this.modalMask_.mouseEnabled = true;
        this.modalMask_.size(Laya.stage.width, Laya.stage.height);
        this.modalMask_.on(Laya.Event.CLICK, null, function (e) {
            for (var i = _this.layer.numChildren - 1; i >= 0; --i) {
                var pnl = _this.layer.getChildAt(i)["owner_"];
                if (pnl instanceof BaseView_1.BaseView && pnl.autoClose) {
                    _this.removeView(pnl);
                    break;
                }
            }
        });
        this.onResize();
        this.layer.addChild(this.modalMask_);
        var txt_version = new Laya.Label();
        txt_version.bottom = 2;
        txt_version.right = 5;
        txt_version.fontSize = 12;
        txt_version.color = "#ffffff";
        txt_version.align = "bottom";
        Laya.stage.addChild(txt_version);
        this.txt_status = txt_version;
        var lastTime = Date.now();
        Laya.timer.frameLoop(1, this, function () {
            _this.fps++;
            var now = Date.now();
            if (now - lastTime > 1000) {
                lastTime = now;
                _this.updateStatusInfo();
                _this.fps = 0;
            }
        });
    }
    Director.prototype.onResize = function () {
        this.modalMask_.graphics.clear();
        this.modalMask_.graphics.drawRect(0, 0, Laya.stage.width, Laya.stage.height, "#000000");
        this.modalMask_.alpha = .7;
    };
    Director.prototype.updateModal = function () {
        var findModal = false;
        this.modalMask_.removeSelf();
        for (var i = this.layer.numChildren - 1; i >= 0; --i) {
            var p = this.layer.getChildAt(i)["owner_"];
            if (p && p.modal) {
                this.modalMask_.alpha = p.modalAlpha;
                this.layer.addChildAt(this.modalMask_, i);
                findModal = true;
                break;
            }
        }
        this.modalMask_.visible = findModal;
    };
    Director.prototype.addView = function (inst) {
        var _this = this;
        if (this.views_.indexOf(inst) >= 0)
            return;
        this.views_.push(inst);
        inst.parent = inst.depth == 0 ? this.layer : this.layerNotice;
        inst.onEnter();
        inst.once(Laya.Event.CLOSE, null, function () {
            _this.removeView(inst);
        });
        if (inst.fullscreen) {
            inst.view.height = Laya.stage.height;
            inst.view.width = Laya.stage.width;
        }
        inst.modal && this.updateModal();
        inst.center && this.centerView(inst.view);
        if (!inst.animateIn) {
            inst.onReady();
        }
        else {
            inst.view.visible = false;
            Laya.timer.once(0, null, function () {
                inst.view.visible = true;
                inst.fadeIn(function () {
                    inst.onReady();
                });
            });
        }
        return inst;
    };
    Director.prototype.removeView = function (inst) {
        this.views_.splice(this.views_.indexOf(inst), 1);
        inst.onExit();
        inst.modal && this.updateModal();
    };
    Director.prototype.removeAll = function () {
        for (var i = 0; i < this.views_.length; ++i) {
            var inst = this.views_[i];
            inst.onExit();
            inst.modal && this.updateModal();
        }
        this.views_.splice(0);
    };
    Director.prototype.getView = function (cls) {
        for (var _i = 0, _a = this.views_; _i < _a.length; _i++) {
            var view = _a[_i];
            if (view instanceof cls) {
                return view;
            }
        }
        return null;
    };
    Director.prototype.centerView = function (inst) {
        inst.x = (Laya.stage.width - inst.width) * .5;
        inst.y = (Laya.stage.height - inst.height) * .5;
    };
    Director.prototype.busy = function () {
        var _this = this;
        clearTimeout(this._busy_timer);
        setTimeout(function () {
            _this._busyCount = 0;
            _this.unbusy();
        }, 10000);
        if (this._busyCount++ == 0) {
            this._busyInst = new BusyIndicator_1.BusyIndicator();
            this._busyInst.x = Laya.stage.width * .5;
            this._busyInst.y = Laya.stage.height * .5;
            this.layerNotice.addChild(this._busyInst);
        }
    };
    Director.prototype.unbusy = function () {
        if (--this._busyCount <= 0 && this._busyInst) {
            this._busyInst.removeSelf();
            this._busyInst = null;
        }
    };
    Director.prototype.toast = function (content, icon) {
        var _this = this;
        var t = this._toastPool.length > 0 ? this._toastPool.pop() : new Toast_1.Toast();
        this.layerNotice.addChild(t);
        t.setData(content, icon);
        t.alpha = 0;
        t.x = Laya.stage.width * .5;
        t.y = Laya.stage.height * .5 + 100;
        var tl = new Laya.TimeLine();
        tl.addLabel("1", this._toastCout * 500).to(t, { y: t.y - 100, alpha: 1 }, 600, Laya.Ease.quadOut)
            .addLabel("2", 600).to(t, { y: t.y - 200, alpha: 0 }, 600, Laya.Ease.quadIn);
        tl.on(Laya.Event.COMPLETE, this, function () {
            _this._toastCout--;
            t.removeSelf();
            _this._toastPool.push(t);
        });
        tl.play();
        this._toastCout++;
    };
    Director.prototype.setVersion = function (version) {
        this.version = version;
    };
    Director.prototype.updateStatusInfo = function () {
        this.txt_status.text = this.version + " " + this.fps;
    };
    return Director;
}());
exports.default = Director;

},{"./BaseView":23,"./BusyIndicator":24,"./Toast":26}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Toast = /** @class */ (function (_super) {
    tslib_1.__extends(Toast, _super);
    function Toast() {
        var _this = _super.call(this) || this;
        var bg = _this.bg = new Laya.Image("loading/bg_toast.png");
        bg.anchorX = .5;
        bg.anchorY = .5;
        _this.addChild(bg);
        _this.txt = new Laya.Label();
        _this.txt.y = 4;
        _this.txt.color = "#ffffff";
        _this.txt.anchorX = .5;
        _this.txt.anchorY = .5;
        _this.txt.bold = true;
        _this.txt.fontSize = 38;
        _this.addChild(_this.txt);
        _this.icon = new Laya.Image();
        _this.icon.width = _this.icon.height = 30;
        _this.icon.pivot(15, 8);
        _this.addChild(_this.icon);
        return _this;
    }
    Toast.prototype.setData = function (content, icon) {
        this.txt.text = content;
        if (this.txt.width > this.bg.width)
            this.bg.scaleX = this.txt.width / this.bg.width;
        else
            this.bg.scaleX = 1;
        this.icon.skin = icon || "";
        this.icon.x = this.txt.width * -.5 - this.icon.width * .5;
    };
    return Toast;
}(Laya.Sprite));
exports.Toast = Toast;

},{"tslib":3}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var Color_1 = require("../core/Color");
var BGColor = /** @class */ (function (_super) {
    tslib_1.__extends(BGColor, _super);
    function BGColor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._c1 = Color_1.Color.white;
        _this._c2 = Color_1.Color.white;
        _this._timeRemain = 0;
        _this._timeTotal = 0;
        return _this;
    }
    BGColor.prototype.onAwake = function () {
        this.setColor_(this._c1, this._c2);
    };
    BGColor.prototype.setColor_ = function (c1, c2) {
        var str = "linear-gradient( to bottom, " + c1.getRGBHexString() + ", " + c2.getRGBHexString() + ")";
        document.body.style.background = str;
    };
    BGColor.prototype.changeColor_ = function (c1, c2, time) {
        if (time === void 0) { time = 0; }
        this._n_c1 = c1;
        this._n_c2 = c2;
        if (time == 0) {
            this._c1 = this._n_c1;
            this._c2 = this._n_c2;
            this.setColor_(this._c1, this._c2);
        }
        else {
            this._timeRemain = time;
            this._timeTotal = time;
        }
    };
    BGColor.prototype.onUpdate = function () {
        if (this._timeRemain > 0) {
            var t = 1 - ((this._timeTotal == 0) ? 0 : Math.clamp(this._timeRemain / this._timeTotal, 0, 1));
            var c = Color_1.Color.Lerp(this._c1, this._n_c1, t);
            var c2 = Color_1.Color.Lerp(this._c2, this._n_c2, t);
            this._timeRemain -= Laya.timer.deltaSec;
            if (this._timeRemain <= 0) {
                this._c1 = this._n_c1;
                this._c2 = this._n_c2;
            }
            this.setColor_(c, c2);
        }
    };
    return BGColor;
}(Entity_1.Entity));
exports.BGColor = BGColor;

},{"../core/Color":10,"../core/Entity":12,"tslib":3}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Sound_1 = require("./Sound");
var Entity_1 = require("../core/Entity");
var LayaUtils_1 = require("../core/LayaUtils");
var Ball = /** @class */ (function (_super) {
    tslib_1.__extends(Ball, _super);
    function Ball() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isKilled_ = false;
        _this._bottom = new Laya.Vector3;
        return _this;
    }
    Object.defineProperty(Ball.prototype, "IsKilled", {
        get: function () {
            return this._isKilled_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ball.prototype, "isFireMode_", {
        get: function () {
            return this._fireMode_;
        },
        enumerable: true,
        configurable: true
    });
    Ball.prototype.onAwake = function () {
        var sphere = LayaUtils_1.LayaUtils.getChildByName_(this.base, "skin_origin");
        this._particles_ = this.base.getChildByName("ps_spray");
        this._partsFire_ = this.base.getChildByName("ps_fire");
        this._partsFireStart_ = this.base.getChildByName("ps_fire_start");
        this._trail_ = this.base.getChildByName("trail");
        this._material_ = sphere.meshRenderer.material.clone();
        sphere.meshRenderer.material = this._material_;
    };
    Ball.prototype.onStart = function () {
    };
    Ball.prototype.setFireMode_ = function (fm) {
        this._fireMode_ = fm;
        this._trail_ && this._trail_.SetActive(!fm);
        if (fm) {
            Sound_1.Sound.play(Sound_1.Sound.fire_start_);
            this.owner.timerOnce(200, this, function () { return Sound_1.Sound.play(Sound_1.Sound.fire_loop_); });
            this._partsFire_ && this._partsFire_.particleSystem.play();
            this._partsFireStart_ && this._partsFireStart_.particleSystem.play();
        }
        else {
            Sound_1.Sound.stop(Sound_1.Sound.fire_loop_);
            this._partsFire_ && this._partsFire_.particleSystem.stop();
        }
        var component = this.owner.getComponent(Laya.PhysicsCollider);
        if (component != null) {
            // component.isTrigger = fm;
            component.isTrigger = fm;
        }
    };
    Ball.prototype.Reset = function () {
        if (this._ballParts_ != null) {
            Object.Destroy(this._ballParts_);
        }
        this._ballParts_ = null;
        this._coreSphere_ && this._coreSphere_.SetActive(true);
        this._trail_ && this._trail_.SetActive(true);
        this.killCounter_ = 0;
        this._fireMode_ = false;
        this._isKilled_ = false;
    };
    Ball.prototype.SetColor = function (c) {
        this._color_ = c;
        this._material_.albedoColor = c.toV4();
        this._particles_.particleSystem.startColorConstant = c.toV4();
        // (this._particles_.particleRenderer.material as Laya.ShurikenParticleMaterial).color = c.toV4();
        // this.owner.GetComponentInChildren(Laya.MeshRenderer).material.color = c;
        // this._particles_.GetComponent(Laya.Render).material.color = c;
        // let componentInChildren:Laya.TrailRenderer = GetComponentInChildren(Laya.TrailRenderer);
        // c.a = 0.8;
        // componentInChildren.startColor = c;
        if (this._trail_) {
            this._trail_.trailRenderer.material.color = c.toV4();
        }
    };
    Ball.prototype.GetColor = function () {
        return this._color_;
    };
    Ball.prototype.RunParticles = function () {
        // return;
        // let gameObject:Laya.ShuriKenParticle3D = Laya.Sprite3D.instantiate(this._particles_, this.base.parent) as any;
        this._particles_.transform.position = this.base.transform.position.plus(Laya.Vector3.down.scale(0.1)); //this.base.transform.position + Laya.Vector3.down * 0.1;
        this._particles_.particleSystem.play();
    };
    Ball.prototype.Kill = function () {
        this.RunParticles();
        // this.RunParticles();
        this._isKilled_ = true;
        if (this._ballParts_ == null) {
            this._trail_ && this._trail_.SetActive(false);
            this._coreSphere_ && this._coreSphere_.SetActive(false);
            if (this._prefBallParts_) {
                this._ballParts_ = Laya.Sprite3D.instantiate(this._prefBallParts_, this.owner);
                this._ballParts_.transform.localPosition = Laya.Vector3.zero;
                for (var i = 0; i < this._ballParts_.numChildren; i++) {
                    var item = this._ballParts_.getChildAt(i);
                    item.meshRenderer.material.albedoColor = this._color_.toV4();
                    item.getComponent(Laya.Rigidbody3D).linearVelocity = Laya.Vector3.up.scale(Math.randFloat(0.2, 0.6)).add(Laya.Vector3.right.scale(Math.randFloat(-0.6, 0.6)).add(Laya.Vector3.back));
                }
            }
        }
    };
    Object.defineProperty(Ball.prototype, "bottom", {
        get: function () {
            this.base.transform.position.cloneTo(this._bottom);
            this._bottom.y -= 0.3;
            return this._bottom;
        },
        enumerable: true,
        configurable: true
    });
    return Ball;
}(Entity_1.Entity));
exports.Ball = Ball;

},{"../core/Entity":12,"../core/LayaUtils":15,"./Sound":38,"tslib":3}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var Ball_1 = require("./Ball");
var Sound_1 = require("./Sound");
var Game_1 = require("./Game");
var EffectProc_1 = require("../core/effect/EffectProc");
var BallMover = /** @class */ (function (_super) {
    tslib_1.__extends(BallMover, _super);
    function BallMover() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._radius_ = 0.2;
        _this._velocity_ = 6.95;
        _this._moveTimeStart_ = -1;
        _this._wallTime_ = -1;
        _this._tmp_minPos = new Laya.Vector3;
        _this.LastKillPos = new Laya.Vector3;
        return _this;
    }
    Object.defineProperty(BallMover.prototype, "moveTime", {
        get: function () {
            if (this._moveTimeStart_ < 0) {
                return -1;
            }
            return Laya.timer.currTimerSec - this._moveTimeStart_;
        },
        enumerable: true,
        configurable: true
    });
    BallMover.prototype.antiWallTime_ = function () {
        return Math.clamp(this.moveTime / 10, 0.1, 0.12);
    };
    Object.defineProperty(BallMover.prototype, "isMoved", {
        get: function () {
            return this._moveUp_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BallMover.prototype, "isStopped", {
        get: function () {
            return this._stopped_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BallMover.prototype, "pos_", {
        get: function () {
            var result = new Laya.Vector3();
            Laya.Vector3.min(this.minPos, this.base.transform.position, result);
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BallMover.prototype, "minPos", {
        get: function () {
            this.LastKillPos.cloneTo(this._tmp_minPos);
            this._tmp_minPos.y = this.LastKillPos.y + this._radius_;
            return this._tmp_minPos;
        },
        enumerable: true,
        configurable: true
    });
    BallMover.prototype.onAwake = function () {
        this._fxProc_ = this.owner.getComponent(EffectProc_1.EffectProc);
        this._rigBody_ = this.owner.getComponent(Laya.Rigidbody3D);
        this._rigBody_.enabled = false;
    };
    BallMover.prototype.reset_ = function (vPos) {
        vPos = vPos || Laya.Vector3.zero;
        this._kill_ = false;
        this._moveUp_ = false;
        this._stopped_ = false;
        this._pressed_ = false;
        this._wallTime_ = -1;
        this._moveTimeStart_ = -1;
        this._jumpTime_ = Laya.timer.currTimerSec;
        vPos.cloneTo(this.LastKillPos);
        this._lastJump_ = 0;
        this.base.transform.localPosition = Laya.Vector3.zero;
        this._rigBody_.linearVelocity = Laya.Vector3.zero;
        this._rigBody_.enabled = false;
    };
    BallMover.prototype.ballWall_ = function () {
        this._rigBody_.linearVelocity = Laya.Vector3.zero;
        this._rigBody_.enabled = false;
        if (this.base.getComponent(Ball_1.Ball).killCounter_ > 0) {
            this._moveUp_ = false;
            this._stopped_ = true;
            this._wallTime_ = Laya.timer.currTimerSec;
            this._jumpTime_ = Laya.timer.currTimerSec + 0.02;
        }
        else {
            this.kill_();
        }
    };
    BallMover.prototype.moveUp_ = function (move) {
        this._pressed_ = move;
        this._stopped_ = false;
        if (this._moveUp_ != move) {
            this._moveUp_ = move;
            if (!move) {
                this._moveTimeStart_ = -1;
                this._rigBody_.linearVelocity = Laya.Vector3.zero;
                this._rigBody_.enabled = false;
                this._jumpTime_ = Laya.timer.currTimerSec + 0.1;
            }
            else {
                this._moveTimeStart_ = Laya.timer.currTimerSec;
                this._rigBody_.linearVelocity = Laya.Vector3.down.scale(this._velocity_);
                this._rigBody_.enabled = true;
                this.base.getComponent(Ball_1.Ball).killCounter_ = 0;
            }
        }
    };
    BallMover.prototype.onUpdate = function () {
        // return;
        if (!this._kill_) {
            if (this._stopped_) {
                var num = Laya.timer.currTimerSec - this._wallTime_;
                if (this._pressed_ && num > this.antiWallTime_()) {
                    this.kill_();
                }
            }
            else {
                var num2 = Laya.timer.currTimerSec - this._jumpTime_;
                if (!this._pressed_ && num2 >= 0) {
                    var num3 = 6;
                    var num4 = 1.1;
                    var num5 = Math.abs(Math.sin(num2 * num3));
                    var position = this.base.transform.position;
                    position.y = this.LastKillPos.y + this._radius_ + num4 * num5;
                    this.base.transform.position = position;
                    // let num6:number = Math.sin(num2 * num3 * 2) * 0.15;
                    // let b:Laya.Vector3 = Laya.Vector3.right.scale(num6).add(Laya.Vector3.forward.scale(num6)).add(Laya.Vector3.up.scale(0 - num6));
                    // this.base.transform.localScale = Laya.Vector3.one.plus(b);
                    if (Laya.timer.currTimerSec - this._lastJump_ > 0.2 && num5 < 0.1) {
                        this._lastJump_ = Laya.timer.currTimerSec;
                        app.vibrate(500);
                        Sound_1.Sound.play(Sound_1.Sound.jump_);
                        this.base.getComponent(Ball_1.Ball).RunParticles();
                    }
                }
            }
        }
    };
    BallMover.prototype.kill_ = function () {
        this._kill_ = true;
        Game_1.Game.inst_.onCrash_();
        this.base.getComponent(Ball_1.Ball).Kill();
        this._rigBody_.linearVelocity = Laya.Vector3.zero;
        this._rigBody_.enabled = false;
    };
    return BallMover;
}(Entity_1.Entity));
exports.BallMover = BallMover;

},{"../core/Entity":12,"../core/effect/EffectProc":19,"./Ball":28,"./Game":34,"./Sound":38,"tslib":3}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var FireBallProc = /** @class */ (function (_super) {
    tslib_1.__extends(FireBallProc, _super);
    function FireBallProc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._killsToStart_ = 10;
        _this._fillSpeed_ = 0.05;
        _this._unfillSpeed_ = 0.25;
        _this._fireSpeed_ = 0.4;
        _this._numKills_ = 0;
        _this._fireFill_ = 0;
        _this._accFire_ = false;
        _this._fire_ = false;
        return _this;
    }
    FireBallProc.prototype.onStart = function () {
    };
    FireBallProc.prototype.reset_ = function () {
        this._numKills_ = 0;
        this._accFire_ = false;
        this._fire_ = false;
        this._fireFill_ = 0;
    };
    FireBallProc.prototype.onKillBrick_ = function () {
        this._numKills_++;
        if (this._numKills_ > this._killsToStart_ && !this._accFire_ && !this._fire_) {
            this._accFire_ = true;
            this._fireFill_ += this._fillSpeed_;
        }
        if (this._accFire_) {
            this._fireFill_ += this._fillSpeed_;
            if (this._fireFill_ >= 1) {
                this._accFire_ = false;
                this._fire_ = true;
            }
            this._fireFill_ = Math.clamp(this._fireFill_, 0, 1);
        }
    };
    FireBallProc.prototype.getFill_ = function () {
        return this._fireFill_;
    };
    FireBallProc.prototype.isAccFire_ = function () {
        return this._accFire_;
    };
    FireBallProc.prototype.isFire_ = function () {
        return this._fire_;
    };
    FireBallProc.prototype.onUpdate = function () {
        if (this._fireFill_ > 0) {
            if (this._fire_) {
                this._fireFill_ -= Laya.timer.deltaSec * this._fireSpeed_;
            }
            else {
                this._fireFill_ -= Laya.timer.deltaSec * this._unfillSpeed_;
            }
            if (this._fireFill_ <= 0) {
                this._numKills_ = 0;
                this._accFire_ = false;
                this._fire_ = false;
            }
            this._fireFill_ = Math.clamp(this._fireFill_, 0, 1);
        }
    };
    return FireBallProc;
}(Entity_1.Entity));
exports.FireBallProc = FireBallProc;

},{"../core/Entity":12,"tslib":3}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var FloorPart_1 = require("./FloorPart");
var Game_1 = require("./Game");
var Sound_1 = require("./Sound");
var EffectProc_1 = require("../core/effect/EffectProc");
var FxScale_1 = require("../core/effect/FxScale");
var Floor = /** @class */ (function (_super) {
    tslib_1.__extends(Floor, _super);
    function Floor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._parts_ = [];
        _this.degree = 0;
        _this.degreeOffset = 0;
        return _this;
    }
    Object.defineProperty(Floor.prototype, "isKilled_", {
        get: function () {
            return this._killed_;
        },
        enumerable: true,
        configurable: true
    });
    Floor.prototype.onAwake = function () {
        this._numParts_ = +this.base.name.split("_").pop();
        this.degree = 360 / this._numParts_;
        this.buildObj_();
    };
    Floor.prototype.findFirstObj_ = function () {
        for (var _i = 0, _a = this.base._children; _i < _a.length; _i++) {
            var item = _a[_i];
            return item;
        }
        return null;
    };
    Floor.prototype.buildObj_ = function () {
        var gameObject = this.findFirstObj_();
        var num = 360 / this._numParts_;
        var fp = gameObject.addComponent(FloorPart_1.FloorPart);
        this._parts_.push(fp);
        // let translateM = new Laya.Matrix4x4();
        // Laya.Matrix4x4.createTranslate(gameObject.transform.localPosition.scale(-1),translateM);
        // let rotationM = new Laya.Matrix4x4();
        // Laya.Matrix4x4.createRotationY(Math.rad(-90),rotationM);
        // let translateM1 = new Laya.Matrix4x4();
        // Laya.Matrix4x4.createTranslate(gameObject.transform.localPosition,translateM1);
        // let matrix = gameObject.transform.localMatrix.clone() as Laya.Matrix4x4;
        // Laya.Matrix4x4.multiply(matrix,translateM,matrix);
        // Laya.Matrix4x4.multiply(matrix,rotationM,matrix);
        // Laya.Matrix4x4.multiply(matrix,translateM1,matrix);
        // gameObject.transform.localMatrix = matrix;
        for (var i = 1; i < this._numParts_; i++) {
            var gameObject2 = Laya.Sprite3D.instantiate(gameObject, this.base);
            var translateM = new Laya.Matrix4x4();
            Laya.Matrix4x4.createTranslate(gameObject.transform.localPosition.scale(-1), translateM);
            var rotationM = new Laya.Matrix4x4();
            Laya.Matrix4x4.createRotationY(Math.rad(num * i), rotationM);
            var translateM1 = new Laya.Matrix4x4();
            Laya.Matrix4x4.createTranslate(gameObject.transform.localPosition, translateM1);
            var matrix = gameObject2.transform.localMatrix.clone();
            Laya.Matrix4x4.multiply(matrix, translateM, matrix);
            Laya.Matrix4x4.multiply(matrix, rotationM, matrix);
            Laya.Matrix4x4.multiply(matrix, translateM1, matrix);
            gameObject2.transform.localMatrix = matrix;
            fp = gameObject2.addComponent(FloorPart_1.FloorPart);
            this._parts_.push(fp);
        }
    };
    Floor.prototype.setColors_ = function (c1, c2) {
        this._c1_ = c1;
        this._c2_ = c2;
        for (var _i = 0, _a = this._parts_; _i < _a.length; _i++) {
            var part = _a[_i];
            part.setColor_(c1);
        }
    };
    Floor.prototype.setMask_ = function (mask, c1, c2) {
        this._c1_ = c1 || this._c1_;
        this._c2_ = c2 || this._c2_;
        for (var i = 0; i < mask.length && i < this._parts_.length; i++) {
            var figurePart = this._parts_[i];
            if (mask[i] == 1) {
                figurePart.setWall();
                figurePart.setColor_(this._c2_);
            }
            else {
                figurePart.setColor_(this._c1_);
            }
        }
    };
    Floor.prototype.triggerEnter_ = function (part) {
        // console.log("_TriggerEnter");
        this.killMe_();
        Game_1.Game.inst_.onBlockCrash_();
    };
    Floor.prototype.scaleEffect_ = function () {
        var localScale = this.base.transform.localScale.clone();
        var vector = this.base.transform.localScale.scale(1.2).setY(localScale.y);
        var component = this.getComponent_(EffectProc_1.EffectProc);
        if (component && !component.hasEffects_()) {
            component.AddEffect(new FxScale_1.FxScale(localScale, vector, 0.1, false));
            component.AddEffect(new FxScale_1.FxScale(vector, localScale, 0.15, false));
            Sound_1.Sound.play(Sound_1.Sound.ball_brick_);
        }
    };
    Floor.prototype.killMe_ = function () {
        this._killed_ = true;
        while (this.base.numChildren > 0) {
            var item = this.base.getChildAt(0);
            var worldMatrix = item.transform.worldMatrix;
            item.transform.worldMatrix.cloneTo(worldMatrix);
            this.base.parent.parent.addChild(item);
            item.transform.worldMatrix = worldMatrix;
            var b = (item.transform.position.x < 0) ? -1 : 1;
            var component = item.getComponent(Laya.Rigidbody3D);
            component.enabled = true;
            // component.constraints = Laya.RigidbodyConstraints.None;
            component.linearVelocity = new Laya.Vector3(b * 0.5, 1.5, 0.5).multiplyScalar(Math.randInt(3, 8)); //Laya.Vector3.up.plus(b).add(Laya.Vector3.forward).multiplyScalar(6);
            component.angularVelocity = new Laya.Vector3(0, 0, b * Math.randFloat(0, Math.PI / 2));
            setTimeout(function (a) {
                a.destroy(true);
            }, 3000, item);
        }
        this.base.destroy();
    };
    Floor.prototype.onHit_ = function (obj, spinDegree) {
        // console.log("sfsaf",spinDegree);
        for (var i = 0; i < this._parts_.length; i++) {
            var part = this._parts_[i];
            var start = (i * this.degree + spinDegree + Math.deg(this.degreeOffset)) % 360;
            var end = start + this.degree;
            if (start < 269 && end > 271) {
                // part.SetColor(Color.white);
                part.onHit(obj);
                break;
            }
        }
    };
    return Floor;
}(Entity_1.Entity));
exports.Floor = Floor;

},{"../core/Entity":12,"../core/effect/EffectProc":19,"../core/effect/FxScale":20,"./FloorPart":33,"./Game":34,"./Sound":38,"tslib":3}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BallMover_1 = require("./BallMover");
var Entity_1 = require("../core/Entity");
var Ball_1 = require("./Ball");
var Sound_1 = require("./Sound");
var LayaUtils_1 = require("../core/LayaUtils");
var PaintDot_1 = require("./PaintDot");
var FloorFinish = /** @class */ (function (_super) {
    tslib_1.__extends(FloorFinish, _super);
    function FloorFinish() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FloorFinish.prototype.onAwake = function () {
        this._topObj_ = LayaUtils_1.LayaUtils.getChildByName_(this.base, "top");
        this._topMaterial_ = this._topObj_.meshRenderer.material.clone();
        this._topObj_.meshRenderer.material = this._topMaterial_;
    };
    FloorFinish.prototype.setColor_ = function (col) {
        if (this._topObj_) {
            this._topMaterial_.albedoColor = new Laya.Vector4(col.r, col.g, col.b, col.a);
        }
    };
    FloorFinish.prototype.scaleEffect_ = function () {
        Sound_1.Sound.play(Sound_1.Sound.ball_brick_);
        // let localScale:Laya.Vector3 = this._coreObj_.transform.localScale;
        // let vector:Laya.Vector3 = localScale.scale(1.2).setY(localScale.y);
        // let vector2:Laya.Vector3 = localScale.scale(0.92).setY(localScale.y);
        // let vector3:Laya.Vector3 = localScale.scale(1.05).setY(localScale.y);
        // let component:EffectProc = this._coreObj_.getComponent(EffectProc);
        // if (component && !component.HasEffects())
        // {
        // 	component.AddEffect(new FxScale(localScale, vector, 0.2, false));
        // 	component.AddEffect(new FxScale(vector, vector2, 0.15, false));
        // 	component.AddEffect(new FxScale(vector2, vector3, 0.1, false));
        // 	component.AddEffect(new FxScale(vector3, localScale, 0.06, false));
        // 	Sound.play(Sound.ball_brick, 0);
        // }
    };
    FloorFinish.prototype.onHit = function (obj, degree) {
        // console.log("FinishLine hit...");
        var ballMover = obj.getComponent(BallMover_1.BallMover);
        var ball = obj.getComponent(Ball_1.Ball);
        if (ball.isFireMode_) {
            ball.setFireMode_(false);
        }
        PaintDot_1.PaintDot.BornInq(obj, this.base);
    };
    return FloorFinish;
}(Entity_1.Entity));
exports.FloorFinish = FloorFinish;

},{"../core/Entity":12,"../core/LayaUtils":15,"./Ball":28,"./BallMover":29,"./PaintDot":36,"./Sound":38,"tslib":3}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var BallMover_1 = require("./BallMover");
var Ball_1 = require("./Ball");
var Floor_1 = require("./Floor");
var PaintDot_1 = require("./PaintDot");
var Game_1 = require("./Game");
var FloorPart = /** @class */ (function (_super) {
    tslib_1.__extends(FloorPart, _super);
    function FloorPart() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._wall_ = false;
        return _this;
    }
    FloorPart.prototype.onAwake = function () {
        this._wall_ = false;
        this.base.getComponent(Laya.Rigidbody3D).enabled = false;
    };
    FloorPart.prototype.setWall = function () {
        this._wall_ = true;
    };
    FloorPart.prototype.setColor_ = function (c) {
        this.base.meshRenderer.material.albedoColor = c.toV4();
    };
    FloorPart.prototype.onHit = function (obj) {
        var ballMover = obj.getComponent(BallMover_1.BallMover);
        if (this._wall_ && ballMover.isMoved) {
            this.enterCollision(obj);
        }
        else {
            this.enterTrigger(obj);
        }
    };
    FloorPart.prototype.enterTrigger = function (obj) {
        var ballMover = obj.getComponent(BallMover_1.BallMover);
        var ball = obj.getComponent(Ball_1.Ball);
        if (ball.IsKilled)
            return;
        if (!ballMover.isStopped && ballMover.isMoved) {
            var figure = this.base.parent.getComponent(Floor_1.Floor);
            if (figure != null) {
                // Laya.Vector3.min(figure.transform.position, ballMover.LastKillPos,ballMover.LastKillPos);
                figure.triggerEnter_(this);
                ++ball.killCounter_;
                Game_1.Game.inst_._stackBuilder_.topFigurePos_().cloneTo(ballMover.LastKillPos);
            }
        }
        else {
            PaintDot_1.PaintDot.BornInq(obj, this.base);
        }
    };
    FloorPart.prototype.enterCollision = function (obj) {
        var ballMover = obj.getComponent(BallMover_1.BallMover);
        if (this._wall_ && ballMover.isMoved) {
            var ball = ballMover.getComponent_(Ball_1.Ball);
            if (ball.isFireMode_) {
                this.enterTrigger(obj);
            }
            else {
                var figure = this.base.parent.getComponent(Floor_1.Floor);
                if (!figure.isKilled_) {
                    figure.scaleEffect_();
                    ballMover.ballWall_();
                    PaintDot_1.PaintDot.BornInq(obj, this.base);
                }
            }
        }
    };
    return FloorPart;
}(Entity_1.Entity));
exports.FloorPart = FloorPart;

},{"../core/Entity":12,"./Ball":28,"./BallMover":29,"./Floor":31,"./Game":34,"./PaintDot":36,"tslib":3}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Ball_1 = require("./Ball");
var Entity_1 = require("../core/Entity");
var BallMover_1 = require("./BallMover");
var FireBallProc_1 = require("./FireBallProc");
var BGColor_1 = require("./BGColor");
var Skin_1 = require("./Skin");
var GameStats_1 = require("./GameStats");
var Sound_1 = require("./Sound");
var UICenter_1 = require("./UICenter");
var LayaUtils_1 = require("../core/LayaUtils");
var PaintDot_1 = require("./PaintDot");
var ShareHelper_1 = require("../share/ShareHelper");
var StackTower_1 = require("./StackTower");
var EffectProc_1 = require("../core/effect/EffectProc");
var Floor_1 = require("./Floor");
var FloorFinish_1 = require("./FloorFinish");
var Constant_1 = require("../Constant");
var Game = /** @class */ (function (_super) {
    tslib_1.__extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._pitch_ = 1;
        _this._spinDegree_ = 0;
        _this._spinRotation_ = new Laya.Vector3();
        Game._instance = _this;
        return _this;
    }
    Object.defineProperty(Game.prototype, "isFinished", {
        get: function () { return this._finished_; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Game.prototype, "isDead", {
        get: function () { return this._ball_.IsKilled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Game, "inst_", {
        get: function () { return this._instance; },
        enumerable: true,
        configurable: true
    });
    Game.prototype.onAwake = function () {
        var shapes = [];
        var figure_layer = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Library/shapes");
        for (var i = 0; i < figure_layer.numChildren; i++) {
            var item = figure_layer.getChildAt(i);
            // item.removeSelf();
            shapes.push(item);
        }
        figure_layer.removeChildren();
        figure_layer.removeSelf();
        this._share_list = shapes;
        var inq_prefab = LayaUtils_1.LayaUtils.getChildByName_(this.base, "Library/paint");
        PaintDot_1.PaintDot.inq_profeb = inq_prefab;
        inq_prefab.removeSelf();
        this._stackBuilder_ = this.base.addComponent(StackTower_1.StackTower);
        this._stackBuilder_._obj_cylinder = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Game/stack/cylinder");
        this._stackBuilder_.obj_con_ = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Game/stack/floors");
        this._stackBuilder_.prefab_finish_ = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Library/floor_finish");
        this._stackBuilder_.prefab_finish_.removeSelf();
        this._ps_win = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Game/ps_win");
        this._camera_ = LayaUtils_1.LayaUtils.getChildByName_(this.owner, "Game/camera_wapper");
        this._camera_.getChildByName("camera").clearColor = new Laya.Vector4(0, 0, 0, 0);
        var ballObj = LayaUtils_1.LayaUtils.getChildByName_(this.base, "Game/ball"); //this.base.getChildByName
        ballObj.addComponent(EffectProc_1.EffectProc);
        this._ballMover_ = ballObj.addComponent(BallMover_1.BallMover);
        this._ball_ = ballObj.addComponent(Ball_1.Ball);
        this._bg_ = this.owner.addComponent(BGColor_1.BGColor);
        this._fire_ = this.base.addComponent(FireBallProc_1.FireBallProc);
        this._startPos_ = this._ballMover_.transform.position;
        this._ui_ = new UICenter_1.UICenter();
        this._ui_.game_ = this;
        Sound_1.Sound.preload();
    };
    Game.prototype.getShape_ = function (level) {
        return this._share_list[level % this._share_list.length];
    };
    Game.prototype.getSkin_ = function (level) {
        if ($sys_prefer_skin.length > 0)
            return Skin_1.Skin.create.apply(null, $sys_prefer_skin);
        if (!this._skin_list) {
            this._skin_list = $sys_skins.map(function (colors) { return Skin_1.Skin.create.apply(null, colors); });
        }
        return this._skin_list[level % this._skin_list.length];
    };
    Game.prototype.onStart = function () {
        this.restart_();
    };
    Game.prototype.onUpdate = function () {
        // return;
        this._ui_._gameUI_.updateFireBar_(this._fire_.getFill_());
        this._ui_._gameUI_.showFireBar_(this._fire_.isFire_() || this._fire_.isAccFire_(), this._fire_.isFire_());
        this._ui_._gameUI_.showWarningFire_(this._fire_.isFire_() && this._fire_.getFill_() < 0.2);
        this._ui_._gameUI_.onUpdate();
        if (!this._fire_.isFire_() && this._ball_.isFireMode_) {
            this._ball_.setFireMode_(false);
        }
        this.fixedUpdate_();
        var rotateDelta = Laya.timer.deltaSec * Math.deg(1.1);
        this._spinDegree_ += rotateDelta;
        this._spinRotation_.setY(rotateDelta);
        this._stackBuilder_.obj_con_.transform.rotate(this._spinRotation_, true, false);
        this.hitTest();
    };
    Game.prototype.hitTest = function () {
        if (this._ball_.IsKilled)
            return;
        var obstacle = this._stackBuilder_.topFloor_();
        if (!obstacle)
            return;
        if (this._ball_.bottom.y > obstacle.transform.position.y) {
            return;
        }
        var figure = obstacle.getComponent(Floor_1.Floor);
        if (figure) {
            figure.onHit_(this._ball_.base, this._spinDegree_);
            return;
        }
        var finsish = obstacle.getComponent(FloorFinish_1.FloorFinish);
        if (finsish) {
            finsish.onHit(this._ball_.base, this._spinDegree_);
            if (!this._finished_) {
                this.onFinish_();
            }
            return;
        }
    };
    Game.prototype.restart_ = function () {
        console.log("restart_ ....");
        this._pitch_ = 0;
        this._numKilled_ = 0;
        this._bContinue_ = false;
        this._finished_ = false;
        this._ballMover_.transform.position = this._startPos_;
        this._ballMover_.reset_();
        this._ball_.Reset();
        this._ball_.setFireMode_(false);
        var shape = this.getShape_(GameStats_1.GameStats.inst_.level);
        var skin = this.getSkin_(GameStats_1.GameStats.inst_.level);
        this._numBricks_ = this._stackBuilder_.build_(GameStats_1.GameStats.inst_.level, skin, shape);
        this._ui_._gameUI_.showFireBar_(false);
        this._bg_.changeColor_(skin.bg_top, skin.bg_bottom, 0);
        this._ball_.SetColor(skin.ball_color);
        this._ui_._gameUI_.setColor_(skin.ball_color);
        this._camera_.transform.position = Laya.Vector3.zero;
        this._spinDegree_ = 0;
        this._stackBuilder_.obj_con_.transform.localRotation = new Laya.Quaternion;
        platform.log(Constant_1.Constant.Analytics.level_begin, { level: GameStats_1.GameStats.inst_.level });
    };
    Game.prototype.continue_ = function () {
        this._bContinue_ = true;
        var vPos = this._stackBuilder_.topFigurePos_();
        this._ballMover_.reset_(vPos);
        this._ball_.Reset();
    };
    Game.prototype.fixedUpdate_ = function () {
        if (this._numKilled_ >= 0 && this._numBricks_ - this._numKilled_ > 2) {
            var z = this._camera_.transform.position.z;
            var position = new Laya.Vector3;
            Laya.Vector3.lerp(this._camera_.transform.position, this._ballMover_.pos_, 0.1, position);
            position.z = z;
            position.x = 0;
            this._camera_.transform.position = position;
        }
        this._pitch_ -= 0.011;
        if (this._pitch_ < 1) {
            this._pitch_ = 1;
        }
    };
    Game.prototype.onCrash_ = function () {
        Sound_1.Sound.play(Sound_1.Sound.game_over_);
        app.vibrate(1500);
        this._ui_.showGameOver_(!this._bContinue_ && this._numKilled_ > 10, GameStats_1.GameStats.inst_.scores);
        this._fire_.reset_();
        GameStats_1.GameStats.inst_.best_score = GameStats_1.GameStats.inst_.scores;
        GameStats_1.GameStats.inst_.scores = 0;
        platform.setHightScore(GameStats_1.GameStats.inst_.best_score);
        ShareHelper_1.ShareHelper.sendScore(GameStats_1.GameStats.inst_.best_score);
        platform.log(Constant_1.Constant.Analytics.level_end, { result: 0, level: GameStats_1.GameStats.inst_.level });
    };
    Game.prototype.onFinish_ = function () {
        if (this._finished_)
            return;
        this._ps_win.transform.position = this._stackBuilder_.topFigurePos_();
        this._ps_win.particleSystem.play();
        this.onPress_(false);
        this._finished_ = true;
        app.vibrate(1000);
        Sound_1.Sound.play(Sound_1.Sound.game_compl_);
        this._ui_.showWin_(GameStats_1.GameStats.inst_.level);
        this._fire_.reset_();
        platform.showIADAuto_("level_finish");
        GameStats_1.GameStats.inst_.best_score = GameStats_1.GameStats.inst_.scores;
        platform.setHightScore(GameStats_1.GameStats.inst_.best_score);
        platform.log(Constant_1.Constant.Analytics.level_end, { result: 1, level: GameStats_1.GameStats.inst_.level });
    };
    Game.prototype.onPress_ = function (pressed) {
        if (pressed) {
            if (this.isFinished || this.isDead)
                return;
            this._ui_.showMainMenu_(false);
        }
        this._ballMover_.moveUp_(pressed);
    };
    Game.prototype.onBlockCrash_ = function () {
        Sound_1.Sound.playPitch_(Sound_1.Sound.brick_, this._pitch_);
        app.vibrate(500);
        this._pitch_ += 0.06;
        this._numKilled_++;
        if (!this._fire_.isFire_()) {
            var num = ++GameStats_1.GameStats.inst_.scores;
        }
        else {
            GameStats_1.GameStats.inst_.scores += 2;
        }
        this._ui_._gameUI_.updateUI_(this._numKilled_ / this._numBricks_, GameStats_1.GameStats.inst_.scores);
        this._stackBuilder_.updateVisible_();
        this._fire_.onKillBrick_();
        if (this._fire_.isFire_()) {
            if (!this._ball_.isFireMode_) {
                this._ball_.setFireMode_(true);
            }
        }
        else if (this._ball_.isFireMode_) {
            this._ball_.setFireMode_(false);
        }
    };
    return Game;
}(Entity_1.Entity));
exports.Game = Game;

},{"../Constant":6,"../core/Entity":12,"../core/LayaUtils":15,"../core/effect/EffectProc":19,"../share/ShareHelper":61,"./BGColor":27,"./Ball":28,"./BallMover":29,"./FireBallProc":30,"./Floor":31,"./FloorFinish":32,"./GameStats":35,"./PaintDot":36,"./Skin":37,"./Sound":38,"./StackTower":40,"./UICenter":41,"tslib":3}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameStats = /** @class */ (function () {
    function GameStats() {
        this.scores = 0;
        GameStats._inst = this;
    }
    Object.defineProperty(GameStats, "inst_", {
        get: function () {
            if (!GameStats._inst) {
                GameStats._inst = new GameStats;
            }
            return GameStats._inst;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameStats.prototype, "level", {
        get: function () {
            return platform.remoteData.level;
        },
        set: function (v) {
            platform.remoteData.level = v;
            platform.remoteData.isDirty = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameStats.prototype, "best_score", {
        get: function () {
            return platform.remoteData.best_score;
        },
        set: function (v) {
            if (v <= platform.remoteData.best_score)
                return;
            platform.remoteData.best_score = v;
            platform.remoteData.isDirty = true;
        },
        enumerable: true,
        configurable: true
    });
    return GameStats;
}());
exports.GameStats = GameStats;

},{}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var BallMover_1 = require("./BallMover");
var Ball_1 = require("./Ball");
var PaintDot = /** @class */ (function (_super) {
    tslib_1.__extends(PaintDot, _super);
    function PaintDot() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._lifeTime_ = 3;
        _this._time_ = 0;
        return _this;
    }
    PaintDot.prototype.onAwake = function () {
        this._lifeTime_ = Math.randInt(15, 25);
        Object.Destroy(this.base, this._lifeTime_ + 0.1);
        var display = this.base.getChildByName("Quad");
        this._material_ = display.meshRenderer.material.clone();
        display.meshRenderer.material = this._material_;
    };
    PaintDot.prototype.build_ = function (c) {
        this._color_ = c;
        this._material_.albedoColor = this._color_.toV4();
    };
    PaintDot.prototype.onUpdate = function () {
        this._time_ += Laya.timer.deltaSec;
        var a = 1 - Math.clamp(this._time_ / this._lifeTime_, 0, 1);
        // let color:Color = this._color_;
        // color.a = a;
        // this._material_.albedoColor = this._color_.toV4();
        this._material_.albedoColorA = a;
    };
    PaintDot.BornInq = function (other, parent) {
        var prefab = PaintDot.inq_profeb;
        if (!prefab)
            return;
        var bm = other.getComponent(BallMover_1.BallMover);
        if (bm && bm.isMoved)
            return;
        var ball = other.getComponent(Ball_1.Ball);
        var gameObject = Laya.Sprite3D.instantiate(prefab, parent);
        var position = ball.bottom;
        gameObject.transform.position = new Laya.Vector3(position.x, parent.transform.position.y + 0.01, position.z);
        gameObject.transform.localScale = Laya.Vector3.one.scale(Math.randFloat(1, 2));
        gameObject.transform.rotate(new Laya.Vector3(0, Math.randInt(0, 300), 0), true, false);
        var inqDot = gameObject.addComponent(PaintDot);
        inqDot.build_(other.getComponent(Ball_1.Ball).GetColor());
    };
    return PaintDot;
}(Entity_1.Entity));
exports.PaintDot = PaintDot;

},{"../core/Entity":12,"./Ball":28,"./BallMover":29,"tslib":3}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Color_1 = require("../core/Color");
function createColor(hex) {
    var color = new Color_1.Color();
    color.setHex(hex);
    color.a = 1;
    return color;
}
var Skin = /** @class */ (function () {
    function Skin() {
    }
    Skin.create = function (colBall, colBG1, colBG2, colObj1, colObj2, colWall) {
        var skin = new Skin();
        skin.ball_color = createColor(colBall);
        skin.bg_top = createColor(colBG1);
        skin.bg_bottom = createColor(colBG2);
        skin.floor_top = createColor(colObj1);
        skin.floor_bottom = createColor(colObj2);
        skin.colWall = createColor(colWall);
        return skin;
    };
    return Skin;
}());
exports.Skin = Skin;

},{"../core/Color":10}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var howler_1 = require("howler");
var Sound;
(function (Sound) {
    Sound.jump_ = "audio/brick";
    Sound.ball_brick_ = "audio/ball_brick";
    Sound.game_over_ = "audio/game_over";
    Sound.game_compl_ = "audio/game_compl";
    Sound.brick_ = "audio/brick";
    Sound.fire_start_ = "audio/fire_start";
    Sound.fire_loop_ = "audio/fire_loop";
    function preload() {
        [
            Sound.jump_, Sound.ball_brick_, Sound.game_over_, Sound.game_compl_, Sound.brick_, Sound.fire_start_, Sound.fire_loop_
        ].forEach(function (v) { return getHowl(v); });
    }
    Sound.preload = preload;
    var howlMap = {};
    function getHowl(name) {
        var howler = howlMap[name] || (howlMap[name] = new howler_1.Howl({
            onloaderror: function (e, msg) {
                console.log("audio error:" + name, msg);
            },
            src: [name + ".webm", name + ".mp3"] //".webm"
        }));
        return howler;
    }
    function setMute(mute) {
        howler_1.Howler.mute(mute);
        localStorage.setItem("sound_mute", mute ? "true" : "false");
        return mute;
    }
    Sound.setMute = setMute;
    function getMeute() {
        return localStorage.getItem("sound_mute") != "false";
    }
    Sound.getMeute = getMeute;
    function play(name) {
        var howler = getHowl(name);
        howler.play();
        return true;
    }
    Sound.play = play;
    function playPitch_(name, pitch) {
        var howler = getHowl(name);
        var id = howler.play();
        howler.rate(pitch, id);
    }
    Sound.playPitch_ = playPitch_;
    function stop(name) {
        var howler = getHowl(name);
        howler.stop();
        return true;
    }
    Sound.stop = stop;
})(Sound = exports.Sound || (exports.Sound = {}));

},{"howler":1}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StackSetting = /** @class */ (function () {
    function StackSetting() {
        this.length = 40;
        this.startEmpty = 5;
        this.fillMain = 10;
        this.sectorFill = 50;
        this.sectorLenMin = 6;
        this.sectorLenMax = 20;
        this.sectorLenRandom = 5;
    }
    StackSetting.create = function (length, fillMain, sectorFill, sectorLenMax, sectorLenMin, sectorLenRandom, startEmpty) {
        var obj = new StackSetting();
        obj.length = length;
        obj.fillMain = fillMain;
        obj.sectorFill = sectorFill;
        obj.sectorLenMax = sectorLenMax;
        obj.sectorLenMin = sectorLenMin;
        obj.sectorLenRandom = sectorLenRandom;
        obj.startEmpty = startEmpty;
        return obj;
    };
    return StackSetting;
}());
exports.StackSetting = StackSetting;

},{}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Entity_1 = require("../core/Entity");
var StackSetting_1 = require("./StackSetting");
var Color_1 = require("../core/Color");
var FloorFinish_1 = require("./FloorFinish");
var EffectProc_1 = require("../core/effect/EffectProc");
var Floor_1 = require("./Floor");
var StackTower = /** @class */ (function (_super) {
    tslib_1.__extends(StackTower, _super);
    function StackTower() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._selectLevel_ = -1;
        _this._offset_ = 0.33;
        _this._rotateStep_ = -0.05;
        _this._settings_ = [
            StackSetting_1.StackSetting.create(60, 10, 20, 16, 8, 10, 2),
            StackSetting_1.StackSetting.create(68, 20, 35, 16, 5, 10, 2),
            StackSetting_1.StackSetting.create(75, 25, 40, 18, 8, 4, 3),
            StackSetting_1.StackSetting.create(80, 60, 42, 20, 10, 2, 2),
            StackSetting_1.StackSetting.create(80, 80, 5, 14, 6, 3, 3),
            StackSetting_1.StackSetting.create(82, 50, 70, 20, 14, 8, 2),
            StackSetting_1.StackSetting.create(90, 5, 75, 18, 10, 8, 0),
            StackSetting_1.StackSetting.create(96, 80, 70, 26, 12, 4, 1),
            StackSetting_1.StackSetting.create(100, 90, 40, 25, 12, 5, 1)
        ];
        _this._seetingsLoop_ = [
            StackSetting_1.StackSetting.create(100, 65, 75, 20, 10, 5, 1),
            StackSetting_1.StackSetting.create(100, 80, 50, 30, 15, 8, 0),
            StackSetting_1.StackSetting.create(100, 80, 80, 30, 20, 1, 2),
            StackSetting_1.StackSetting.create(100, 90, 15, 14, 6, 3, 0),
        ];
        _this._mask_ = [];
        return _this;
    }
    StackTower.prototype.onAwake = function () {
        for (var i = 0; i < 10; i++) {
            this._mask_.push(0);
        }
    };
    StackTower.prototype.clear_ = function () {
        // this._objCore_.removeChildren();
        this.obj_con_.destroyChildren();
        // this._objCore_.destroyChildren();
        // for(let i=0;i <this._objCore_.numChildren;i++){
        // 	let item  = this._objCore_.getChildAt(i);
        // 	item.destroyChildren()
        // }
        // foreach (Transform item in this._objCore_.transform)
        // {
        // 	Object.Destroy(item.gameObject);
        // }
    };
    StackTower.prototype.build_ = function (iLevel, skin, shape) {
        this._currShape_ = shape;
        this.clear_();
        var settings = this.getSetting_(iLevel);
        var pos = Laya.Vector3.zero;
        if (settings.startEmpty > 0) {
            this.buildSector_(0, settings.startEmpty, settings.length, iLevel, 0, skin.floor_top, skin.floor_bottom, skin.colWall);
        }
        var num;
        var a2;
        for (num = settings.startEmpty; num < settings.length; num += a2) {
            a2 = Math.randInt(0, settings.sectorLenRandom);
            a2 = Math.min(a2, settings.length - num);
            if (a2 > 0) {
                pos = this.buildSector_(num, a2, settings.length, iLevel, settings.fillMain, skin.floor_top, skin.floor_bottom, skin.colWall);
            }
            num += a2;
            a2 = Math.randInt(settings.sectorLenMin, settings.sectorLenMax);
            a2 = Math.min(a2, settings.length - num);
            if (a2 > 0) {
                pos = this.buildSector_(num, a2, settings.length, iLevel, settings.sectorFill, skin.floor_top, skin.floor_bottom, skin.colWall);
            }
        }
        this.createFinish_(pos.plus(Laya.Vector3.down.scale(this._offset_ * 1)), Color_1.Color.Lerp(Color_1.Color.white, skin.ball_color, 0.4));
        var d = (settings.length + 4) * this._offset_;
        this._obj_cylinder.transform.localScale = Laya.Vector3.up.scale(d / 2).add(Laya.Vector3.right).add(Laya.Vector3.forward);
        this._obj_cylinder.transform.localPosition = Laya.Vector3.down.scale(d / 2).add(Laya.Vector3.up.scale(this._offset_ * 3));
        return settings.length;
    };
    StackTower.prototype.buildSector_ = function (i, len, fullLen, levelNum, fill, c1, c2, cW) {
        var result = Laya.Vector3.zero;
        var numParts = +this._currShape_.name.split("_").pop(); //this._currShape_.getComponent(Figure)._numParts_;
        this.fillWall_(this._mask_, numParts, fill, i / fullLen);
        var num = Math.randInt(0, 3);
        for (var j = 0; j < len; j++) {
            var c3 = Color_1.Color.Lerp(c1, c2, i / (fullLen - 1));
            var figure = this.createFloor_(Laya.Vector3.down.scale(i * this._offset_), i * this._rotateStep_);
            if (num == 0) {
                if (Math.randInt(0, 100) < 60) {
                    figure.setMask_(this._mask_, c3, cW);
                }
                else {
                    figure.setColors_(c3, cW);
                }
            }
            else if (j % num == 0) {
                figure.setMask_(this._mask_, c3, cW);
            }
            else {
                figure.setColors_(c3, cW);
            }
            result = figure.transform.localPosition;
            figure.owner.active = (i < 20);
            //TODO: add scale;
            // let scale = this.GetScale(i, fullLen, levelNum);
            // console.log(scale);
            // figure.transform.localScale = Laya.Vector3.one.scale(scale);
            i++;
        }
        return result;
    };
    StackTower.prototype.createFloor_ = function (pos, rotate) {
        var figureObj = Laya.Sprite3D.instantiate((this._prefBrick_ != null) ? this._prefBrick_ : this._currShape_, this.obj_con_);
        figureObj.transform.localPosition = pos;
        var quaternion = new Laya.Quaternion;
        Laya.Quaternion.createFromYawPitchRoll(rotate, 0, 0, quaternion);
        figureObj.transform.localRotation = quaternion;
        var figure = figureObj.addComponent(Floor_1.Floor);
        figure.degreeOffset = rotate;
        figureObj.addComponent(EffectProc_1.EffectProc);
        return figure;
    };
    StackTower.prototype.createFinish_ = function (pos, col) {
        var gameObject = Laya.Sprite3D.instantiate(this.prefab_finish_, this.obj_con_);
        gameObject.transform.localPosition = pos;
        var component = gameObject.addComponent(FloorFinish_1.FloorFinish);
        if (component) {
            component.setColor_(col);
        }
    };
    StackTower.prototype.getSetting_ = function (i) {
        if (this._selectLevel_ >= 0) {
            if (this._selectLevel_ < this._settings_.length) {
                return this._settings_[this._selectLevel_];
            }
            return this._seetingsLoop_[this._selectLevel_ - this._settings_.length];
        }
        if (i < this._settings_.length * 2) {
            // console.warn("SN= " + Math.floor(i / 2) % this._settings_.length);
            return this._settings_[Math.floor(i / 2) % this._settings_.length];
        }
        i -= this._settings_.length * 2;
        // console.warn("SN2= " + i % this._seetingsLoop_.length);
        var roadSettings = this._seetingsLoop_[i % this._seetingsLoop_.length];
        roadSettings.length = Math.clamp(100 + i * 2, 100, 200);
        return roadSettings;
    };
    StackTower.prototype.fillWall_ = function (list, count, percFill, depth) {
        var num = 0;
        for (var i = 0; i < count; i++) {
            list[i] = ((Math.randInt(0, 100) < percFill) ? 1 : 0);
            num += list[i];
        }
        if (num == count) {
            num--;
            list[Math.randInt(0, count - 1)] = 0;
        }
        if (count - num == 1 && count >= 4 && depth < 0.5) {
            // console.log("ADD RAND");
            var j = 0;
            for (j = 0; j < count && list[j] != 0; j++) {
            }
            var num2 = j;
            for (var k = 0; k < 10; k++) {
                if (j != num2 && num2 != j + 1 && num2 != j - 1) {
                    break;
                }
                num2 = Math.randInt(0, list.length - 1);
            }
            list[num2] = 0;
        }
    };
    StackTower.prototype.getScale_ = function (i, count, level) {
        // let seed:number = Math.randomSeed;
        // Math.randomSeed = level;
        var num = i / count;
        var num2 = Math.randInt(0, 10);
        var num3 = Math.sin(Math.randFloat(0, 3.14159274) + num * 3.14159274 * num2);
        // Math.randomSeed = seed;
        return 1 - num3 * 0.1;
    };
    StackTower.prototype.updateVisible_ = function () {
        for (var i = 0; i < this.obj_con_.numChildren; i++) {
            var item = this.obj_con_.getChildAt(i);
            if (!item.active) {
                item.active = true;
                break;
            }
        }
    };
    StackTower.prototype.topFigurePos_ = function () {
        for (var i = 0; i < this.obj_con_.numChildren; i++) {
            var item = this.obj_con_.getChildAt(i);
            if (item.active && item.numChildren > 0) {
                return item.transform.position;
            }
        }
        return Laya.Vector3.zero;
    };
    StackTower.prototype.topFloor_ = function () {
        for (var i = 0; i < this.obj_con_.numChildren; i++) {
            var item = this.obj_con_.getChildAt(i);
            if (item.active && item.numChildren > 0) {
                return item;
            }
        }
        return null;
    };
    return StackTower;
}(Entity_1.Entity));
exports.StackTower = StackTower;

},{"../core/Color":10,"../core/Entity":12,"../core/effect/EffectProc":19,"./Floor":31,"./FloorFinish":32,"./StackSetting":39,"tslib":3}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameStats_1 = require("./GameStats");
var GameUI_1 = require("../view/GameUI");
var GameOverUI_1 = require("../view/GameOverUI");
var GameWinUI_1 = require("../view/GameWinUI");
var MenuUI_1 = require("../view/MenuUI");
var RankUI_1 = require("../view/RankUI");
var UICenter = /** @class */ (function () {
    function UICenter() {
        this._gameUI_ = new GameUI_1.GameUI();
        this._mainMenu_ = new MenuUI_1.MeunUI();
        app.ui.game_layer.addChild(this._gameUI_);
        app.ui.game_layer.addChild(this._mainMenu_);
        this._gameOverUI_ = new GameOverUI_1.GameOverUI();
        this._gameWinUI_ = new GameWinUI_1.GameWinUI();
        this.showMainMenu_(true);
    }
    UICenter.prototype.onAwake = function () {
    };
    UICenter.prototype.onStart = function () {
        // DebugOut("FIRST launch: " + (!Stats.Instance.HasParam("init_ads_delay")).ToString());
        // Analytics.Initialize();
        // FBMan.Instance.InitFB();
        // Invoke("InitADS", Stats.Instance.GetParamFloat("init_ads_delay", 2f));
        // Stats.Instance.SetParam("init_ads_delay", 0.1f);
        // ShowMainMenu(true);
        // InvokeRepeating("WriteFPS", 1f, 0.5f);
        // this.ShowMainMenu(true);		
    };
    // private void InitADS()
    // {
    // 	bool showBannerAuto = Stats.Instance.level >= Stats.Instance.GetRemoteInt("ad_banner_show_level", 10);
    // 	ADs.Init(Stats.Instance.adsRemoved ? ADType.Rewarded : ADType.All, showBannerAuto);
    // 	Instance.DebugOut("INIT ADS - Show BANNER = " + showBannerAuto.ToString());
    // }
    // private void HandleLog(string logString, string stackTrace, LogType type)
    // {
    // 	string str = "log " + type.ToString()[0].ToString();
    // 	if (type == LogType.Exception)
    // 	{
    // 		str += "x";
    // 	}
    // 	DebugOut(str + " " + logString);
    // }
    UICenter.prototype.showMainMenu_ = function (show) {
        this._mainMenu_.visible = show;
    };
    UICenter.prototype.showGameOver_ = function (canContinue, scores) {
        this._gameOverUI_.show_(canContinue, scores, 0);
    };
    UICenter.prototype.showWin_ = function (level) {
        this._gameWinUI_.show_(level);
    };
    UICenter.prototype.showRank = function () {
        var _this = this;
        if (!this._rankview_) {
            this._rankview_ = new RankUI_1.RankUI();
        }
        var view = this._rankview_;
        app.ui.game_layer.addChild(view);
        view.once(Laya.Event.CLOSE, this, function () {
            view.removeSelf();
            _this.showMainMenu_(true);
        });
        this.showMainMenu_(false);
    };
    UICenter.prototype.hideRank = function () {
        if (!this._rankview_)
            return;
        if (this._rankview_.hasListener(Laya.Event.CLOSE)) {
            this._rankview_.event(Laya.Event.CLOSE);
        }
        else {
            this._rankview_.removeSelf();
        }
        this._rankview_ = null;
    };
    UICenter.prototype.onClickPlayMain_ = function () {
        this.showMainMenu_(false);
    };
    UICenter.prototype.onClickNext_ = function () {
        GameStats_1.GameStats.inst_.level++;
        this._gameWinUI_.hide_();
        this.game_.restart_();
        this._gameUI_.updateUI_(0, GameStats_1.GameStats.inst_.scores);
        this.showMainMenu_(true);
    };
    UICenter.prototype.onClickRestart = function (withMenu) {
        if (withMenu === void 0) { withMenu = true; }
        this._gameOverUI_.hide_();
        this.showMainMenu_(withMenu);
        this._gameUI_.updateUI_(0, 0);
        this.game_.restart_();
    };
    return UICenter;
}());
exports.UICenter = UICenter;

},{"../view/GameOverUI":64,"../view/GameUI":65,"../view/GameWinUI":66,"../view/MenuUI":67,"../view/RankUI":69,"./GameStats":35}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Emiter_1 = require("../core/Emiter");
// /**
//  * Author:terran
//  * Email:terran.tian@foxmail.com
//  * 
//  * Time:上午9:56 2016年12月17日
//  **/
function wait(duration, callBack) {
    return new Promise(function (resolve, reject) {
        var time = 0;
        time = setTimeout(function () {
            clearTimeout(time);
            resolve();
            if (callBack)
                callBack();
        }, duration);
    });
}
/*
    How is fill rate calculated?
    Fill rate is calculated based on total filled ads over total eligible requests. Scenarios where a request will not be counted include:

    Request for an ad is too frequent. For example, if you request an ad with the same placement ID in less than 15 second intervals
    IDFA (iOS) or Advertising ID (Android) is not available or can not be used for ad delivery
    Facebook has not been installed on the requesting app or the user has not logged in recently

    https://developers.facebook.com/docs/audience-network/testing
*/
var Advertise = /** @class */ (function (_super) {
    tslib_1.__extends(Advertise, _super);
    function Advertise(ids, autoPreload) {
        if (autoPreload === void 0) { autoPreload = true; }
        var _this = _super.call(this) || this;
        _this.ids = ids;
        _this._adInstance = null;
        _this._isStart = false;
        _this._watch_count = 0;
        _this.suportAD() && autoPreload && (_this.preloadAD());
        return _this;
    }
    Advertise.prototype.suportAD = function () { throw "should be implemented in subclass!"; };
    Advertise.prototype.getName = function () { throw "should be implemented in subclass!"; };
    Advertise.prototype.getADInstanceAsync = function (placementId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // throw "should be implemented in subclass!"
                return [2 /*return*/, null];
            });
        });
    };
    Advertise.prototype.hasAD = function () { return !!this._adInstance; };
    Advertise.prototype.preloadAD = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var lastError, arr, i, _tmp_inst, index, reloadCount, e_1, e_2, e_3;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isStart)
                            return [2 /*return*/];
                        this._isStart = true;
                        lastError = "";
                        arr = this.ids.concat();
                        i = 0;
                        _tmp_inst = null;
                        _a.label = 1;
                    case 1:
                        if (!!_tmp_inst) return [3 /*break*/, 24];
                        index = i++ % arr.length;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 22, , 23]);
                        return [4 /*yield*/, this.getADInstanceAsync(arr[index])];
                    case 3:
                        _tmp_inst = _a.sent();
                        lastError = "";
                        console.log(this.getName() + " create suc:" + index);
                        reloadCount = 0;
                        _a.label = 4;
                    case 4:
                        if (!(!this._adInstance && _tmp_inst)) return [3 /*break*/, 21];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 14, , 20]);
                        return [4 /*yield*/, _tmp_inst.loadAsync()];
                    case 6:
                        _a.sent();
                        lastError = "";
                        this._adInstance = _tmp_inst;
                        this.emit("ad_ready");
                        console.log(this.getName() + " load suc");
                        _a.label = 7;
                    case 7:
                        if (!true) return [3 /*break*/, 13];
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return _this.once("show_ad", resolve); })];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        _a.trys.push([9, 11, , 12]);
                        return [4 /*yield*/, this._adInstance.showAsync()];
                    case 10:
                        _a.sent();
                        lastError = "";
                        console.log(this.getName() + " show suc");
                        this.emit("show_result", { result: true, level: index });
                        //重新获取广告位
                        i = 0;
                        this._adInstance = null;
                        _tmp_inst = null;
                        return [3 /*break*/, 13];
                    case 11:
                        e_1 = _a.sent();
                        console.log(this.getName() + " show failed," + e_1.code + "," + e_1.message);
                        this.emit("ad_failed", { type: this.getName(), phase: 2, code: e_1.code, msg: e_1.message, lastError: lastError });
                        lastError = e_1.code + ":2";
                        this.emit("show_result", { result: false, err: e_1, level: index });
                        if (e_1.code == "ADS_NOT_LOADED") {
                            //重新加载
                            this._adInstance = null;
                            //重置加载计数
                            reloadCount = 0;
                            // await wait(30 * 1000)
                            return [3 /*break*/, 13];
                        }
                        else if (e_1.code == "PENDING_REQUEST" || e_1.code == "UNKNOWN" || e_1.code == "RATE_LIMITED" /*Can not show ads immediately after the game starts.*/) {
                            //do nothing,pennding show this instance next time;
                        }
                        else {
                            //重新获取广告位
                            this._adInstance = null;
                            _tmp_inst = null;
                            return [3 /*break*/, 13];
                        }
                        return [3 /*break*/, 12];
                    case 12: return [3 /*break*/, 7];
                    case 13: return [3 /*break*/, 20];
                    case 14:
                        e_2 = _a.sent();
                        console.log(this.getName() + " load failed," + e_2.code + "," + e_2.message);
                        this.emit("ad_failed", { type: this.getName(), phase: 1, code: e_2.code, msg: e_2.message, lastError: lastError });
                        lastError = e_2.code + ":1";
                        if (!(e_2.code == "ADS_FREQUENT_LOAD")) return [3 /*break*/, 16];
                        // Ad Requests are based on a combination of:
                        // Device ID
                        // Placement ID
                        // Display Format (Banner, Interstitial, Native)
                        // Your application should attempt to make another request after 30 minutes. 
                        // We also suggest adjusting your Refresh Rate or Request Rate.
                        return [4 /*yield*/, wait(30 * 60 * 1000)];
                    case 15:
                        // Ad Requests are based on a combination of:
                        // Device ID
                        // Placement ID
                        // Display Format (Banner, Interstitial, Native)
                        // Your application should attempt to make another request after 30 minutes. 
                        // We also suggest adjusting your Refresh Rate or Request Rate.
                        _a.sent();
                        return [3 /*break*/, 21];
                    case 16:
                        if (!(e_2.code == "INVALID_PARAM")) return [3 /*break*/, 17];
                        //重新获取广告位
                        _tmp_inst = null;
                        return [3 /*break*/, 21];
                    case 17: 
                    //ADS_NO_FILL,NETWORK_FAILURE,UNKNOWN
                    // You are not submitting requests too frequently 
                    // (for example, requesting an ad for the same placement ID multiple times within a 15 second interval)
                    // await wait(Math.min(++reloadCount,4)*15 * 1000)
                    return [4 /*yield*/, wait(31 * 1000)];
                    case 18:
                        //ADS_NO_FILL,NETWORK_FAILURE,UNKNOWN
                        // You are not submitting requests too frequently 
                        // (for example, requesting an ad for the same placement ID multiple times within a 15 second interval)
                        // await wait(Math.min(++reloadCount,4)*15 * 1000)
                        _a.sent();
                        _a.label = 19;
                    case 19: return [3 /*break*/, 20];
                    case 20: return [3 /*break*/, 4];
                    case 21: return [3 /*break*/, 23];
                    case 22:
                        e_3 = _a.sent();
                        console.log(this.getName() + " create failed," + e_3.code + "," + index);
                        this.emit("ad_failed", { type: this.getName(), phase: 0, code: e_3.code, msg: e_3.message, lastError: lastError });
                        lastError = e_3.code + ":0";
                        if (e_3.code == "CLIENT_UNSUPPORTED_OPERATION" || e_3.code == "ADS_TOO_MANY_INSTANCES") {
                            //不在获取广告
                            return [2 /*return*/];
                        }
                        return [3 /*break*/, 23];
                    case 23: return [3 /*break*/, 1];
                    case 24: return [2 /*return*/];
                }
            });
        });
    };
    Advertise.prototype.showAD = function (source) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.hasAD()) {
                            throw "no ad ready";
                        }
                        bo = this.emit("show_ad");
                        if (!bo)
                            return [2 /*return*/];
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.once("show_result", function (data) {
                                    if (data.result) {
                                        _this.emit("ad_show", { type: _this.getName(), result: ++_this._watch_count, level: data.level, source: source });
                                    }
                                    // data.result?resolve():reject(data.err);
                                    resolve(data.err ? false : true);
                                });
                            })];
                    case 1:
                        bo = _a.sent();
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    return Advertise;
}(Emiter_1.Emiter));
var InterstitialAD = /** @class */ (function (_super) {
    tslib_1.__extends(InterstitialAD, _super);
    function InterstitialAD() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InterstitialAD.prototype.getName = function () {
        return "iad";
    };
    InterstitialAD.prototype.suportAD = function () {
        var apis = FBInstant.getSupportedAPIs();
        return apis.indexOf("getInterstitialAdAsync") > -1;
    };
    InterstitialAD.prototype.getADInstanceAsync = function (placementId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FBInstant.getInterstitialAdAsync(placementId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return InterstitialAD;
}(Advertise));
exports.InterstitialAD = InterstitialAD;
var RewardedVideoAD = /** @class */ (function (_super) {
    tslib_1.__extends(RewardedVideoAD, _super);
    function RewardedVideoAD() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RewardedVideoAD.prototype.getName = function () {
        return "rad";
    };
    RewardedVideoAD.prototype.suportAD = function () {
        var apis = FBInstant.getSupportedAPIs();
        return apis.indexOf("getRewardedVideoAsync") > -1;
    };
    RewardedVideoAD.prototype.getADInstanceAsync = function (placementId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FBInstant.getRewardedVideoAsync(placementId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return RewardedVideoAD;
}(Advertise));
exports.RewardedVideoAD = RewardedVideoAD;

},{"../core/Emiter":11,"tslib":3}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Emiter_1 = require("../core/Emiter");
var RankVO_1 = require("./RankVO");
var BasePlatform = /** @class */ (function (_super) {
    tslib_1.__extends(BasePlatform, _super);
    function BasePlatform(defaultData) {
        var _this = _super.call(this) || this;
        _this.defaultData = defaultData;
        _this.oppenentData = null;
        _this.entry = null;
        _this.switch_gameInfo = null;
        _this.battle_info = null;
        _this.isNewPlayer = true;
        _this.playerInfo = {
            playerId: "i0",
            name: "terran",
            photo: "resource/default_head.png",
            signature: ""
        };
        _this.appId = $sys_app_id;
        _this.appName = $sys_app_name;
        _this.$remoteData = null;
        _this.iad_start_count_ = 3;
        _this.iad_start_level_ = 5;
        _this.iad_time_interval = 40 * 1000;
        setInterval(function () {
            if (_this.$remoteData && _this.$remoteData.isDirty) {
                delete _this.$remoteData.isDirty;
                _this.syncRemoteData();
            }
        }, 200);
        return _this;
    }
    BasePlatform.prototype.getFriends = function () {
        return this._friends;
    };
    BasePlatform.prototype.initialize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this._friends = [];
                return [2 /*return*/];
            });
        });
    };
    BasePlatform.prototype.pullRemoteData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, obj, isEmpty, key, prop;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getData(["user_data"])];
                    case 1:
                        data = _a.sent();
                        obj = {};
                        try {
                            obj = JSON.parse(data["user_data"]) || {};
                        }
                        catch (e) { }
                        this.$remoteData = obj;
                        isEmpty = true;
                        for (key in this.defaultData) {
                            prop = key;
                            if (obj[prop] == void 0) {
                                obj[prop] = this.defaultData[key];
                            }
                            else {
                                isEmpty = true;
                            }
                        }
                        this.isNewPlayer = isEmpty;
                        return [2 /*return*/];
                }
            });
        });
    };
    BasePlatform.prototype.syncRemoteData = function (force) {
        if (force === void 0) { force = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setData({ user_data: JSON.stringify(this.$remoteData) }, force)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BasePlatform.prototype, "remoteData", {
        get: function () {
            return this.$remoteData;
        },
        enumerable: true,
        configurable: true
    });
    BasePlatform.prototype.clearRemote = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.$remoteData = {};
                        return [4 /*yield*/, this.syncRemoteData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BasePlatform.prototype.setLoadingProgress = function (value) {
        $sys_progress = value;
    };
    BasePlatform.prototype.startGame = function (iad_ids, rad_ids) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        $sys_platform_started = true;
                        return [4 /*yield*/, this.pullRemoteData()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 200); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BasePlatform.prototype.getWorldEntries = function () {
        var arr = [];
        for (var i = 0; i <= 10; i++) {
            var r = new RankVO_1.default();
            r.id = "i" + i;
            r.name = "world" + i;
            r.photo = "rank/default_portrait.png",
                r.rank = i + 1,
                r.score = i * 10;
            arr.push(r);
        }
        return arr;
    };
    ;
    BasePlatform.prototype.getWorldEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, this.getWorldEntries()];
        }); });
    };
    ;
    BasePlatform.prototype.getWorldFriendEntries = function () {
        var arr = [];
        for (var i = 0; i <= 10; i++) {
            var r = new RankVO_1.default();
            r.id = "i" + i;
            r.name = "bot" + i;
            r.photo = "rank/default_portrait.png",
                r.rank = i + 1,
                r.score = i * 10;
            arr.push(r);
        }
        return arr;
    };
    ;
    BasePlatform.prototype.getWorldFriendEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, this.getWorldFriendEntries()];
        }); });
    };
    ;
    BasePlatform.prototype.getWorldHighScore = function () { return +localStorage.getItem("hight_score1") || 0; };
    BasePlatform.prototype.getWorldEntry = function () {
        var rank = new RankVO_1.default();
        rank.id = "i0";
        rank.name = "bot0";
        rank.photo = "rank/default_portrait.png",
            rank.score = 100;
        rank.rank = 1;
        return rank;
    };
    BasePlatform.prototype.getWeeklyEntries = function () { return []; };
    ;
    BasePlatform.prototype.getWeeklyEntriesAsync = function () { return Promise.resolve([]); };
    ;
    BasePlatform.prototype.getWeeklyFriendEntries = function () { return []; };
    ;
    BasePlatform.prototype.getWeeklyFriendEntriesAsync = function () { return Promise.resolve([]); };
    ;
    BasePlatform.prototype.getWeeklyHighScore = function () { return +localStorage.getItem("hight_score1") || 0; };
    BasePlatform.prototype.getWeeklyEntry = function () {
        var rank = new RankVO_1.default();
        rank.id = "i0";
        rank.name = "bot0";
        rank.photo = "resource/default_head.png",
            rank.score = 100;
        rank.rank = 1;
        return rank;
    };
    BasePlatform.prototype.setHightScore = function (value, data) {
        localStorage.setItem("hight_score1", value + "");
    };
    BasePlatform.prototype.getData = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, _i, keys_1, key;
            return tslib_1.__generator(this, function (_a) {
                result = {};
                for (_i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    key = keys_1[_i];
                    result[key] = localStorage.getItem(key);
                }
                return [2 /*return*/, result];
            });
        });
    };
    BasePlatform.prototype.setData = function (obj, force) {
        if (force === void 0) { force = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var key;
            return tslib_1.__generator(this, function (_a) {
                for (key in obj) {
                    localStorage.setItem(key, obj[key]);
                }
                return [2 /*return*/];
            });
        });
    };
    BasePlatform.prototype.hasIAD = function () { return true; };
    BasePlatform.prototype.showIAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.hasAD = function () { return true; };
    BasePlatform.prototype.showAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.hasRAD = function () { return true; };
    BasePlatform.prototype.showRAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.shareAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    BasePlatform.prototype.updateAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    BasePlatform.prototype.chooseAsync = function (filters, maxSize, minSize, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.createAsync = function (id, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.switchAsync = function (contextId, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, true];
        }); });
    };
    BasePlatform.prototype.getContextId = function () { return null; };
    ;
    BasePlatform.prototype.log = function (name, data, valueSum) {
        if (valueSum === void 0) { valueSum = 1; }
        console.log(name, JSON.stringify(data));
    };
    BasePlatform.prototype.createShortcutAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, true];
            });
        });
    };
    BasePlatform.prototype.subscribeBotAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, true];
            });
        });
    };
    BasePlatform.prototype.showIADAuto_ = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        if (!(this.remoteData.ad_count == this.iad_start_level_)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.showIAD(source)];
                    case 1:
                        bo = _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(this.remoteData.ad_count >= this.iad_start_count_)) return [3 /*break*/, 4];
                        if (!(Date.now() - this.remoteData.iad_time > this.iad_time_interval)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.showIAD(source)];
                    case 3:
                        bo = _a.sent();
                        this.remoteData.iad_time = Date.now();
                        _a.label = 4;
                    case 4:
                        this.remoteData.ad_count++;
                        this.remoteData.isDirty = true;
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    return BasePlatform;
}(Emiter_1.Emiter));
exports.BasePlatform = BasePlatform;

},{"../core/Emiter":11,"./RankVO":52,"tslib":3}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BasePlatform_1 = require("./BasePlatform");
var Advertise_1 = require("./Advertise");
var Utils_1 = require("../core/Utils");
var LeaderBoard_1 = require("./LeaderBoard");
var PlayerVO_1 = require("./PlayerVO");
var FBPlatform = /** @class */ (function (_super) {
    tslib_1.__extends(FBPlatform, _super);
    function FBPlatform() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._signedPlayerInfo = "";
        _this._isDateReady = false;
        _this._isFetching = false;
        _this._lastIADTime = NaN;
        _this._chooseAsync_times = 0;
        _this._createAsync_times = 0;
        _this._switchAsync_times = 0;
        return _this;
    }
    FBPlatform.prototype.initialize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!$sys_platform_initialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 100); })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 0];
                    case 2:
                        this._world_leader = new LeaderBoard_1.default("nworld");
                        // this._weeky_leader = new LeaderBoard("weekly");
                        this.fetchData();
                        return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.fetchData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isDateReady)
                            return [2 /*return*/];
                        if (!this._isFetching) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.once("data_ready", resolve);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this._isFetching = true;
                        return [4 /*yield*/, Promise.all([
                                FBInstant.player.getSignedPlayerInfoAsync("kcuf").then(function (v) { return _this._signedPlayerInfo = v.getSignature(); }).catch(function (v) { return null; }),
                                this.pullRemoteData(),
                                this._world_leader.initializeAsync(false, true),
                            ])];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log("fetchData error", e_1.code || e_1.msg || e_1);
                        return [3 /*break*/, 5];
                    case 5:
                        this._isFetching = false;
                        this._isDateReady = true;
                        this.emit("data_ready");
                        return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.startGame = function (iad_ids, rad_ids) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var option, data, entry_point, arr;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FBInstant.startGameAsync()];
                    case 1:
                        _a.sent();
                        if (iad_ids && iad_ids.length > 0) {
                            this._iad = new Advertise_1.InterstitialAD(iad_ids, true);
                            this._iad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                            this._iad.on("ad_show", function (d) { return _this.log("iad_times", d); });
                        }
                        if (rad_ids && rad_ids.length > 0) {
                            this._rad = new Advertise_1.RewardedVideoAD(rad_ids, true);
                            this._rad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                            this._rad.on("ad_show", function (d) { return _this.log("rad_times", d); });
                        }
                        this.playerInfo.playerId = FBInstant.player.getID();
                        this.playerInfo.name = FBInstant.player.getName();
                        this.playerInfo.photo = FBInstant.player.getPhoto();
                        this.playerInfo.signature = this._signedPlayerInfo;
                        option = FBInstant.getEntryPointData() || {};
                        Object.assign($sys_args, option);
                        data = option["oppenent_info"];
                        if (data && data.playerId != this.playerInfo.playerId) {
                            this.oppenentData = data;
                        }
                        entry_point = FBInstant.getEntryPointAsync();
                        this.entry = option["entry"] || option["type"] || "normal";
                        if (this.entry == "normal" && entry_point == "admin_message") {
                            this.entry = "leaderboard";
                        }
                        this.switch_gameInfo = option["switch_gameInfo"] || null;
                        this.battle_info = option["battle_info"] || null;
                        return [4 /*yield*/, Promise.all([
                                this.fetchData(),
                                Utils_1.Utils.wait(1000).then(function () { return FBInstant.player.getConnectedPlayersAsync(); })
                            ])];
                    case 2:
                        arr = _a.sent();
                        this._friends = (arr[1] || []).map(function (v) { return PlayerVO_1.default.fromFBPlayer(v); });
                        // this._weeky_leader.setFriends(this._friends);
                        this._world_leader.setFriends(this._friends);
                        FBInstant.setSessionData({
                            playerInfo: {
                                name: FBInstant.player.getName(),
                                head: FBInstant.player.getPhoto(),
                                lang: FBInstant.getLocale()
                            },
                            friends: this._friends.map(function (v) {
                                return {
                                    id: v.id,
                                    photo: v.photo,
                                    name: v.name
                                };
                            })
                        });
                        this.log("entry_info", { entry: this.entry || "normal" });
                        console.log("startGame done!");
                        return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.getWorldEntries = function () { return this._world_leader.getEntries(); };
    ;
    FBPlatform.prototype.getWorldEntriesAsync = function () { return this._world_leader.getEntriesAsync(); };
    ;
    FBPlatform.prototype.getWorldFriendEntries = function () { return this._world_leader.getConnectedPlayerEntries(); };
    ;
    FBPlatform.prototype.getWorldFriendEntriesAsync = function () { return this._world_leader.getConnectedPlayerEntriesAsync(); };
    ;
    FBPlatform.prototype.getWorldHighScore = function () { return this._world_leader.getScore(); };
    FBPlatform.prototype.getWorldEntry = function () { return this._world_leader.getSelfEntry(); };
    // getWeeklyEntries(){return this._weeky_leader.getEntries()};
    // getWeeklyEntriesAsync(){return this._weeky_leader.getEntriesAsync()};
    // getWeeklyFriendEntries(){return this._weeky_leader.getConnectedPlayerEntries()};
    // getWeeklyFriendEntriesAsync(){return this._weeky_leader.getConnectedPlayerEntriesAsync()};
    // getWeeklyHighScore(){return this._weeky_leader.getScore();}
    // getWeeklyEntry(){return this._weeky_leader.getSelfEntry()}
    FBPlatform.prototype.setHightScore = function (value, data) {
        // this._weeky_leader.setScore(value,data)
        this._world_leader.setScore(value, data);
    };
    FBPlatform.prototype.getData = function (keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FBInstant.player.getDataAsync(keys)];
                    case 1: return [2 /*return*/, (_a.sent()) || {}];
                }
            });
        });
    };
    FBPlatform.prototype.setData = function (obj, force) {
        if (force === void 0) { force = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FBInstant.player.setDataAsync(obj)];
                    case 1:
                        _a.sent();
                        if (!force) return [3 /*break*/, 3];
                        return [4 /*yield*/, FBInstant.player.flushDataAsync()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.hasAD = function () {
        return this.hasRAD() || this.hasIAD();
    };
    FBPlatform.prototype.showAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.showRAD(source)];
                    case 1:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.showIAD(source)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    FBPlatform.prototype.hasRAD = function () {
        return this._rad && this._rad.hasAD();
    };
    FBPlatform.prototype.showRAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log("showRAD", { result: -1, source: source });
                        _a = this._rad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._rad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showRAD", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    Object.defineProperty(FBPlatform.prototype, "lastIADTime", {
        get: function () {
            if (isNaN(this._lastIADTime)) {
                var value = localStorage.getItem(this.playerInfo.playerId + "_lit");
                if (!value) {
                    this._lastIADTime = this.isNewPlayer ? Date.now() : 0;
                }
                else {
                    this._lastIADTime = +value || 0;
                }
            }
            return this._lastIADTime;
        },
        set: function (v) {
            if (this._lastIADTime == v)
                return;
            this._lastIADTime = v;
            localStorage.setItem(this.playerInfo.playerId + "_lit", v + "");
        },
        enumerable: true,
        configurable: true
    });
    FBPlatform.prototype.hasIAD = function () {
        if (Date.now() - this.lastIADTime < 40 * 100)
            return false;
        return this._iad && this._iad.hasAD();
    };
    FBPlatform.prototype.showIAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log("showIAD", { result: -1, source: source });
                        _a = this._iad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._iad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showIAD", { result: bo ? 1 : 0, source: source });
                        this.lastIADTime = Date.now();
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.shareAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var origin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        origin = { entry: option.template || 'normal_share' };
                        return [4 /*yield*/, FBInstant.shareAsync({
                                intent: "SHARE",
                                image: option.image,
                                text: option.text,
                                data: Object.assign(origin, option.payload),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.updateAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var origin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        origin = { entry: option.template || 'normal_update' };
                        return [4 /*yield*/, FBInstant.updateAsync({
                                action: 'CUSTOM',
                                cta: option.cta || 'Play now',
                                image: option.image,
                                text: option.text || 'Play with me!',
                                template: option.template || 'game_result',
                                data: Object.assign(origin, option.payload),
                                strategy: option.strategy || 'IMMEDIATE',
                                notification: 'NO_PUSH'
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FBPlatform.prototype.chooseAsync = function (filters, maxSize, minSize, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, e_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.log("chooseAsync", { result: -1, source: source });
                        return [4 /*yield*/, FBInstant.context.chooseAsync({ filters: filters, maxSize: maxSize, minSize: minSize })];
                    case 2:
                        _a.sent();
                        this.log("chooseAsync_times", { result: ++this._chooseAsync_times, source: source });
                        bo = true;
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        // if(e.code == Constant.USER_INPUT) return false;
                        if (e_2.code != "SAME_CONTEXT") {
                            console.log(JSON.stringify(e_2));
                            bo = false;
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        this.log("chooseAsync", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.createAsync = function (playerId, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, e_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.log("createAsync", { result: -1, source: source });
                        return [4 /*yield*/, FBInstant.context.createAsync(playerId)];
                    case 2:
                        _a.sent();
                        this.log("createAsync_times", { result: ++this._createAsync_times, source: source });
                        bo = true;
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _a.sent();
                        // if(e.code == Constant.USER_INPUT) return false;
                        if (e_3.code != "SAME_CONTEXT") {
                            console.log(JSON.stringify(e_3));
                            bo = false;
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        this.log("createAsync", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.switchAsync = function (contextId, source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, e_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.log("switchAsync", { result: -1, source: source });
                        return [4 /*yield*/, FBInstant.context.switchAsync(contextId)];
                    case 2:
                        _a.sent();
                        this.log("switchAsync_times", { result: ++this._switchAsync_times, source: source });
                        bo = true;
                        return [3 /*break*/, 4];
                    case 3:
                        e_4 = _a.sent();
                        // if(e.code == Constant.USER_INPUT) return false;
                        if (e_4.code != "SAME_CONTEXT") {
                            console.log(JSON.stringify(e_4));
                            bo = false;
                        }
                        return [3 /*break*/, 4];
                    case 4:
                        this.log("switchAsync", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.getContextId = function () { return FBInstant.context.getID(); };
    ;
    FBPlatform.prototype.log = function (name, data, valueSum) {
        if (valueSum === void 0) { valueSum = 1; }
        _super.prototype.log.call(this, name, data, valueSum);
        data = data || {};
        data.app_version = data._appVersion = $sys_args["v"] || "0.0.0";
        data.nick_name = FBInstant.player.getName();
        FBInstant.logEvent(name, valueSum, data);
    };
    FBPlatform.prototype.createShortcutAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, key, data, str, isSupport, e_5, e_6;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 9, , 10]);
                        key = "short_cut_" + this.appName;
                        data = { shortcut: 0, shortcut_refuse: 0 };
                        str = localStorage.getItem(key);
                        if (str) {
                            try {
                                data = Object.assign(data, JSON.parse(str));
                            }
                            catch (e) {
                                console.log("shortcut parse error");
                            }
                        }
                        if (data.shortcut != 0)
                            return [2 /*return*/, false];
                        if (data.shortcut_refuse >= 2)
                            return [2 /*return*/, false];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        return [4 /*yield*/, FBInstant.canCreateShortcutAsync()];
                    case 3:
                        isSupport = _a.sent();
                        if (!isSupport) return [3 /*break*/, 5];
                        this.log("shortcut", { result: -1 });
                        return [4 /*yield*/, FBInstant.createShortcutAsync()];
                    case 4:
                        _a.sent();
                        this.log("shortcut", { result: 1 });
                        bo = true;
                        data.shortcut = 1;
                        return [3 /*break*/, 6];
                    case 5:
                        console.log("shortcut unsupport");
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_5 = _a.sent();
                        this.log("shortcut", { result: 0, code: e_5.code });
                        console.log("shortcut result", JSON.stringify(e_5));
                        if (e_5.code == "USER_INPUT") {
                            data.shortcut_refuse++;
                        }
                        else {
                            data.shortcut = 2;
                        }
                        return [3 /*break*/, 8];
                    case 8:
                        localStorage.setItem(key, JSON.stringify(data));
                        return [3 /*break*/, 10];
                    case 9:
                        e_6 = _a.sent();
                        console.log("shortcut failed:", e_6);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.subscribeBotAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, bo_1, reuslt, e_7;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bo = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, FBInstant.player.canSubscribeBotAsync()];
                    case 2:
                        bo_1 = _a.sent();
                        if (!bo_1) return [3 /*break*/, 4];
                        this.log("bot_subscribe", { result: -1 });
                        return [4 /*yield*/, FBInstant.player.subscribeBotAsync()];
                    case 3:
                        reuslt = _a.sent();
                        this.log("bot_subscribe", { result: 1 });
                        bo_1 = true;
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        e_7 = _a.sent();
                        console.log("subscitbe bot failed:", e_7);
                        this.log("bot_subscribe", { result: 0 });
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, bo];
                }
            });
        });
    };
    FBPlatform.prototype.switchGame = function (appId, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var origin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        origin = { switch_gameInfo: { appId: this.appId, appName: this.appName } };
                        return [4 /*yield*/, FBInstant.switchGameAsync(appId, Object.assign(origin, data))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return FBPlatform;
}(BasePlatform_1.BasePlatform));
exports.FBPlatform = FBPlatform;

},{"../core/Utils":17,"./Advertise":42,"./BasePlatform":43,"./LeaderBoard":49,"./PlayerVO":51,"tslib":3}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Emiter_1 = require("../core/Emiter");
// /**
//  * Author:terran
//  * Email:terran.tian@foxmail.com
//  * 
//  * Time:上午9:56 2016年12月17日
//  **/
var kxad;
(function (kxad) {
    function wait(duration, callBack) {
        return new Promise(function (resolve, reject) {
            var time = 0;
            time = setTimeout(function () {
                clearTimeout(time);
                resolve();
                if (callBack)
                    callBack();
            }, duration);
        });
    }
    var Advertise = /** @class */ (function (_super) {
        tslib_1.__extends(Advertise, _super);
        function Advertise(ids, autoPreload) {
            if (autoPreload === void 0) { autoPreload = true; }
            var _this = _super.call(this) || this;
            _this.ids = ids;
            _this._adInstance = null;
            _this._isStart = false;
            _this._watch_count = 0;
            _this.suportAD() && autoPreload && (_this.preloadAD());
            return _this;
        }
        Advertise.prototype.suportAD = function () { throw "should be implemented in subclass!"; };
        Advertise.prototype.getName = function () { throw "should be implemented in subclass!"; };
        Advertise.prototype.getADInstanceAsync = function (placementId) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    // throw "should be implemented in subclass!"
                    return [2 /*return*/, null];
                });
            });
        };
        Advertise.prototype.hasAD = function () { return !!this._adInstance; };
        Advertise.prototype.preloadAD = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var lastError, arr, i, _tmp_inst, index, reloadCount, e_1, e_2, e_3;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this._isStart)
                                return [2 /*return*/];
                            this._isStart = true;
                            lastError = "";
                            arr = this.ids.concat();
                            i = 0;
                            _tmp_inst = null;
                            _a.label = 1;
                        case 1:
                            if (!!_tmp_inst) return [3 /*break*/, 24];
                            index = i++ % arr.length;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 22, , 23]);
                            return [4 /*yield*/, this.getADInstanceAsync(arr[index])];
                        case 3:
                            _tmp_inst = _a.sent();
                            lastError = "";
                            console.log(this.getName() + " create suc:" + index);
                            reloadCount = 0;
                            _a.label = 4;
                        case 4:
                            if (!(!this._adInstance && _tmp_inst)) return [3 /*break*/, 21];
                            _a.label = 5;
                        case 5:
                            _a.trys.push([5, 14, , 20]);
                            return [4 /*yield*/, _tmp_inst.loadAsync()];
                        case 6:
                            _a.sent();
                            lastError = "";
                            this._adInstance = _tmp_inst;
                            this.emit("ad_ready");
                            console.log(this.getName() + " load suc");
                            _a.label = 7;
                        case 7:
                            if (!true) return [3 /*break*/, 13];
                            return [4 /*yield*/, new Promise(function (resolve, reject) { return _this.once("show_ad", resolve); })];
                        case 8:
                            _a.sent();
                            _a.label = 9;
                        case 9:
                            _a.trys.push([9, 11, , 12]);
                            return [4 /*yield*/, this._adInstance.showAsync()];
                        case 10:
                            _a.sent();
                            lastError = "";
                            console.log(this.getName() + " show suc");
                            this.emit("show_result", { result: true, level: index });
                            //重新获取广告位
                            i = 0;
                            this._adInstance = null;
                            _tmp_inst = null;
                            return [3 /*break*/, 13];
                        case 11:
                            e_1 = _a.sent();
                            e_1 = e_1 || {};
                            console.log(this.getName() + " show failed," + e_1.code + "," + e_1.message);
                            this.emit("ad_failed", { type: this.getName(), phase: 2, code: e_1.code, msg: e_1.message, lastError: lastError });
                            lastError = e_1.code + ":2";
                            this.emit("show_result", { result: false, err: e_1, level: index });
                            if (e_1.code == "ADS_NOT_LOADED") {
                                //重新加载
                                this._adInstance = null;
                                //重置加载计数
                                reloadCount = 0;
                                // await wait(30 * 1000)
                                return [3 /*break*/, 13];
                            }
                            else if (e_1.code == "PENDING_REQUEST" || e_1.code == "UNKNOWN" || e_1.code == "RATE_LIMITED" /*Can not show ads immediately after the game starts.*/) {
                                //do nothing,pennding show this instance next time;
                            }
                            else {
                                //重新获取广告位
                                this._adInstance = null;
                                _tmp_inst = null;
                                return [3 /*break*/, 13];
                            }
                            return [3 /*break*/, 12];
                        case 12: return [3 /*break*/, 7];
                        case 13: return [3 /*break*/, 20];
                        case 14:
                            e_2 = _a.sent();
                            e_2 = e_2 || {};
                            console.log(this.getName() + " load failed," + e_2.code + "," + e_2.message);
                            this.emit("ad_failed", { type: this.getName(), phase: 1, code: e_2.code, msg: e_2.message, lastError: lastError });
                            lastError = e_2.code + ":1";
                            if (!(e_2.code == "ADS_FREQUENT_LOAD")) return [3 /*break*/, 16];
                            // Ad Requests are based on a combination of:
                            // Device ID
                            // Placement ID
                            // Display Format (Banner, Interstitial, Native)
                            // Your application should attempt to make another request after 30 minutes. 
                            // We also suggest adjusting your Refresh Rate or Request Rate.
                            return [4 /*yield*/, wait(30 * 60 * 1000)];
                        case 15:
                            // Ad Requests are based on a combination of:
                            // Device ID
                            // Placement ID
                            // Display Format (Banner, Interstitial, Native)
                            // Your application should attempt to make another request after 30 minutes. 
                            // We also suggest adjusting your Refresh Rate or Request Rate.
                            _a.sent();
                            return [3 /*break*/, 21];
                        case 16:
                            if (!(e_2.code == "INVALID_PARAM")) return [3 /*break*/, 17];
                            //重新获取广告位
                            _tmp_inst = null;
                            return [3 /*break*/, 21];
                        case 17: 
                        //ADS_NO_FILL,NETWORK_FAILURE,UNKNOWN
                        // You are not submitting requests too frequently 
                        // (for example, requesting an ad for the same placement ID multiple times within a 15 second interval)
                        // await wait(Math.min(++reloadCount,4)*15 * 1000)
                        return [4 /*yield*/, wait(31 * 1000)];
                        case 18:
                            //ADS_NO_FILL,NETWORK_FAILURE,UNKNOWN
                            // You are not submitting requests too frequently 
                            // (for example, requesting an ad for the same placement ID multiple times within a 15 second interval)
                            // await wait(Math.min(++reloadCount,4)*15 * 1000)
                            _a.sent();
                            _a.label = 19;
                        case 19: return [3 /*break*/, 20];
                        case 20: return [3 /*break*/, 4];
                        case 21: return [3 /*break*/, 23];
                        case 22:
                            e_3 = _a.sent();
                            e_3 = e_3 || {};
                            console.log(this.getName() + " create failed," + e_3.code + "," + index);
                            this.emit("ad_failed", { type: this.getName(), phase: 0, code: e_3.code, msg: e_3.message, lastError: lastError });
                            lastError = e_3.code + ":0";
                            if (e_3.code == "CLIENT_UNSUPPORTED_OPERATION" || e_3.code == "ADS_TOO_MANY_INSTANCES") {
                                //不在获取广告
                                return [2 /*return*/];
                            }
                            return [3 /*break*/, 23];
                        case 23: return [3 /*break*/, 1];
                        case 24: return [2 /*return*/];
                    }
                });
            });
        };
        Advertise.prototype.showAD = function (source) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var bo;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasAD()) {
                                return [2 /*return*/, false];
                            }
                            bo = this.emit("show_ad");
                            if (!bo)
                                return [2 /*return*/, false];
                            return [4 /*yield*/, new Promise(function (resolve, reject) {
                                    _this.once("show_result", function (data) {
                                        if (data.result) {
                                            _this.emit("ad_show", { type: _this.getName(), result: ++_this._watch_count, level: data.level, source: source });
                                        }
                                        resolve(data.err ? false : true);
                                        // resolve();
                                    });
                                })];
                        case 1:
                            bo = _a.sent();
                            return [2 /*return*/, bo];
                    }
                });
            });
        };
        return Advertise;
    }(Emiter_1.Emiter));
    var InterstitialAD = /** @class */ (function (_super) {
        tslib_1.__extends(InterstitialAD, _super);
        function InterstitialAD() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InterstitialAD.prototype.getName = function () {
            return "iad";
        };
        InterstitialAD.prototype.suportAD = function () {
            return true;
        };
        InterstitialAD.prototype.getADInstanceAsync = function (placementId) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, kaixin.getInterstitialAdAsync(placementId)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return InterstitialAD;
    }(Advertise));
    kxad.InterstitialAD = InterstitialAD;
    var RewardedVideoAD = /** @class */ (function (_super) {
        tslib_1.__extends(RewardedVideoAD, _super);
        function RewardedVideoAD() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RewardedVideoAD.prototype.getName = function () {
            return "rad";
        };
        RewardedVideoAD.prototype.suportAD = function () {
            return true;
        };
        RewardedVideoAD.prototype.getADInstanceAsync = function (placementId) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, kaixin.getRewardedVideoAsync(placementId)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return RewardedVideoAD;
    }(Advertise));
    kxad.RewardedVideoAD = RewardedVideoAD;
})(kxad = exports.kxad || (exports.kxad = {}));

},{"../core/Emiter":11,"tslib":3}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BasePlatform_1 = require("./BasePlatform");
var Utils_1 = require("../core/Utils");
var KXAdvertise_1 = require("./KXAdvertise");
var KXIOSPlatform = /** @class */ (function (_super) {
    tslib_1.__extends(KXIOSPlatform, _super);
    function KXIOSPlatform() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isDateReady = false;
        _this._isFetching = false;
        return _this;
    }
    KXIOSPlatform.prototype.initialize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, kaixin.initializeAsync(false)];
                    case 1:
                        _a.sent();
                        this.fetchData();
                        return [2 /*return*/];
                }
            });
        });
    };
    KXIOSPlatform.prototype.fetchData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isDateReady)
                            return [2 /*return*/];
                        if (!this._isFetching) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.once("data_ready", resolve);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this._isFetching = true;
                        return [4 /*yield*/, Promise.all([
                                this.pullRemoteData(),
                            ])];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log("fetchData error:" + (e_1.code || e_1.msg || e_1));
                        return [3 /*break*/, 5];
                    case 5:
                        this._isFetching = false;
                        this._isDateReady = true;
                        this.emit("data_ready");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXIOSPlatform.prototype.startGame = function (iad_ids, rad_ids) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var option, data, entry_point;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        kaixin.setLoadingProgress(100);
                        return [4 /*yield*/, Utils_1.Utils.wait(1000)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, kaixin.startGameAsync()];
                    case 2:
                        _a.sent();
                        kaixin.showLoading(0, 0);
                        $sys_platform_started = true;
                        iad_ids = ["915221296"];
                        rad_ids = ["915221571"];
                        this._iad = new KXAdvertise_1.kxad.InterstitialAD(iad_ids, true);
                        this._iad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                        this._iad.on("ad_show", function (d) { return _this.log("iad_times", d); });
                        this._rad = new KXAdvertise_1.kxad.RewardedVideoAD(rad_ids, true);
                        this._rad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                        this._rad.on("ad_show", function (d) { return _this.log("rad_times", d); });
                        this.playerInfo.playerId = kaixin.player.getID();
                        this.playerInfo.name = kaixin.player.getName();
                        this.playerInfo.photo = kaixin.player.getPhoto();
                        option = {};
                        Object.assign($sys_args, option);
                        data = option["oppenent_info"];
                        if (data && data.playerId != this.playerInfo.playerId) {
                            this.oppenentData = data;
                        }
                        this.switch_gameInfo = option["switch_gameInfo"] || null;
                        this.entry = option["entry"] || option["type"] || "normal";
                        entry_point = "unknow";
                        if (this.entry == "normal" && entry_point == "admin_message") {
                            this.entry = "leaderboard";
                        }
                        this.log("entry_info", { entry: this.entry });
                        console.log("startGame done!");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXIOSPlatform.prototype.setLoadingProgress = function (value) {
        _super.prototype.setLoadingProgress.call(this, value);
        kaixin.setLoadingProgress(value);
    };
    KXIOSPlatform.prototype.getWorldEntries = function () { return []; };
    ;
    KXIOSPlatform.prototype.getWorldEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, []];
        }); });
    };
    ;
    KXIOSPlatform.prototype.getWorldFriendEntries = function () { return []; };
    ;
    KXIOSPlatform.prototype.getWorldFriendEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, []];
        }); });
    };
    ;
    // getWorldHighScore(){return this._world_leader.getScore();}
    // setHightScore(value:number,data?:any){
    // 	// this._weeky_leader.setScore(value,data)
    // 	this._world_leader.setScore(value,data);
    // }
    // async getData(keys:string[]){
    // 	let obj = {};
    // 	// for(let key of keys){
    // 	// 	obj[key] = await kaixin.player.getDataAsync(key)
    // 	// }
    // 	return obj;
    // }
    // async setData(obj,force=false){
    // 	// for(let key in obj){
    // 	// 	await kaixin.player.setDataAsync(key,obj[key]);
    // 	// }
    // }
    KXIOSPlatform.prototype.getPlayerDataAsync = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, len, value, i, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        data = {};
                        return [4 /*yield*/, kaixin.player.getDataAsync(key + "_len")];
                    case 1:
                        len = +(_b.sent()) || 0;
                        if (!(len > 0)) return [3 /*break*/, 6];
                        value = "";
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < len)) return [3 /*break*/, 5];
                        _a = value;
                        return [4 /*yield*/, kaixin.player.getDataAsync(key + "_part_" + i)];
                    case 3:
                        value = _a + _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        try {
                            data = JSON.parse(value);
                        }
                        catch (e) {
                            console.log("combine data error:", value);
                        }
                        _b.label = 6;
                    case 6: return [2 /*return*/, data];
                }
            });
        });
    };
    KXIOSPlatform.prototype.setPlayerDataAsyc = function (key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var len, i, substr;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        value = value + "";
                        len = Math.ceil(value.length / 128);
                        return [4 /*yield*/, kaixin.player.setDataAsync(key + "_len", len)];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < len)) return [3 /*break*/, 5];
                        substr = value.slice(i, i + 128);
                        return [4 /*yield*/, kaixin.player.setDataAsync(key + "_part_" + i, substr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    KXIOSPlatform.prototype.hasAD = function () {
        return this.hasRAD() || this.hasIAD();
    };
    KXIOSPlatform.prototype.showAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.showRAD(source)];
                    case 1:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.showIAD(source)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    KXIOSPlatform.prototype.hasRAD = function () {
        return this._rad && this._rad.hasAD();
    };
    KXIOSPlatform.prototype.showRAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log("showRAD", { result: -1, source: source });
                        _a = this._rad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._rad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showRAD", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    KXIOSPlatform.prototype.hasIAD = function () {
        return this._iad && this._iad.hasAD();
    };
    KXIOSPlatform.prototype.showIAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.hasIAD())
                            return [2 /*return*/, false];
                        this.log("showIAD", { result: -1, source: source });
                        _a = this._iad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._iad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showIAD", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    KXIOSPlatform.prototype.shareAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var origin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        origin = { entry_info: { template: option.template || "normal_share" } };
                        return [4 /*yield*/, kaixin.shareAsync({
                                intent: "SHARE",
                                image: option.image,
                                text: option.text,
                                data: Object.assign(origin, option.payload),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KXIOSPlatform.prototype.getContextId = function () { return null; };
    ;
    return KXIOSPlatform;
}(BasePlatform_1.BasePlatform));
exports.default = KXIOSPlatform;

},{"../core/Utils":17,"./BasePlatform":43,"./KXAdvertise":45,"tslib":3}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Emiter_1 = require("../core/Emiter");
var RankVO_1 = require("./RankVO");
var PlayerVO_1 = require("./PlayerVO");
var KXLeaderBoard = /** @class */ (function (_super) {
    tslib_1.__extends(KXLeaderBoard, _super);
    function KXLeaderBoard(name, sortType, defaultScore) {
        if (sortType === void 0) { sortType = "high"; }
        if (defaultScore === void 0) { defaultScore = 0; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.sortType = sortType;
        _this.defaultScore = defaultScore;
        _this._selfEntry = null;
        _this._entries = null;
        _this._friendEntries = null;
        _this._preInitialized = false;
        _this._preInitializing = false;
        _this._initialized = false;
        _this._initializing = false;
        _this._friends = null;
        return _this;
    }
    KXLeaderBoard.prototype.preInitializeAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, entry;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._preInitialized)
                            return [2 /*return*/];
                        if (!this._preInitializing) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.once("preInitialized", resolve);
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                    case 2:
                        this._preInitializing = true;
                        _a = this;
                        return [4 /*yield*/, kaixin.getLeaderboardAsync()];
                    case 3:
                        _a._leaderboard = _b.sent();
                        return [4 /*yield*/, this._leaderboard.getPlayerEntryAsync()];
                    case 4:
                        entry = _b.sent();
                        if (entry) {
                            this._selfEntry = this.createRankVO(entry);
                        }
                        else {
                            this._selfEntry = RankVO_1.default.fromFBPlayer(kaixin.player);
                        }
                        this._preInitialized = true;
                        this._preInitializing = false;
                        this.emit("preInitialized");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXLeaderBoard.prototype.initializeAsync = function (world, friend) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this._initialized)
                            return [2 /*return*/];
                        if (!this._initializing) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.once("initialized", resolve);
                            })];
                    case 1:
                        _c.sent();
                        return [2 /*return*/];
                    case 2:
                        this._initializing = true;
                        return [4 /*yield*/, this.preInitializeAsync()];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 9, , 10]);
                        _a = world;
                        if (!_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getEntriesAsync()];
                    case 5:
                        _a = (_c.sent());
                        _c.label = 6;
                    case 6:
                        _a;
                        _b = friend;
                        if (!_b) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.getConnectedPlayerEntriesAsync()];
                    case 7:
                        _b = (_c.sent());
                        _c.label = 8;
                    case 8:
                        _b;
                        return [3 /*break*/, 10];
                    case 9:
                        e_1 = _c.sent();
                        console.log("get enties failed!");
                        return [3 /*break*/, 10];
                    case 10:
                        this._initialized = true;
                        this._initializing = false;
                        this.emit("initialized");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXLeaderBoard.prototype.getEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var leaderboard, arr;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        if (!!this._entries) return [3 /*break*/, 3];
                        leaderboard = this._leaderboard;
                        return [4 /*yield*/, leaderboard.getEntriesAsync(100, 0)];
                    case 2:
                        arr = _a.sent();
                        this._entries = arr.map(function (v) { return _this.createRankVO(v); });
                        _a.label = 3;
                    case 3: return [2 /*return*/, this._entries || []];
                }
            });
        });
    };
    KXLeaderBoard.prototype.getEntries = function () {
        return this._entries || [];
    };
    KXLeaderBoard.prototype.getConnectedPlayerEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var leaderboard, arr, selfId_1, index;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        if (!this._friendEntries) {
                            leaderboard = this._leaderboard;
                            arr = [] //await leaderboard.getConnectedPlayerEntriesAsync.retryAsync<kaixin.LeaderboardEntry[]>(leaderboard,[100,0])
                            ;
                            this._friendEntries = arr.map(function (v) { return RankVO_1.default.fromLeaderBoardEntry(v); });
                            selfId_1 = kaixin.player.getID();
                            index = this._friendEntries.findIndex(function (v) { return v.id == selfId_1; });
                            if (index == -1) {
                                this._friendEntries.push(RankVO_1.default.fromFBPlayer(kaixin.player));
                                this._friendEntries.forEach(function (v, i) { return v.rank = i + 1; });
                            }
                            this.bindFriends();
                        }
                        return [2 /*return*/, this._friendEntries || []];
                }
            });
        });
    };
    KXLeaderBoard.prototype.getConnectedPlayerEntries = function () {
        return this._friendEntries || [];
    };
    KXLeaderBoard.prototype.refreshRankList = function (arr, score, data) {
        var selfId = kaixin.player.getID();
        var index = arr.findIndex(function (v) { return v.id == selfId; });
        if (index != -1) {
            var vo = arr[index];
            vo.score = score;
            vo.extraData = data;
            arr.sorton("score", this.sortType == "low");
            arr.forEach(function (v, i) { return v.rank = i + 1; });
        }
        else {
            if (arr.length > 0 && score > arr[arr.length - 1].score) {
                var vo = RankVO_1.default.fromFBPlayer(kaixin.player);
                vo.score = score;
                vo.extraData = data;
                arr.push(vo);
                arr.sorton("score", this.sortType == "low");
                arr.forEach(function (v, i) { return v.rank = i + 1; });
            }
        }
    };
    KXLeaderBoard.prototype.setScore = function (score, data) {
        var _this = this;
        if (!this._preInitialized)
            throw "doesn't preInitialized";
        if (score < this._selfEntry.score)
            return;
        this._selfEntry.score = score;
        this._selfEntry.extraData = data;
        if (this._entries) {
            this.refreshRankList(this._entries, score, data);
        }
        if (this._friendEntries) {
            this.refreshRankList(this._friendEntries, score, data);
        }
        new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var entry;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._leaderboard.setScoreAsync(score, JSON.stringify(data))];
                    case 2:
                        entry = _a.sent();
                        this._selfEntry = this.createRankVO(entry);
                        resolve();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    KXLeaderBoard.prototype.getScore = function () {
        if (!this._preInitialized)
            throw "doesn't preInitialized";
        return this._selfEntry.score;
    };
    KXLeaderBoard.prototype.setFriends = function (friends) {
        this._friends = friends;
        this.bindFriends();
    };
    KXLeaderBoard.prototype.bindFriends = function () {
        if (!this._friends || !this._friendEntries)
            return;
        var friendMap = {};
        var list = this._friends;
        list.forEach(function (f) { return friendMap[f.id] = f; });
        friendMap[kaixin.player.getID()] = PlayerVO_1.default.fromFBPlayer(kaixin.player);
        var arr = this._friendEntries;
        arr.forEach(function (v) {
            var friend = friendMap[v.id];
            if (friend) {
                v.name = friend.name;
                v.photo = friend.photo;
                delete friendMap[v.id];
            }
        });
        for (var id in friendMap) {
            var vo = RankVO_1.default.fromPlayer(friendMap[id]);
            vo.score = this.defaultScore;
            arr.push(vo);
        }
        arr.sorton("score", this.sortType == "low");
        arr.forEach(function (v, i) { return v.rank = i + 1; });
    };
    KXLeaderBoard.prototype.getSelfEntry = function () {
        return this._selfEntry;
    };
    KXLeaderBoard.prototype.createRankVO = function (entry) {
        var result = new RankVO_1.default;
        result.name = entry.name;
        result.id = entry.name;
        result.photo = entry.photo;
        result.score = entry.score;
        result.rank = entry.rank;
        return result;
    };
    return KXLeaderBoard;
}(Emiter_1.Emiter));
exports.default = KXLeaderBoard;

},{"../core/Emiter":11,"./PlayerVO":51,"./RankVO":52,"tslib":3}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BasePlatform_1 = require("./BasePlatform");
var Utils_1 = require("../core/Utils");
var KXLeaderBoard_1 = require("./KXLeaderBoard");
var KXAdvertise_1 = require("./KXAdvertise");
var KXPlatform = /** @class */ (function (_super) {
    tslib_1.__extends(KXPlatform, _super);
    function KXPlatform() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isDateReady = false;
        _this._isFetching = false;
        return _this;
    }
    KXPlatform.prototype.initialize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, kaixin.initializeAsync(false)];
                    case 1:
                        _a.sent();
                        this._world_leader = new KXLeaderBoard_1.default("world");
                        this.fetchData();
                        return [2 /*return*/];
                }
            });
        });
    };
    KXPlatform.prototype.fetchData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._isDateReady)
                            return [2 /*return*/];
                        if (!this._isFetching) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.once("data_ready", resolve);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        this._isFetching = true;
                        return [4 /*yield*/, Promise.all([
                                this.pullRemoteData(),
                                this._world_leader.initializeAsync(true, true),
                            ])];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log("fetchData error:" + (e_1.code || e_1.msg || e_1));
                        return [3 /*break*/, 5];
                    case 5:
                        this._isFetching = false;
                        this._isDateReady = true;
                        this.emit("data_ready");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXPlatform.prototype.startGame = function (iad_ids, rad_ids) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var option, data, entry_point;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        kaixin.setLoadingProgress(100);
                        return [4 /*yield*/, Utils_1.Utils.wait(1000)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, kaixin.startGameAsync()];
                    case 2:
                        _a.sent();
                        $sys_platform_started = true;
                        iad_ids = ["10000100"];
                        rad_ids = ["10000101"];
                        this._iad = new KXAdvertise_1.kxad.InterstitialAD(iad_ids, true);
                        this._iad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                        this._iad.on("ad_show", function (d) { return _this.log("iad_times", d); });
                        this._rad = new KXAdvertise_1.kxad.RewardedVideoAD(rad_ids, true);
                        this._rad.on("ad_failed", function (d) { return _this.log("ad_failed", d); });
                        this._rad.on("ad_show", function (d) { return _this.log("rad_times", d); });
                        this.playerInfo.playerId = kaixin.player.getID();
                        this.playerInfo.name = kaixin.player.getName();
                        this.playerInfo.photo = kaixin.player.getPhoto();
                        this._world_leader.setFriends(this._friends);
                        option = {};
                        Object.assign($sys_args, option);
                        data = option["oppenent_info"];
                        if (data && data.playerId != this.playerInfo.playerId) {
                            this.oppenentData = data;
                        }
                        this.switch_gameInfo = option["switch_gameInfo"] || null;
                        this.entry = option["entry"] || option["type"] || "normal";
                        entry_point = "unknow";
                        if (this.entry == "normal" && entry_point == "admin_message") {
                            this.entry = "leaderboard";
                        }
                        this.log("entry_info", { entry: this.entry });
                        console.log("startGame done!");
                        return [2 /*return*/];
                }
            });
        });
    };
    KXPlatform.prototype.setLoadingProgress = function (value) {
        _super.prototype.setLoadingProgress.call(this, value);
        kaixin.setLoadingProgress(value);
    };
    KXPlatform.prototype.getWorldEntries = function () { return this._world_leader.getEntries(); };
    ;
    KXPlatform.prototype.getWorldEntriesAsync = function () { return this._world_leader.getEntriesAsync(); };
    ;
    KXPlatform.prototype.getWorldFriendEntries = function () { return this._world_leader.getConnectedPlayerEntries(); };
    ;
    KXPlatform.prototype.getWorldFriendEntriesAsync = function () { return this._world_leader.getConnectedPlayerEntriesAsync(); };
    ;
    KXPlatform.prototype.getWorldHighScore = function () { return this._world_leader.getScore(); };
    KXPlatform.prototype.setHightScore = function (value, data) {
        // this._weeky_leader.setScore(value,data)
        this._world_leader.setScore(value, data);
    };
    // async getData(keys:string[]){
    // 	let obj = {};
    // 	// for(let key of keys){
    // 	// 	obj[key] = await kaixin.player.getDataAsync(key)
    // 	// }
    // 	return obj;
    // }
    // async setData(obj,force=false){
    // 	// for(let key in obj){
    // 	// 	await kaixin.player.setDataAsync(key,obj[key]);
    // 	// }
    // }
    KXPlatform.prototype.getPlayerDataAsync = function (key) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, len, value, i, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        data = {};
                        return [4 /*yield*/, kaixin.player.getDataAsync(key + "_len")];
                    case 1:
                        len = +(_b.sent()) || 0;
                        if (!(len > 0)) return [3 /*break*/, 6];
                        value = "";
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < len)) return [3 /*break*/, 5];
                        _a = value;
                        return [4 /*yield*/, kaixin.player.getDataAsync(key + "_part_" + i)];
                    case 3:
                        value = _a + _b.sent();
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        try {
                            data = JSON.parse(value);
                        }
                        catch (e) {
                            console.log("combine data error:", value);
                        }
                        _b.label = 6;
                    case 6: return [2 /*return*/, data];
                }
            });
        });
    };
    KXPlatform.prototype.setPlayerDataAsyc = function (key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var len, i, substr;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        value = value + "";
                        len = Math.ceil(value.length / 128);
                        return [4 /*yield*/, kaixin.player.setDataAsync(key + "_len", len)];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < len)) return [3 /*break*/, 5];
                        substr = value.slice(i, i + 128);
                        return [4 /*yield*/, kaixin.player.setDataAsync(key + "_part_" + i, substr)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    KXPlatform.prototype.hasAD = function () {
        return this.hasRAD() || this.hasIAD();
    };
    KXPlatform.prototype.showAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.showRAD(source)];
                    case 1:
                        _a = (_b.sent());
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.showIAD(source)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3: return [2 /*return*/, _a];
                }
            });
        });
    };
    KXPlatform.prototype.hasRAD = function () {
        return this._rad && this._rad.hasAD();
    };
    KXPlatform.prototype.showRAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log("showRAD", { result: -1, source: source });
                        _a = this._rad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._rad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showRAD", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    KXPlatform.prototype.hasIAD = function () {
        return this._iad && this._iad.hasAD();
    };
    KXPlatform.prototype.showIAD = function (source) {
        if (source === void 0) { source = "any"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log("showIAD", { result: -1, source: source });
                        _a = this._iad;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._iad.showAD(source)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        bo = _a;
                        this.log("showIAD", { result: bo ? 1 : 0, source: source });
                        return [2 /*return*/, bo];
                }
            });
        });
    };
    KXPlatform.prototype.shareAsync = function (option) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var origin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        origin = { entry_info: { template: option.template || "normal_share" } };
                        return [4 /*yield*/, kaixin.shareAsync({
                                intent: "SHARE",
                                image: option.image,
                                text: option.text,
                                data: Object.assign(origin, option.payload),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    KXPlatform.prototype.getContextId = function () { return null; };
    ;
    return KXPlatform;
}(BasePlatform_1.BasePlatform));
exports.default = KXPlatform;

},{"../core/Utils":17,"./BasePlatform":43,"./KXAdvertise":45,"./KXLeaderBoard":47,"tslib":3}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Emiter_1 = require("../core/Emiter");
var RankVO_1 = require("./RankVO");
var PlayerVO_1 = require("./PlayerVO");
var LeaderBoard = /** @class */ (function (_super) {
    tslib_1.__extends(LeaderBoard, _super);
    function LeaderBoard(name, sortType, defaultScore) {
        if (sortType === void 0) { sortType = "high"; }
        if (defaultScore === void 0) { defaultScore = 0; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.sortType = sortType;
        _this.defaultScore = defaultScore;
        _this._selfEntry = null;
        _this._entries = null;
        _this._friendEntries = null;
        _this._preInitialized = false;
        _this._preInitializing = false;
        _this._initialized = false;
        _this._initializing = false;
        _this._friends = null;
        return _this;
    }
    LeaderBoard.prototype.preInitializeAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, entry;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._preInitialized)
                            return [2 /*return*/];
                        if (!this._preInitializing) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.once("preInitialized", resolve);
                            })];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                    case 2:
                        this._preInitializing = true;
                        _a = this;
                        return [4 /*yield*/, FBInstant.getLeaderboardAsync(this.name)];
                    case 3:
                        _a._leaderboard = _b.sent();
                        return [4 /*yield*/, this._leaderboard.getPlayerEntryAsync()];
                    case 4:
                        entry = _b.sent();
                        if (entry) {
                            this._selfEntry = RankVO_1.default.fromLeaderBoardEntry(entry);
                        }
                        else {
                            this._selfEntry = RankVO_1.default.fromFBPlayer(FBInstant.player);
                        }
                        this._preInitialized = true;
                        this._preInitializing = false;
                        this.emit("preInitialized");
                        return [2 /*return*/];
                }
            });
        });
    };
    LeaderBoard.prototype.initializeAsync = function (world, friend) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this._initialized)
                            return [2 /*return*/];
                        if (!this._initializing) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve) {
                                _this.once("initialized", resolve);
                            })];
                    case 1:
                        _c.sent();
                        return [2 /*return*/];
                    case 2:
                        this._initializing = true;
                        return [4 /*yield*/, this.preInitializeAsync()];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        _c.trys.push([4, 9, , 10]);
                        _a = world;
                        if (!_a) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getEntriesAsync()];
                    case 5:
                        _a = (_c.sent());
                        _c.label = 6;
                    case 6:
                        _a;
                        _b = friend;
                        if (!_b) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.getConnectedPlayerEntriesAsync()];
                    case 7:
                        _b = (_c.sent());
                        _c.label = 8;
                    case 8:
                        _b;
                        return [3 /*break*/, 10];
                    case 9:
                        e_1 = _c.sent();
                        console.log("get enties failed!");
                        return [3 /*break*/, 10];
                    case 10:
                        this._initialized = true;
                        this._initializing = false;
                        this.emit("initialized");
                        return [2 /*return*/];
                }
            });
        });
    };
    LeaderBoard.prototype.getEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var leaderboard, arr;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        if (!!this._entries) return [3 /*break*/, 3];
                        leaderboard = this._leaderboard;
                        return [4 /*yield*/, leaderboard.getEntriesAsync(100, 0)];
                    case 2:
                        arr = _a.sent();
                        this._entries = arr.map(function (v) { return RankVO_1.default.fromLeaderBoardEntry(v); });
                        _a.label = 3;
                    case 3: return [2 /*return*/, this._entries || []];
                }
            });
        });
    };
    LeaderBoard.prototype.getEntries = function () {
        return this._entries || [];
    };
    LeaderBoard.prototype.getConnectedPlayerEntriesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var leaderboard, arr, selfId_1, index;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        if (!!this._friendEntries) return [3 /*break*/, 3];
                        leaderboard = this._leaderboard;
                        return [4 /*yield*/, leaderboard.getConnectedPlayerEntriesAsync(100, 0)];
                    case 2:
                        arr = _a.sent();
                        this._friendEntries = arr.map(function (v) { return RankVO_1.default.fromLeaderBoardEntry(v); });
                        selfId_1 = FBInstant.player.getID();
                        index = this._friendEntries.findIndex(function (v) { return v.id == selfId_1; });
                        if (index == -1) {
                            this._friendEntries.push(RankVO_1.default.fromFBPlayer(FBInstant.player));
                            this._friendEntries.forEach(function (v, i) { return v.rank = i + 1; });
                        }
                        this.bindFriends();
                        _a.label = 3;
                    case 3: return [2 /*return*/, this._friendEntries || []];
                }
            });
        });
    };
    LeaderBoard.prototype.getConnectedPlayerEntries = function () {
        return this._friendEntries || [];
    };
    LeaderBoard.prototype.refreshRankList = function (arr, score, data) {
        var selfId = FBInstant.player.getID();
        var index = arr.findIndex(function (v) { return v.id == selfId; });
        if (index != -1) {
            var vo = arr[index];
            vo.score = score;
            vo.extraData = data;
            arr.sorton("score", this.sortType == "low");
            arr.forEach(function (v, i) { return v.rank = i + 1; });
        }
        else {
            if (arr.length > 0 && score > arr[arr.length - 1].score) {
                var vo = RankVO_1.default.fromFBPlayer(FBInstant.player);
                vo.score = score;
                vo.extraData = data;
                arr.push(vo);
                arr.sorton("score", this.sortType == "low");
                arr.forEach(function (v, i) { return v.rank = i + 1; });
            }
        }
    };
    LeaderBoard.prototype.setScore = function (score, data) {
        var _this = this;
        if (!this._preInitialized)
            throw "doesn't preInitialized";
        if (score < this._selfEntry.score)
            return;
        this._selfEntry.score = score;
        this._selfEntry.extraData = data;
        if (this._entries) {
            this.refreshRankList(this._entries, score, data);
        }
        if (this._friendEntries) {
            this.refreshRankList(this._friendEntries, score, data);
        }
        new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var entry;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.preInitializeAsync()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._leaderboard.setScoreAsync(score, JSON.stringify(data))];
                    case 2:
                        entry = _a.sent();
                        this._selfEntry = RankVO_1.default.fromLeaderBoardEntry(entry);
                        resolve();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    LeaderBoard.prototype.getScore = function () {
        if (!this._preInitialized)
            throw "doesn't preInitialized";
        return this._selfEntry.score;
    };
    LeaderBoard.prototype.setFriends = function (friends) {
        this._friends = friends;
        this.bindFriends();
    };
    LeaderBoard.prototype.bindFriends = function () {
        if (!this._friends || !this._friendEntries)
            return;
        var friendMap = {};
        var list = this._friends;
        list.forEach(function (f) { return friendMap[f.id] = f; });
        friendMap[FBInstant.player.getID()] = PlayerVO_1.default.fromFBPlayer(FBInstant.player);
        var arr = this._friendEntries;
        arr.forEach(function (v) {
            var friend = friendMap[v.id];
            if (friend) {
                v.name = friend.name;
                v.photo = friend.photo;
                delete friendMap[v.id];
            }
        });
        for (var id in friendMap) {
            var vo = RankVO_1.default.fromPlayer(friendMap[id]);
            vo.score = this.defaultScore;
            arr.push(vo);
        }
        arr.sorton("score", this.sortType == "low");
        arr.forEach(function (v, i) { return v.rank = i + 1; });
    };
    LeaderBoard.prototype.getSelfEntry = function () {
        return this._selfEntry;
    };
    return LeaderBoard;
}(Emiter_1.Emiter));
exports.default = LeaderBoard;

},{"../core/Emiter":11,"./PlayerVO":51,"./RankVO":52,"tslib":3}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RemoteData_1 = require("./RemoteData");
var BasePlatform_1 = require("./BasePlatform");
var FBPlatform_1 = require("./FBPlatform");
var KXPlatform_1 = require("./KXPlatform");
var KXIOSPlatform_1 = require("./KXIOSPlatform");
var PlatformFactory = /** @class */ (function () {
    function PlatformFactory() {
    }
    PlatformFactory.startup = function () {
        var inst;
        var defaultData = new RemoteData_1.RemoteData();
        if (window["FBInstant"]) {
            inst = new FBPlatform_1.FBPlatform(defaultData);
        }
        else if (window["kaixin"]) {
            if ($sys_args.p == "KXIOS") {
                inst = new KXIOSPlatform_1.default(defaultData);
            }
            else {
                inst = new KXPlatform_1.default(defaultData);
            }
        }
        else {
            inst = new BasePlatform_1.BasePlatform(defaultData);
        }
        Object.defineProperty(window, 'platform', { get: function () { return inst; }, configurable: true });
    };
    return PlatformFactory;
}());
exports.PlatformFactory = PlatformFactory;

},{"./BasePlatform":43,"./FBPlatform":44,"./KXIOSPlatform":46,"./KXPlatform":48,"./RemoteData":53}],51:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RankVO_1 = require("./RankVO");
var PlayerVO = /** @class */ (function () {
    function PlayerVO() {
        this.id = "";
        this.name = "";
        this.photo = "";
    }
    PlayerVO.fromFBPlayer = function (p) {
        var result = new RankVO_1.default;
        result.name = p.getName();
        result.id = p.getID();
        result.photo = p.getPhoto();
        return result;
    };
    return PlayerVO;
}());
exports.default = PlayerVO;

},{"./RankVO":52}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var PlayerVO_1 = require("./PlayerVO");
var RankVO = /** @class */ (function (_super) {
    tslib_1.__extends(RankVO, _super);
    function RankVO() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.score = 0;
        _this.rank = 0;
        _this.extraData = null;
        return _this;
    }
    RankVO.fromLeaderBoardEntry = function (v) {
        var p = v.getPlayer();
        var result = new RankVO;
        result.name = p.getName();
        result.id = p.getID();
        result.photo = p.getPhoto();
        result.score = v.getScore();
        result.rank = v.getRank();
        // try{
        // 	let extraStr = v.getExtraData()
        // 	let obj = JSON.parse(extraStr);
        // 	result.extraData = obj;
        // }catch(e){
        // 	console.error("extra parse error",v.getExtraData())
        // }
        return result;
    };
    RankVO.fromPlayer = function (p) {
        var result = new RankVO;
        result.name = p.name;
        result.id = p.id;
        result.photo = p.photo;
        return result;
    };
    return RankVO;
}(PlayerVO_1.default));
exports.default = RankVO;

},{"./PlayerVO":51,"tslib":3}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RemoteData = /** @class */ (function () {
    function RemoteData() {
        this.isDirty = false;
        this.contextIds = [];
        this.level = 0;
        this.best_score = 0;
        this.ad_count = 0;
        this.iad_time = 0;
    }
    return RemoteData;
}());
exports.RemoteData = RemoteData;

},{}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ButtonScript = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonScript, _super);
    function ButtonScript() {
        return _super.call(this) || this;
    }
    ButtonScript.prototype.onAwake = function () {
        var _this = this;
        this.owner.on(Laya.Event.MOUSE_DOWN, this, function () {
            _this.owner.alpha = 0.7;
            Laya.stage.once(Laya.Event.MOUSE_UP, _this, function () {
                _this.owner.alpha = 1;
            });
        });
    };
    ButtonScript.prototype.onEnable = function () {
    };
    ButtonScript.prototype.onDisable = function () {
    };
    return ButtonScript;
}(Laya.Script));
exports.default = ButtonScript;

},{"tslib":3}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var CircleProgressScript = /** @class */ (function (_super) {
    tslib_1.__extends(CircleProgressScript, _super);
    function CircleProgressScript() {
        var _this = _super.call(this) || this;
        _this._progress = NaN;
        return _this;
    }
    CircleProgressScript.prototype.onAwake = function () {
        console.log("onAwake:CircleProgressScript");
        this.bg_track = this.owner.getChildByName("bg_track");
        this.bar = this.owner.getChildByName("bar");
        this.bar_mask = new Laya.Sprite();
        this.bar.mask = this.bar_mask;
        this.value = 0;
    };
    Object.defineProperty(CircleProgressScript.prototype, "value", {
        get: function () {
            return this._progress || 0;
        },
        set: function (v) {
            v = Math.clamp(v, 0, 1);
            if (this._progress == v)
                return;
            this._progress = v;
            var radius = this.bar.width >> 1;
            this.bar_mask.graphics.clear(true);
            this.bar_mask.graphics.drawPie(radius, radius, radius + 10, 90, 90 + v * 360, 0);
        },
        enumerable: true,
        configurable: true
    });
    CircleProgressScript.prototype.onEnable = function () {
        console.log("onEnable:CircleProgressScript");
    };
    CircleProgressScript.prototype.onDisable = function () {
        console.log("onDisable:CircleProgressScript");
    };
    return CircleProgressScript;
}(Laya.Script));
exports.default = CircleProgressScript;

},{"tslib":3}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var FullScreenScript = /** @class */ (function (_super) {
    tslib_1.__extends(FullScreenScript, _super);
    // 更多参数说明请访问: https://ldc2.layabox.com/doc/?nav=zh-as-2-4-0
    function FullScreenScript() {
        var _this = _super.call(this) || this;
        /** @prop {name:intType, tips:"整数类型示例", type:Int, default:1000}*/
        _this.intType = 1000;
        /** @prop {name:numType, tips:"数字类型示例", type:Number, default:1000}*/
        _this.numType = 1000;
        /** @prop {name:strType, tips:"字符串类型示例", type:String, default:"hello laya"}*/
        _this.strType = "hello laya";
        /** @prop {name:boolType, tips:"布尔类型示例", type:Bool, default:true}*/
        _this.boolType = true;
        return _this;
    }
    FullScreenScript.prototype.onAwake = function () {
        this.onStageResized();
    };
    FullScreenScript.prototype.onEnable = function () {
        Laya.stage.on(Laya.Event.RESIZE, this, this.onStageResized);
    };
    FullScreenScript.prototype.onDisable = function () {
        Laya.stage.off(Laya.Event.RESIZE, this, this.onStageResized);
    };
    FullScreenScript.prototype.onUpdate = function () {
    };
    FullScreenScript.prototype.onStageResized = function () {
        var node = this.owner;
        var scale = Math.max(Laya.stage.width / node.width, Laya.stage.height / node.height);
        node.scale(scale, scale);
        node.pos((Laya.stage.width - node.width * scale) >> 1, (Laya.stage.height - node.height * scale) >> 1);
    };
    return FullScreenScript;
}(Laya.Script));
exports.default = FullScreenScript;

},{"tslib":3}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var RotateScript = /** @class */ (function (_super) {
    tslib_1.__extends(RotateScript, _super);
    function RotateScript() {
        var _this = _super.call(this) || this;
        /** @prop {name:intType, tips:"degree in second", type:Int, default:80}*/
        _this.speed = 80;
        return _this;
    }
    RotateScript.prototype.onEnable = function () {
    };
    RotateScript.prototype.onUpdate = function () {
        var node = this.owner;
        node.rotation += this.speed / 360 * Laya.timer.delta;
    };
    RotateScript.prototype.onDisable = function () {
    };
    return RotateScript;
}(Laya.Script));
exports.default = RotateScript;

},{"tslib":3}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var ShareChallengeResultUI = /** @class */ (function (_super) {
    tslib_1.__extends(ShareChallengeResultUI, _super);
    function ShareChallengeResultUI(lefData, rightData) {
        var _this = _super.call(this) || this;
        _this.lefData = lefData;
        _this.rightData = rightData;
        _this.img_bg.skin = null;
        _this.img_head_left.skin = null;
        _this.img_head_right.skin = null;
        _this.applyData();
        return _this;
    }
    ShareChallengeResultUI.prototype.applyData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.txt_score_left.text = this.lefData.score + "";
                        this.txt_score_right.text = this.rightData.score + "";
                        return [4 /*yield*/, Promise.all([
                                new Promise(function (resolve, reject) {
                                    _this.img_bg.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_bg.skin = "share/share_challenge_result.png";
                                }),
                                new Promise(function (resolve) {
                                    _this.img_head_left.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_head_left.skin = _this.lefData.head;
                                }),
                                new Promise(function (resolve) {
                                    _this.img_head_right.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_head_right.skin = _this.rightData.head;
                                }),
                            ])];
                    case 1:
                        _a.sent();
                        console.log("challenge result loaded");
                        Laya.timer.frameOnce(2, this, function () {
                            _this.event("ready_draw");
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return ShareChallengeResultUI;
}(layaMaxUI_1.ui.share.ShareChallengeResultUI));
exports.default = ShareChallengeResultUI;

},{"../ui/layaMaxUI":63,"tslib":3}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var ShareChallengeUI = /** @class */ (function (_super) {
    tslib_1.__extends(ShareChallengeUI, _super);
    function ShareChallengeUI(dat) {
        var _this = _super.call(this) || this;
        _this.dat = dat;
        _this.img_bg.skin = null;
        _this.img_head.skin = null;
        _this.applyData();
        return _this;
    }
    ShareChallengeUI.prototype.applyData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.txt_score.text = this.dat.score + "";
                        return [4 /*yield*/, Promise.all([
                                new Promise(function (resolve, reject) {
                                    _this.img_bg.skin = null;
                                    _this.img_bg.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_bg.skin = "share/share_challenge.jpg";
                                }),
                                new Promise(function (resolve) {
                                    _this.img_head.skin = null;
                                    _this.img_head.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_head.skin = _this.dat.head;
                                })
                            ])];
                    case 1:
                        _a.sent();
                        Laya.timer.frameOnce(2, this, function () {
                            _this.event("ready_draw");
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return ShareChallengeUI;
}(layaMaxUI_1.ui.share.ShareChallengeUI));
exports.default = ShareChallengeUI;

},{"../ui/layaMaxUI":63,"tslib":3}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var ShareGameUI = /** @class */ (function (_super) {
    tslib_1.__extends(ShareGameUI, _super);
    function ShareGameUI(dat) {
        var _this = _super.call(this) || this;
        _this.dat = dat;
        _this.img_bg.skin = null;
        _this.applyData();
        return _this;
    }
    ShareGameUI.prototype.applyData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            new Promise(function (resolve, reject) {
                                _this.img_bg.skin = null;
                                _this.img_bg.once(Laya.Event.LOADED, _this, resolve);
                                _this.img_bg.skin = _this.dat.bg;
                            })
                        ])];
                    case 1:
                        _a.sent();
                        Laya.timer.frameOnce(2, this, function () {
                            _this.event("ready_draw");
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return ShareGameUI;
}(layaMaxUI_1.ui.share.ShareGameUI));
exports.default = ShareGameUI;

},{"../ui/layaMaxUI":63,"tslib":3}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var FBPlatform_1 = require("../platform/FBPlatform");
var ShareGameUI_1 = require("./ShareGameUI");
var ShareChallengeResultUI_1 = require("./ShareChallengeResultUI");
var ShareChallengeUI_1 = require("./ShareChallengeUI");
var ShareNewRecoredUI_1 = require("./ShareNewRecoredUI");
var ShareHelper;
(function (ShareHelper) {
    function generateImage(spr) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var base64;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            spr.once("ready_draw", null, function () {
                                // spr.alpha =1;
                                var canvas = spr.drawToCanvas(spr.width, spr.height, 0, 0);
                                console.log("texture generated!");
                                var b64 = canvas.toBase64("image/png", 0.92);
                                spr.removeSelf();
                                resolve(b64);
                            });
                            Laya.stage.addChildAt(spr, 0);
                            // spr.alpha =0;
                        })];
                    case 1:
                        base64 = _a.sent();
                        return [2 /*return*/, base64];
                }
            });
        });
    }
    ShareHelper.generateImage = generateImage;
    function baseShare(template, useUpdate) {
        if (useUpdate === void 0) { useUpdate = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info, texts, imgs, image, text;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        useUpdate || app.ui.busy();
                        info = {
                            head: platform.playerInfo.photo,
                            playerId: platform.playerInfo.playerId,
                            name: platform.playerInfo.name,
                            score: platform.getWorldHighScore(),
                            skin: 0
                        };
                        texts = [
                            "Whoa! I can't believe I did that.",
                            "Opps, what have I done?",
                            "Just look at it. Isn't it amazing!",
                            "Phew, what a relief!",
                            "Ugh. It’s horrible."
                        ];
                        imgs = [
                            // "share/share_game_1.jpg",
                            "share/share_game.jpg",
                        ];
                        return [4 /*yield*/, generateImage(new ShareGameUI_1.default({ bg: imgs.random(), photo: info.head, score: info.score, skin: 0 }))];
                    case 1:
                        image = _a.sent();
                        text = texts.random();
                        if (!useUpdate) return [3 /*break*/, 3];
                        return [4 /*yield*/, platform.updateAsync({
                                text: text,
                                image: image,
                                template: template,
                                cta: "Play",
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, platform.shareAsync({
                            text: text,
                            image: image,
                            template: template,
                        })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        useUpdate || app.ui.unbusy();
                        return [2 /*return*/];
                }
            });
        });
    }
    ShareHelper.baseShare = baseShare;
    function hscoreShare(score, useUpdate) {
        if (useUpdate === void 0) { useUpdate = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info, image, text, template;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        useUpdate || app.ui.busy();
                        info = {
                            head: platform.playerInfo.photo,
                            playerId: platform.playerInfo.playerId,
                            name: platform.playerInfo.name,
                            score: score,
                            skin: 0
                        };
                        return [4 /*yield*/, generateImage(new ShareNewRecoredUI_1.default(info))];
                    case 1:
                        image = _a.sent();
                        text = "New record again,can you beat me?";
                        template = "high_score";
                        if (!useUpdate) return [3 /*break*/, 3];
                        return [4 /*yield*/, platform.updateAsync({
                                text: text,
                                image: image,
                                template: template,
                                cta: "Surpass " + info.name,
                                payload: { oppenent_info: info },
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, platform.shareAsync({
                            text: text,
                            image: image,
                            template: template,
                            payload: { oppenent_info: info }
                        })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        useUpdate || app.ui.unbusy();
                        return [2 /*return*/];
                }
            });
        });
    }
    ShareHelper.hscoreShare = hscoreShare;
    function challengeShare(score, useUpdate) {
        if (useUpdate === void 0) { useUpdate = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info, image, text;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        useUpdate || app.ui.busy();
                        info = {
                            head: platform.playerInfo.photo,
                            playerId: platform.playerInfo.playerId,
                            name: platform.playerInfo.name,
                            score: score,
                            skin: 0
                        };
                        console.log("gen image");
                        return [4 /*yield*/, generateImage(new ShareChallengeUI_1.default(info))];
                    case 1:
                        image = _a.sent();
                        console.log("gen image done");
                        text = info.name + " has challenged you to a match of " + platform.appName + "!";
                        if (!useUpdate) return [3 /*break*/, 3];
                        console.log("update");
                        return [4 /*yield*/, platform.updateAsync({
                                image: image,
                                text: text,
                                cta: "CHALLENGE",
                                payload: { oppenent_info: info },
                                template: "challenge_request"
                            })];
                    case 2:
                        _a.sent();
                        console.log("update done");
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, platform.shareAsync({
                            image: image,
                            text: text,
                            template: "challenge_request_share",
                            payload: { oppenent_info: info }
                        })];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        useUpdate || app.ui.unbusy();
                        return [2 /*return*/];
                }
            });
        });
    }
    ShareHelper.challengeShare = challengeShare;
    function challengeResultShare(score, opponent, isGroup) {
        if (isGroup === void 0) { isGroup = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var info, friendName, opponentName, who, text, image;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        info = {
                            head: platform.playerInfo.photo,
                            playerId: platform.playerInfo.playerId,
                            name: platform.playerInfo.name,
                            score: score,
                            skin: 0
                        };
                        friendName = isGroup ? opponent.name : "";
                        opponentName = friendName || 'you';
                        who = opponentName == "you" ? "you" : "they";
                        text = info.name + " has challenged " + opponentName + ", " + who + " are really evenly matched!";
                        if (info.score < opponent.score) {
                            text = info.name + " has failed to surpass " + opponentName + ", " + opponentName + " win!";
                        }
                        else if (info.score > opponent.score) {
                            text = info.name + " has succeeded in passing " + opponentName + ". Come and surpass " + info.name;
                        }
                        return [4 /*yield*/, generateImage(new ShareChallengeResultUI_1.default(info, opponent))];
                    case 1:
                        image = _a.sent();
                        return [4 /*yield*/, platform.updateAsync({
                                image: image,
                                text: text,
                                cta: "START NEW MATCH",
                                payload: { oppenent_info: info },
                                template: "challenge_result"
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    function sendScore(score) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var needNormalUpdate, isGroup, leaderName, leaderboard, result, isGroup_1, players;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!platform.getContextId())
                            return [2 /*return*/];
                        needNormalUpdate = true;
                        isGroup = false;
                        if (!(platform instanceof FBPlatform_1.FBPlatform)) return [3 /*break*/, 5];
                        leaderName = "context." + FBInstant.context.getID();
                        return [4 /*yield*/, FBInstant.getLeaderboardAsync(leaderName)];
                    case 1:
                        leaderboard = _a.sent();
                        return [4 /*yield*/, leaderboard.setScoreAsync(score)];
                    case 2:
                        _a.sent();
                        result = FBInstant.context.isSizeBetween(3, null);
                        isGroup_1 = result && result.answer;
                        if (!isGroup_1) return [3 /*break*/, 5];
                        return [4 /*yield*/, FBInstant.context.getPlayersAsync()];
                    case 3:
                        players = _a.sent();
                        players = players.filter(function (v) { return v.getID() != platform.playerInfo.playerId; });
                        if (!(players.length >= 2)) return [3 /*break*/, 5];
                        return [4 /*yield*/, FBInstant.updateAsync({
                                action: "LEADERBOARD",
                                name: leaderName
                            })];
                    case 4:
                        _a.sent();
                        needNormalUpdate = false;
                        _a.label = 5;
                    case 5:
                        if (!needNormalUpdate) return [3 /*break*/, 9];
                        if (!platform.oppenentData) return [3 /*break*/, 7];
                        return [4 /*yield*/, challengeResultShare(score, platform.oppenentData, isGroup)];
                    case 6:
                        _a.sent();
                        platform.oppenentData = null;
                        return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, challengeShare(score)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    }
    ShareHelper.sendScore = sendScore;
})(ShareHelper = exports.ShareHelper || (exports.ShareHelper = {}));

},{"../platform/FBPlatform":44,"./ShareChallengeResultUI":58,"./ShareChallengeUI":59,"./ShareGameUI":60,"./ShareNewRecoredUI":62,"tslib":3}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var ShareNewRecoredUI = /** @class */ (function (_super) {
    tslib_1.__extends(ShareNewRecoredUI, _super);
    function ShareNewRecoredUI(dat) {
        var _this = _super.call(this) || this;
        _this.dat = dat;
        _this.img_bg.skin = null;
        _this.img_head.skin = null;
        _this.applyData();
        return _this;
    }
    ShareNewRecoredUI.prototype.applyData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.txt_score.text = this.dat.score + "";
                        return [4 /*yield*/, Promise.all([
                                new Promise(function (resolve, reject) {
                                    _this.img_bg.skin = null;
                                    _this.img_bg.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_bg.skin = "share/share_challenge.jpg";
                                }),
                                new Promise(function (resolve) {
                                    _this.img_head.skin = null;
                                    _this.img_head.once(Laya.Event.LOADED, _this, resolve);
                                    _this.img_head.skin = _this.dat.head;
                                })
                            ])];
                    case 1:
                        _a.sent();
                        Laya.timer.frameOnce(2, this, function () {
                            _this.event("ready_draw");
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return ShareNewRecoredUI;
}(layaMaxUI_1.ui.share.ShareNewRecordUI));
exports.default = ShareNewRecoredUI;

},{"../ui/layaMaxUI":63,"tslib":3}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var share;
    (function (share) {
        var ShareChallengeUI = /** @class */ (function (_super) {
            tslib_1.__extends(ShareChallengeUI, _super);
            function ShareChallengeUI() {
                return _super.call(this) || this;
            }
            ShareChallengeUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ShareChallengeUI.uiView);
            };
            ShareChallengeUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 335 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "img_bg", "top": 0, "skin": "comp/image.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 4 }, { "type": "Label", "props": { "y": 205, "x": 168, "text": "SCORE", "fontSize": 38, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 7 }, { "type": "Label", "props": { "y": 270, "x": 158, "var": "txt_score", "text": "2340", "fontSize": 68, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6 }, { "type": "Image", "props": { "y": 43, "x": 98, "width": 130, "var": "img_head", "skin": "comp/image.png", "height": 130 }, "compId": 3, "child": [{ "type": "Image", "props": { "width": 130, "skin": "game/default_portait_square.png", "renderType": "mask", "height": 130 }, "compId": 5 }] }], "loadList": ["comp/image.png", "game/default_portait_square.png"], "loadList3D": [] };
            return ShareChallengeUI;
        }(Scene));
        share.ShareChallengeUI = ShareChallengeUI;
        REG("ui.share.ShareChallengeUI", ShareChallengeUI);
        var ShareChallengeResultUI = /** @class */ (function (_super) {
            tslib_1.__extends(ShareChallengeResultUI, _super);
            function ShareChallengeResultUI() {
                return _super.call(this) || this;
            }
            ShareChallengeResultUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ShareChallengeResultUI.uiView);
            };
            ShareChallengeResultUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 335 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "var": "img_bg", "top": 0, "skin": "comp/image.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 4 }, { "type": "Label", "props": { "y": 268, "x": 100, "var": "txt_score_left", "text": "23400", "fontSize": 65, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 5 }, { "type": "Image", "props": { "y": 129, "x": 100, "width": 130, "var": "img_head_left", "skin": "comp/image.png", "height": 130, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 6, "child": [{ "type": "Image", "props": { "width": 130, "skin": "game/default_portait_square.png", "renderType": "mask", "height": 130 }, "compId": 7 }] }, { "type": "Label", "props": { "y": 264, "x": 520, "var": "txt_score_right", "text": "12000", "fontSize": 65, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 8 }, { "type": "Image", "props": { "y": 129, "x": 540, "width": 130, "var": "img_head_right", "skin": "comp/image.png", "height": 130, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 9, "child": [{ "type": "Image", "props": { "width": 130, "skin": "game/default_portait_square.png", "renderType": "mask", "height": 130 }, "compId": 10 }] }, { "type": "Label", "props": { "y": 239, "x": 239, "text": "VS", "name": "vs", "fontSize": 68, "color": "#ffffff", "centerX": 0, "bold": true }, "compId": 14 }], "loadList": ["comp/image.png", "game/default_portait_square.png"], "loadList3D": [] };
            return ShareChallengeResultUI;
        }(Scene));
        share.ShareChallengeResultUI = ShareChallengeResultUI;
        REG("ui.share.ShareChallengeResultUI", ShareChallengeResultUI);
        var ShareGameUI = /** @class */ (function (_super) {
            tslib_1.__extends(ShareGameUI, _super);
            function ShareGameUI() {
                return _super.call(this) || this;
            }
            ShareGameUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ShareGameUI.uiView);
            };
            ShareGameUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 335 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "img_bg", "top": 0, "skin": "comp/image.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 3 }], "loadList": ["comp/image.png"], "loadList3D": [] };
            return ShareGameUI;
        }(Scene));
        share.ShareGameUI = ShareGameUI;
        REG("ui.share.ShareGameUI", ShareGameUI);
        var ShareNewRecordUI = /** @class */ (function (_super) {
            tslib_1.__extends(ShareNewRecordUI, _super);
            function ShareNewRecordUI() {
                return _super.call(this) || this;
            }
            ShareNewRecordUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(ShareNewRecordUI.uiView);
            };
            ShareNewRecordUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 335 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 10, "x": 10, "var": "img_bg", "top": 0, "skin": "comp/image.png", "right": 0, "left": 0, "bottom": 0 }, "compId": 3 }, { "type": "Label", "props": { "y": 215, "x": 178, "text": "BEST SCORE", "fontSize": 30, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 4 }, { "type": "Label", "props": { "y": 280, "x": 168, "var": "txt_score", "text": "2340", "fontSize": 68, "color": "#ffffff", "bold": true, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 5 }, { "type": "Image", "props": { "y": 53, "x": 108, "width": 130, "var": "img_head", "skin": "comp/image.png", "height": 130 }, "compId": 6, "child": [{ "type": "Image", "props": { "width": 130, "skin": "game/default_portait_square.png", "renderType": "mask", "height": 130 }, "compId": 7 }] }], "loadList": ["comp/image.png", "game/default_portait_square.png"], "loadList3D": [] };
            return ShareNewRecordUI;
        }(Scene));
        share.ShareNewRecordUI = ShareNewRecordUI;
        REG("ui.share.ShareNewRecordUI", ShareNewRecordUI);
    })(share = ui.share || (ui.share = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var view;
    (function (view) {
        var GameUI = /** @class */ (function (_super) {
            tslib_1.__extends(GameUI, _super);
            function GameUI() {
                return _super.call(this) || this;
            }
            GameUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(GameUI.uiView);
            };
            GameUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Label", "props": { "y": 120, "var": "_txt_score", "text": "999", "styleSkin": "comp/label.png", "fontSize": 50, "color": "0", "centerX": 0, "bold": true }, "compId": 7 }, { "type": "Box", "props": { "y": 70, "width": 390, "var": "_bx_core", "centerX": 0 }, "compId": 12, "child": [{ "type": "Box", "props": { "y": 17, "x": 52 }, "compId": 37, "child": [{ "type": "Image", "props": { "var": "_img_bartrack", "skin": "game/level_bar_track.png" }, "compId": 38 }, { "type": "Image", "props": { "var": "_img_bar", "skin": "game/level_bar.png" }, "compId": 39 }] }, { "type": "Sprite", "props": { "y": 0, "x": 0, "var": "_img_left", "texture": "game/bg_level_num.png" }, "compId": 41 }, { "type": "Sprite", "props": { "y": 0, "x": 335, "var": "_img_right", "texture": "game/bg_level_num.png" }, "compId": 40 }, { "type": "Label", "props": { "y": 27, "x": 27, "var": "_txtNum_left", "valign": "middle", "text": "100", "styleSkin": "comp/label.png", "height": 55, "fontSize": 34, "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 4 }, { "type": "Label", "props": { "y": 27, "x": 362, "var": "_txtNum_right", "valign": "middle", "text": "100", "styleSkin": "comp/label.png", "height": 55, "fontSize": 34, "color": "#ffffff", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 42 }] }, { "type": "Box", "props": { "width": 1, "var": "_circle_bar", "height": 1, "centerY": 200, "centerX": 0 }, "compId": 32, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "skin": "game/circle_bar_track.png", "name": "bg_track", "anchorY": 0.5, "anchorX": 0.5, "alpha": 0.6 }, "compId": 30 }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "game/circle_bar.png", "name": "bar", "anchorY": 0.5, "anchorX": 0.5 }, "compId": 31 }, { "type": "Label", "props": { "var": "_txt_warning", "text": "!", "styleSkin": "comp/image.png", "fontSize": 100, "color": "#ffffff", "centerY": 0, "centerX": 0, "bold": true }, "compId": 10 }, { "type": "Script", "props": { "runtime": "script/CircleProgressScript.ts" }, "compId": 33 }] }], "loadList": ["comp/label.png", "game/level_bar_track.png", "game/level_bar.png", "game/bg_level_num.png", "game/circle_bar_track.png", "game/circle_bar.png", "comp/image.png"], "loadList3D": [] };
            return GameUI;
        }(Scene));
        view.GameUI = GameUI;
        REG("ui.view.GameUI", GameUI);
        var GameOverUI = /** @class */ (function (_super) {
            tslib_1.__extends(GameOverUI, _super);
            function GameOverUI() {
                return _super.call(this) || this;
            }
            GameOverUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(GameOverUI.uiView);
            };
            GameOverUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0", "alpha": 0.6 }, "compId": 20 }, { "type": "Label", "props": { "y": 260, "text": "GAME OVER", "styleSkin": "comp/label.png", "name": "game_over", "fontSize": 60, "color": "#ffffff", "centerX": 0, "bold": true }, "compId": 12 }, { "type": "Box", "props": { "var": "node_restart", "top": 0, "right": 0, "name": "node_restart", "left": 0, "bottom": 0 }, "compId": 13, "child": [{ "type": "Label", "props": { "y": 408, "text": "SCORE:", "styleSkin": "comp/label.png", "name": "score", "fontSize": 50, "color": "#ffffff", "centerX": 0 }, "compId": 11, "child": [{ "type": "Label", "props": { "y": 58, "var": "_txt_scores", "text": "100", "styleSkin": "comp/label.png", "fontSize": 72, "color": "#fff9f9", "centerX": 0 }, "compId": 7 }] }, { "type": "Label", "props": { "y": 567, "text": "BEST", "styleSkin": "comp/label.png", "name": "best", "fontSize": 40, "color": "#fd9003", "centerX": 0 }, "compId": 9, "child": [{ "type": "Label", "props": { "y": 50, "var": "_txt_best", "text": "1000", "styleSkin": "comp/label.png", "fontSize": 70, "color": "#fd9003", "centerX": -1 }, "compId": 8 }] }, { "type": "Label", "props": { "var": "btn_friendly", "text": "PLAY FRIENDLY", "labelSize": 40, "labelColors": "#ffffff", "label": "TOUCH TO RESTART", "fontSize": 40, "color": "#ffffff", "centerX": 0, "bottom": 206, "bold": true }, "compId": 21, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 22 }] }, { "type": "Label", "props": { "x": 160, "var": "btn_restart", "text": "PLAY SINGLE", "labelSize": 40, "labelColors": "#ffffff", "label": "TOUCH TO RESTART", "fontSize": 40, "color": "#ffffff", "centerX": 0, "bottom": 115, "bold": true }, "compId": 3, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 23 }] }] }, { "type": "Box", "props": { "var": "node_continue", "top": 1, "right": 0, "name": "node_continue", "left": 0, "bottom": 0 }, "compId": 14, "child": [{ "type": "Box", "props": { "var": "node_timer", "centerY": 1, "centerX": 0 }, "compId": 16, "child": [{ "type": "Image", "props": { "y": 1, "x": 0, "skin": "game/ad_timer.png", "name": "bar" }, "compId": 17 }, { "type": "Sprite", "props": { "y": 89, "x": 80, "texture": "game/icon_ad.png" }, "compId": 18 }, { "type": "Script", "props": { "runtime": "script/CircleProgressScript.ts" }, "compId": 19 }, { "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 26 }] }, { "type": "Label", "props": { "y": 810, "x": 60, "var": "_btn_continue", "text": "SECOND CHANCE?", "labelSize": 41, "labelColors": "#ffffff", "label": "continue", "fontSize": 55, "color": "#FFFFFF", "centerX": 0, "bottom": 270, "bold": true }, "compId": 4, "child": [{ "type": "Label", "props": { "y": -94, "x": 87, "var": "_txt_timer", "text": "10s", "styleSkin": "comp/label.png", "fontSize": 41, "color": "#ffffff", "centerX": 0 }, "compId": 6 }, { "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 25 }] }, { "type": "Label", "props": { "var": "_btn_noThanks", "text": "NO THANKS", "labelSize": 36, "labelColors": "#FFFFFF", "label": "NO THANKS", "fontSize": 36, "color": "#ffffff", "centerX": 0, "bottom": 176 }, "compId": 5, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 24 }] }] }], "loadList": ["comp/label.png", "game/ad_timer.png", "game/icon_ad.png"], "loadList3D": [] };
            return GameOverUI;
        }(Scene));
        view.GameOverUI = GameOverUI;
        REG("ui.view.GameOverUI", GameOverUI);
        var GameWinUI = /** @class */ (function (_super) {
            tslib_1.__extends(GameWinUI, _super);
            function GameWinUI() {
                return _super.call(this) || this;
            }
            GameWinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(GameWinUI.uiView);
            };
            GameWinUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0", "alpha": 0.6 }, "compId": 9 }, { "type": "Label", "props": { "y": 172, "wordWrap": true, "width": 400, "var": "_txtComplete", "text": "LEVEL 100  COMPLETED!", "styleSkin": "comp/label.png", "leading": 15, "fontSize": 60, "color": "#ffffff", "centerX": 0, "bold": true, "align": "center" }, "compId": 4 }, { "type": "Label", "props": { "text": "TOUCH TO NEXT", "styleSkin": "comp/label.png", "fontSize": 40, "color": "#ffffff", "centerX": 0, "bottom": 120 }, "compId": 5 }], "loadList": ["comp/label.png"], "loadList3D": [] };
            return GameWinUI;
        }(Scene));
        view.GameWinUI = GameWinUI;
        REG("ui.view.GameWinUI", GameWinUI);
        var MeunUI = /** @class */ (function (_super) {
            tslib_1.__extends(MeunUI, _super);
            function MeunUI() {
                return _super.call(this) || this;
            }
            MeunUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(MeunUI.uiView);
            };
            MeunUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Label", "props": { "text": "TAP TO PLAY", "styleSkin": "comp/label.png", "fontSize": 40, "color": "#ffffff", "centerX": 0, "bottom": 293 }, "compId": 6 }, { "type": "Box", "props": { "var": "bx_btns", "centerX": 0, "bottom": 60 }, "compId": 15, "child": [{ "type": "Box", "props": { "y": -2, "x": 0, "width": 97, "height": 101 }, "compId": 20, "child": [{ "type": "Box", "props": { "y": -240, "width": 117, "var": "bx_subMenu", "height": 338, "centerX": 0 }, "compId": 21, "child": [{ "type": "Image", "props": { "top": -15, "skin": "game/bg_setting.png", "right": 0, "left": 0, "bottom": -15, "sizeGrid": "50,55,50,50" }, "compId": 26 }, { "type": "Button", "props": { "var": "btn_mute", "stateNum": 1, "skin": "game/btn_mute.png", "centerX": 0 }, "compId": 24, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 25 }] }, { "type": "Button", "props": { "y": 117, "var": "btn_vibrate", "stateNum": 1, "skin": "game/btn_vibrate.png", "centerX": 0 }, "compId": 9, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 16 }] }] }, { "type": "Button", "props": { "y": 0, "x": 0, "var": "btn_setting", "stateNum": 1, "skin": "game/btn_setting.png" }, "compId": 22, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 23 }] }] }, { "type": "Button", "props": { "x": 200, "var": "btn_rank", "stateNum": 1, "skin": "game/btn_rank.png" }, "compId": 7, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 17 }] }, { "type": "Button", "props": { "x": 400, "var": "btn_share", "stateNum": 1, "skin": "game/btn_share.png", "labelSize": 40 }, "compId": 4, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 19 }] }] }, { "type": "Button", "props": { "y": 1035, "x": 445.19140625, "visible": false, "var": "btn_noad", "stateNum": 1, "skin": "game/btn_ad.png", "labelSize": 40 }, "compId": 5, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 18 }] }], "loadList": ["comp/label.png", "game/bg_setting.png", "game/btn_mute.png", "game/btn_vibrate.png", "game/btn_setting.png", "game/btn_rank.png", "game/btn_share.png", "game/btn_ad.png"], "loadList3D": [] };
            return MeunUI;
        }(Scene));
        view.MeunUI = MeunUI;
        REG("ui.view.MeunUI", MeunUI);
        var RankUI = /** @class */ (function (_super) {
            tslib_1.__extends(RankUI, _super);
            function RankUI() {
                return _super.call(this) || this;
            }
            RankUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(RankUI.uiView);
            };
            RankUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": 0, "x": 0, "top": 0, "right": 0, "left": 0, "bottom": 0, "bgColor": "#0", "alpha": 0.6 }, "compId": 51 }, { "type": "Sprite", "props": { "y": 34, "x": 26, "var": "btn_home", "texture": "rank/btn_home.png", "label": "label" }, "compId": 4, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 72 }] }, { "type": "Box", "props": { "y": 274, "width": 436, "var": "bx_tab", "height": 62, "centerX": 0 }, "compId": 6, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 0, "texture": "rank/rank_tab_h.png" }, "compId": 8, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 436, "texture": "rank/rank_tab_h.png", "scaleX": -1, "name": "sprite" }, "compId": 10 }] }, { "type": "Sprite", "props": { "y": 0, "x": 0, "var": "tab_left", "texture": "rank/rank_tab.png" }, "compId": 9, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 73 }] }, { "type": "Box", "props": { "y": 0, "x": 218, "width": 218, "var": "tab_right", "mouseEnabled": true, "height": 62 }, "compId": 13, "child": [{ "type": "Sprite", "props": { "x": 218, "texture": "rank/rank_tab.png", "scaleX": -1, "mouseEnabled": false }, "compId": 7 }, { "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 74 }] }, { "type": "Label", "props": { "y": 0, "x": 0, "width": 218, "var": "lbl_left", "valign": "middle", "text": "FRIENDS", "mouseEnabled": false, "height": 60, "fontSize": 30, "bold": true, "align": "center" }, "compId": 11 }, { "type": "Label", "props": { "y": 0, "x": 218, "width": 218, "var": "lbl_right", "valign": "middle", "text": "GLOBAL", "mouseEnabled": false, "height": 60, "fontSize": 30, "bold": true, "align": "center" }, "compId": 12 }] }, { "type": "List", "props": { "y": 684, "x": 60, "var": "list_global", "top": 342, "right": 30, "repeatY": 7, "repeatX": 1, "left": 30, "bottom": 206 }, "compId": 42, "child": [{ "type": "Box", "props": { "x": 0, "right": 0, "name": "render", "left": 0, "height": 80 }, "compId": 63, "child": [{ "type": "Image", "props": { "y": 0, "skin": "rank/bg_rank_item.png", "right": 0, "left": 0, "sizeGrid": "39,38,39,36" }, "compId": 64 }, { "type": "Label", "props": { "x": 0, "width": 70, "valign": "middle", "top": 0, "text": "1", "name": "txt_rank", "height": 80, "fontSize": 28, "color": "#fff6f6", "bottom": 0, "bold": true, "align": "center" }, "compId": 65 }, { "type": "Image", "props": { "x": 73, "width": 70, "skin": "rank/default_portrait.png", "name": "img_head", "height": 70, "centerY": 0 }, "compId": 66, "child": [{ "type": "Image", "props": { "y": 0, "width": 70, "skin": "rank/default_portrait.png", "renderType": "mask", "name": "img_head_mask", "height": 70, "centerY": 0 }, "compId": 79 }] }, { "type": "Label", "props": { "x": 166, "wordWrap": true, "width": 173, "valign": "middle", "top": 0, "text": "label", "name": "txt_name", "fontSize": 24, "color": "#fff6f6", "bottom": 0, "align": "left" }, "compId": 67 }, { "type": "Label", "props": { "x": 339, "width": 135, "valign": "middle", "top": 0, "text": "label", "name": "txt_score", "height": 80, "fontSize": 24, "color": "#fff6f6", "bottom": 0, "align": "center" }, "compId": 68 }, { "type": "Image", "props": { "y": 3, "skin": "rank/icon_play_game.png", "right": 34, "name": "btn_action", "centerY": 0 }, "compId": 69, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 75 }] }, { "type": "Script", "props": { "runtime": "view/RankItemRender.ts" }, "compId": 70 }] }, { "type": "VScrollBar", "props": { "visible": false, "top": 0, "skin": "comp/vscroll.png", "right": 0, "name": "scrollBar", "bottom": 0 }, "compId": 50 }] }, { "type": "List", "props": { "var": "list_friends", "top": 342, "right": 30, "repeatY": 7, "repeatX": 1, "left": 30, "bottom": 206 }, "compId": 22, "child": [{ "type": "Box", "props": { "x": 0, "right": 0, "name": "render", "left": 0, "height": 80 }, "compId": 56, "child": [{ "type": "Image", "props": { "y": 0, "skin": "rank/bg_rank_item.png", "right": 0, "left": 0, "sizeGrid": "39,38,39,36" }, "compId": 57 }, { "type": "Label", "props": { "x": 0, "width": 70, "valign": "middle", "top": 0, "text": "1", "name": "txt_rank", "height": 80, "fontSize": 28, "color": "#fff6f6", "bottom": 0, "bold": true, "align": "center" }, "compId": 58 }, { "type": "Image", "props": { "x": 73, "width": 70, "skin": "rank/default_portrait.png", "name": "img_head", "height": 70, "centerY": 0 }, "compId": 59, "child": [{ "type": "Image", "props": { "y": 0, "width": 70, "skin": "rank/default_portrait.png", "renderType": "mask", "name": "img_head_mask", "height": 70, "centerY": 0 }, "compId": 78 }] }, { "type": "Label", "props": { "x": 166, "wordWrap": true, "width": 173, "valign": "middle", "top": 0, "text": "label", "name": "txt_name", "fontSize": 24, "color": "#fff6f6", "bottom": 0, "align": "left" }, "compId": 60 }, { "type": "Label", "props": { "x": 339, "width": 135, "valign": "middle", "top": 0, "text": "label", "name": "txt_score", "height": 80, "fontSize": 24, "color": "#fff6f6", "bottom": 0, "align": "center" }, "compId": 61 }, { "type": "Image", "props": { "y": 3, "skin": "rank/icon_play_game.png", "right": 34, "name": "btn_action", "centerY": 0 }, "compId": 62, "child": [{ "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 76 }] }, { "type": "Script", "props": { "runtime": "view/RankItemRender.ts" }, "compId": 71 }] }, { "type": "VScrollBar", "props": { "visible": false, "top": 0, "skin": "comp/vscroll.png", "right": 0, "name": "scrollBar", "bottom": 0 }, "compId": 23 }] }, { "type": "Image", "props": { "var": "btn_invite", "skin": "rank/btn_invite.png", "label": "label", "centerX": 0, "bottom": 52 }, "compId": 24, "child": [{ "type": "Sprite", "props": { "y": 26, "x": 37, "texture": "rank/icon_friend.png" }, "compId": 25 }, { "type": "Label", "props": { "width": 192, "text": "INVITE", "height": 38, "fontSize": 38, "centerY": 0, "centerX": 34, "bold": true, "align": "center" }, "compId": 26 }, { "type": "Script", "props": { "runtime": "script/ButtonScript.ts" }, "compId": 77 }] }, { "type": "Box", "props": { "y": 58, "width": 171, "centerX": 0 }, "compId": 28, "child": [{ "type": "Image", "props": { "width": 171, "var": "img_head", "skin": "rank/default_portrait.png", "height": 171 }, "compId": 27, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 171, "skin": "rank/default_portrait.png", "renderType": "mask", "height": 171 }, "compId": 30 }] }, { "type": "Image", "props": { "y": 0, "x": 0, "skin": "rank/bord_head.png" }, "compId": 29 }, { "type": "Label", "props": { "y": 172, "var": "txt_cname", "text": " assfa asdfasdfas asdf asdfa ", "fontSize": 30, "color": "#ffffff", "centerX": 0 }, "compId": 31 }] }, { "type": "Image", "props": { "y": 619, "var": "img_busy", "skin": "loading/busy_indicator.png", "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 52, "child": [{ "type": "Script", "props": { "y": -585, "x": -287, "runtime": "script/RotateScript.ts" }, "compId": 53 }] }], "loadList": ["rank/btn_home.png", "rank/rank_tab_h.png", "rank/rank_tab.png", "rank/bg_rank_item.png", "rank/default_portrait.png", "rank/icon_play_game.png", "comp/vscroll.png", "rank/btn_invite.png", "rank/icon_friend.png", "rank/bord_head.png", "loading/busy_indicator.png"], "loadList3D": [] };
            return RankUI;
        }(Scene));
        view.RankUI = RankUI;
        REG("ui.view.RankUI", RankUI);
        var SplashUI = /** @class */ (function (_super) {
            tslib_1.__extends(SplashUI, _super);
            function SplashUI() {
                return _super.call(this) || this;
            }
            SplashUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.createView(SplashUI.uiView);
            };
            SplashUI.uiView = { "type": "Scene", "props": { "width": 640, "height": 1136 }, "compId": 2, "child": [{ "type": "Sprite", "props": { "y": 0, "x": 0, "texture": "loading/bg_loading.jpg" }, "compId": 3, "child": [{ "type": "Script", "props": { "runtime": "script/FullScreenScript.ts" }, "compId": 4 }] }, { "type": "Image", "props": { "y": 902, "x": 320, "skin": "loading/busy_indicator.png", "centerX": 0, "bottom": 200, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 5, "child": [{ "type": "Script", "props": { "runtime": "script/RotateScript.ts" }, "compId": 6 }] }], "loadList": ["loading/bg_loading.jpg", "loading/busy_indicator.png"], "loadList3D": [] };
            return SplashUI;
        }(Scene));
        view.SplashUI = SplashUI;
        REG("ui.view.SplashUI", SplashUI);
    })(view = ui.view || (ui.view = {}));
})(ui = exports.ui || (exports.ui = {}));

},{"tslib":3}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameStats_1 = require("../game/GameStats");
var Game_1 = require("../game/Game");
var CircleProgressScript_1 = require("../script/CircleProgressScript");
var GameHelper_1 = require("../core/GameHelper");
var Constant_1 = require("../Constant");
var GameOverUI = /** @class */ (function (_super) {
    tslib_1.__extends(GameOverUI, _super);
    function GameOverUI() {
        var _this = _super.call(this) || this;
        _this._timeShow_ = 0;
        _this.duration = 6;
        _this._pause = false;
        _this.btn_restart.on(Laya.Event.CLICK, _this, function () {
            Game_1.Game.inst_._ui_.onClickRestart();
        });
        _this.btn_friendly.on(Laya.Event.CLICK, _this, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, GameHelper_1.GameHelper.requestContext()];
                    case 1:
                        _a.sent();
                        Game_1.Game.inst_._ui_.onClickRestart(false);
                        return [2 /*return*/];
                }
            });
        }); });
        _this._btn_continue.on(Laya.Event.CLICK, _this, function () {
            // Game.Instance._ui_.onClickContinue_();
            _this.onContinue();
        });
        _this.node_timer.on(Laya.Event.CLICK, _this, function () {
            // Game.Instance._ui_.onClickContinue_();
            _this.onContinue();
        });
        _this._btn_noThanks.on(Laya.Event.CLICK, _this, function () {
            _this.onClickContinueCancel();
        });
        return _this;
    }
    GameOverUI.prototype.onContinue = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var bo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        platform.log(Constant_1.Constant.Analytics.continue_show, { level: GameStats_1.GameStats.inst_.level, result: 1 });
                        this._pause = true;
                        return [4 /*yield*/, platform.showRAD("revive")];
                    case 1:
                        bo = _a.sent();
                        this._pause = false;
                        this.hide_();
                        Game_1.Game.inst_.continue_();
                        return [2 /*return*/];
                }
            });
        });
    };
    GameOverUI.prototype.show_ = function (canContinue, scores, percentComplete) {
        this._txt_best.text = GameStats_1.GameStats.inst_.best_score + "";
        this._txt_scores.text = scores + "";
        var flag = canContinue && platform.hasRAD();
        this.node_restart.visible = !flag;
        this.node_continue.visible = flag;
        if (!flag) {
            platform.showIADAuto_("game_over");
        }
        else {
            this._timeShow_ = this.duration;
            Laya.timer.once(1400, this, this.showNoThanks_);
            app.updater.add(this);
            this.bar_timer = this.node_timer.getComponent(CircleProgressScript_1.default);
            platform.log(Constant_1.Constant.Analytics.continue_show, { level: GameStats_1.GameStats.inst_.level, result: -1 });
        }
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
        app.ui.game_layer.addChild(this);
    };
    GameOverUI.prototype.hide_ = function () {
        app.updater.rm(this);
        this.removeSelf();
    };
    GameOverUI.prototype.onClickContinueCancel = function () {
        this.cancelContinueInt_("no_thanks");
    };
    GameOverUI.prototype.cancelContinueInt_ = function (reason) {
        this.node_restart.visible = true;
        this.node_continue.visible = false;
        platform.log(Constant_1.Constant.Analytics.continue_show, { level: GameStats_1.GameStats.inst_.level, result: 0, reason: reason });
        platform.showIADAuto_(reason);
    };
    GameOverUI.prototype.showNoThanks_ = function () {
        this._btn_noThanks.visible = true;
    };
    GameOverUI.prototype.onUpdate = function () {
        if (this._timeShow_ <= 0)
            return;
        if (this._pause)
            return;
        this._txt_timer.text = Math.round(this._timeShow_) + "";
        this.bar_timer && (this.bar_timer.value = this._timeShow_ / this.duration);
        this._timeShow_ -= Laya.timer.deltaSec;
        if (this._timeShow_ < 1) {
            this._timeShow_ = -1;
            this.cancelContinueInt_("time_out");
        }
    };
    return GameOverUI;
}(layaMaxUI_1.ui.view.GameOverUI));
exports.GameOverUI = GameOverUI;

},{"../Constant":6,"../core/GameHelper":13,"../game/Game":34,"../game/GameStats":35,"../script/CircleProgressScript":55,"../ui/layaMaxUI":63,"tslib":3}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameStats_1 = require("../game/GameStats");
var CircleProgressScript_1 = require("../script/CircleProgressScript");
var GameUI = /** @class */ (function (_super) {
    tslib_1.__extends(GameUI, _super);
    function GameUI() {
        var _this = _super.call(this) || this;
        _this.width = Laya.stage.width;
        _this.height = Laya.stage.height;
        _this.once(Laya.Event.ADDED, _this, function (e) {
            _this._circle_progress_ = _this._circle_bar.getComponent(CircleProgressScript_1.default);
            _this.updateUI_(0, GameStats_1.GameStats.inst_.scores);
            _this.showFireBar_(false);
        });
        return _this;
    }
    GameUI.prototype.setColor_ = function (color) {
        // this._circle_bar.filters = [color.getHexString()]
        var f = new Laya.ColorFilter().setColor(color.getRGBHexString());
        this._img_left.filters = this._img_right.filters = this._img_bar.filters = [f];
    };
    GameUI.prototype.updateUI_ = function (progress, scores) {
        var txtNumL = this._txtNum_left;
        var num = GameStats_1.GameStats.inst_.level;
        txtNumL.text = num.toString();
        var txtNumR = this._txtNum_right;
        num = GameStats_1.GameStats.inst_.level + 1;
        txtNumR.text = num.toString();
        this._img_bar.width = progress * this._img_bartrack.width;
        this._txt_score.text = scores.toString();
        var scale = Math.min(this._img_left.width / this._txtNum_left.width, 1);
        this._txtNum_left.scale(scale, scale, true);
        scale = Math.min(this._img_right.width / this._txtNum_right.width, 1);
        this._txtNum_right.scale(scale, scale, true);
    };
    GameUI.prototype.setScoreColor_ = function (color, bold) {
        var colorStr = color.getHexString();
        this._txt_score.color = colorStr;
        this._txt_score.bold = bold;
    };
    GameUI.prototype.showWarningFire_ = function (show) {
        this._txt_warning.visible = show;
    };
    GameUI.prototype.showFireBar_ = function (show, isRed) {
        if (isRed === void 0) { isRed = false; }
        if (this._circle_bar.visible != show) {
            this._circle_bar.visible = show;
            this._circle_progress_.value = 0;
            this._targetCircleAmount_ = 0;
        }
        if (isRed) {
            var f = new Laya.ColorFilter().setColor("#ff0000");
            this._circle_progress_.bar.filters = [f];
        }
        else {
            this._circle_progress_.bar.filters = null;
        }
    };
    GameUI.prototype.updateFireBar_ = function (progress) {
        this._targetCircleAmount_ = progress;
    };
    GameUI.prototype.onUpdate = function () {
        var value = (this._circle_progress_.value + this._targetCircleAmount_) / 2;
        this._circle_progress_.value = value;
    };
    return GameUI;
}(layaMaxUI_1.ui.view.GameUI));
exports.GameUI = GameUI;

},{"../game/GameStats":35,"../script/CircleProgressScript":55,"../ui/layaMaxUI":63,"tslib":3}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Game_1 = require("../game/Game");
var GameWinUI = /** @class */ (function (_super) {
    tslib_1.__extends(GameWinUI, _super);
    function GameWinUI() {
        var _this = _super.call(this) || this;
        _this.mouseEnabled = true;
        return _this;
    }
    GameWinUI.prototype.show_ = function (level) {
        this._txtComplete.text = "LEVEL " + level + "\nCOMPLETED!";
        this.width = Laya.stage.width;
        this.height = Laya.stage.height;
        app.ui.game_layer.addChild(this);
        this.on(Laya.Event.CLICK, this, this.onStageClick);
    };
    GameWinUI.prototype.hide_ = function () {
        this.removeSelf();
        this.off(Laya.Event.CLICK, this, this.onStageClick);
    };
    GameWinUI.prototype.onStageClick = function (e) {
        e.stopPropagation();
        Game_1.Game.inst_._ui_.onClickNext_();
    };
    return GameWinUI;
}(layaMaxUI_1.ui.view.GameWinUI));
exports.GameWinUI = GameWinUI;

},{"../game/Game":34,"../ui/layaMaxUI":63,"tslib":3}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Game_1 = require("../game/Game");
var ShareHelper_1 = require("../share/ShareHelper");
var Sound_1 = require("../game/Sound");
var MeunUI = /** @class */ (function (_super) {
    tslib_1.__extends(MeunUI, _super);
    function MeunUI() {
        var _this = _super.call(this) || this;
        _this.width = Laya.stage.width;
        _this.height = Laya.stage.height;
        _this.btn_noad.visible = false;
        _this.bx_subMenu.visible = false;
        _this.on(Laya.Event.MOUSE_DOWN, _this, function (e) {
            if (e.target instanceof Laya.Button) {
                e.stopPropagation();
            }
            else {
                _this.bx_subMenu.visible = false;
            }
        });
        // this.bx_btns.on(Laya.Event.MOUSE_DOWN,this,(e:Laya.Event)=>{
        // 	e.stopPropagation();
        // })
        // this.bx_btns.on(Laya.Event.CLICK,this,(e:Laya.Event)=>{
        // 	e.stopPropagation();
        // })
        _this.btn_rank.on(Laya.Event.CLICK, _this, function (e) {
            Game_1.Game.inst_._ui_.showRank();
        });
        _this.btn_noad.on(Laya.Event.CLICK, _this, function () {
            //TODO:
        });
        _this.btn_share.on(Laya.Event.CLICK, _this, function () {
            ShareHelper_1.ShareHelper.baseShare("home_share", false);
        });
        _this.btn_setting.on(Laya.Event.CLICK, _this, function () {
            _this.bx_subMenu.visible = !_this.bx_subMenu.visible;
        });
        _this.btn_vibrate.skin = app.vibrateEnable ? "game/btn_vibrate.png" : "game/btn_vibrate_h.png";
        _this.btn_vibrate.on(Laya.Event.CLICK, _this, function () {
            app.vibrateEnable = !app.vibrateEnable;
            _this.btn_vibrate.skin = app.vibrateEnable ? "game/btn_vibrate.png" : "game/btn_vibrate_h.png";
        });
        _this.btn_mute.skin = Sound_1.Sound.getMeute() ? "game/btn_mute_h.png" : "game/btn_mute.png";
        _this.btn_mute.on(Laya.Event.CLICK, _this, function () {
            var bo = Sound_1.Sound.setMute(!Sound_1.Sound.getMeute());
            _this.btn_mute.skin = bo ? "game/btn_mute_h.png" : "game/btn_mute.png";
        });
        return _this;
    }
    return MeunUI;
}(layaMaxUI_1.ui.view.MeunUI));
exports.MeunUI = MeunUI;

},{"../game/Game":34,"../game/Sound":38,"../share/ShareHelper":61,"../ui/layaMaxUI":63,"tslib":3}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ShareHelper_1 = require("../share/ShareHelper");
var Game_1 = require("../game/Game");
var RankItemRender = /** @class */ (function (_super) {
    tslib_1.__extends(RankItemRender, _super);
    function RankItemRender() {
        return _super.call(this) || this;
    }
    RankItemRender.prototype.onAwake = function () {
        var _this = this;
        this.txt_rank = this.owner.getChildByName("txt_rank");
        this.txt_name = this.owner.getChildByName("txt_name");
        this.txt_score = this.owner.getChildByName("txt_score");
        this.img_head = this.owner.getChildByName("img_head");
        this.btn_action = this.owner.getChildByName("btn_action");
        this.btn_action.on(Laya.Event.CLICK, this, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var bo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._data.id == platform.playerInfo.playerId)) return [3 /*break*/, 1];
                        ShareHelper_1.ShareHelper.baseShare("rank_share", false);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, platform.createAsync(this._data.id, "rank_play")];
                    case 2:
                        bo = _a.sent();
                        if (bo) {
                            ShareHelper_1.ShareHelper.baseShare("rank_play", true);
                        }
                        Game_1.Game.inst_._ui_.hideRank();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    RankItemRender.prototype.setData = function (data, index) {
        this._data = data;
        this.txt_rank.text = (index + 1) + "";
        this.txt_name.text = data.name;
        this.txt_score.text = data.score + "";
        this.img_head.skin = data.photo;
        this.btn_action.skin = this._data.id == platform.playerInfo.playerId ? "rank/icon_share.png" : "rank/icon_play_game.png";
    };
    RankItemRender.prototype.onEnable = function () {
    };
    RankItemRender.prototype.onDisable = function () {
    };
    return RankItemRender;
}(Laya.Script));
exports.default = RankItemRender;

},{"../game/Game":34,"../share/ShareHelper":61,"tslib":3}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layaMaxUI_1 = require("../ui/layaMaxUI");
var RankItemRender_1 = require("./RankItemRender");
var ShareHelper_1 = require("../share/ShareHelper");
var RankUI = /** @class */ (function (_super) {
    tslib_1.__extends(RankUI, _super);
    function RankUI() {
        var _this = _super.call(this) || this;
        _this._busy_count = 0;
        _this.width = Laya.stage.width;
        _this.height = Laya.stage.height;
        _this.on(Laya.Event.CLICK, _this, function (e) {
            e.stopPropagation();
        });
        _this.on(Laya.Event.MOUSE_DOWN, _this, function (e) {
            e.stopPropagation();
        });
        return _this;
    }
    RankUI.prototype.createChildren = function () {
        var _this = this;
        _super.prototype.createChildren.call(this);
        this.img_busy.visible = false;
        this.btn_home.on(Laya.Event.CLICK, this, function () {
            _this.event(Laya.Event.CLOSE);
        });
        this.btn_invite.on(Laya.Event.CLICK, this, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var bo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, platform.chooseAsync(["NEW_CONTEXT_ONLY"])];
                    case 1:
                        bo = _a.sent();
                        if (bo) {
                            ShareHelper_1.ShareHelper.baseShare("rank_invite", true);
                            this.event(Laya.Event.CLOSE);
                        }
                        return [2 /*return*/];
                }
            });
        }); });
        this.list_friends.renderHandler = this.list_global.renderHandler = new Laya.Handler(this, function (cell, index) {
            var logic = cell.getComponent(RankItemRender_1.default);
            logic.setData(cell.dataSource, index);
        });
        this.tab_left.mouseEnabled = true;
        this.tab_right.mouseEnabled = true;
        this.bx_tab.on(Laya.Event.CLICK, this, function (e) {
            if (e.target == _this.tab_left) {
                _this.changeView(0);
            }
            else if (e.target == _this.tab_right) {
                _this.changeView(1);
            }
            else {
                console.log("something wrong with rank tab!");
            }
        });
        this.changeView(0);
    };
    RankUI.prototype.showBusy = function () {
        this._busy_count++;
        this.img_busy.visible = true;
    };
    RankUI.prototype.hideBusy = function () {
        if (--this._busy_count <= 0) {
            this.img_busy.visible = false;
        }
    };
    RankUI.prototype.changeView = function (index) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, champion;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.tab_left.alpha = index == 1 ? 0 : 1;
                        this.lbl_left.color = index == 1 ? "#ffffff" : "#0";
                        this.tab_right.alpha = index == 0 ? 0 : 1;
                        this.lbl_right.color = index == 0 ? "#ffffff" : "#0";
                        this.list_friends.visible = index == 0;
                        this.list_global.visible = index == 1;
                        if (!(index == 0 && !this.list_friends.array)) return [3 /*break*/, 2];
                        this.showBusy();
                        _a = this.list_friends;
                        return [4 /*yield*/, platform.getWorldFriendEntriesAsync()];
                    case 1:
                        _a.array = _c.sent();
                        this.hideBusy();
                        _c.label = 2;
                    case 2:
                        if (!(index == 1 && !this.list_global.array)) return [3 /*break*/, 4];
                        this.showBusy();
                        _b = this.list_global;
                        return [4 /*yield*/, platform.getWorldEntriesAsync()];
                    case 3:
                        _b.array = _c.sent();
                        this.hideBusy();
                        _c.label = 4;
                    case 4:
                        champion = index == 0 ? this.list_friends.array[0] : this.list_global.array[0];
                        this.img_head.skin = champion ? champion.photo : platform.playerInfo.photo;
                        this.txt_cname.text = champion ? champion.name : platform.playerInfo.name;
                        return [2 /*return*/];
                }
            });
        });
    };
    return RankUI;
}(layaMaxUI_1.ui.view.RankUI));
exports.RankUI = RankUI;

},{"../share/ShareHelper":61,"../ui/layaMaxUI":63,"./RankItemRender":68,"tslib":3}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
